// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "../src/List.bs.js";
import * as Unix from "./Unix.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Deque from "../src/deque.bs.js";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";

for(var size = 0; size <= 500; ++size){
  var lst = List.init(size, (function (i) {
          return i;
        }));
  var steq = Curry._1(Deque.Steque.of_list, lst);
  var deck = Curry._1(Deque.Deck.of_list, lst);
  var deckrev = Curry._1(Deque.Deckrev.of_list, lst);
  Curry._1(Printf.printf(/* Format */{
            _0: {
              TAG: /* Int */4,
              _0: /* Int_i */3,
              _1: /* No_padding */0,
              _2: /* No_precision */0,
              _3: {
                TAG: /* Char_literal */12,
                _0: /* '\t' */9,
                _1: /* End_of_format */0
              }
            },
            _1: "%i\t"
          }), size);
  var t0 = Unix.gettimeofday(undefined);
  for(var _for = 0; _for <= 1000; ++_for){
    Pervasives.$at(lst, lst);
  }
  var t1 = Unix.gettimeofday(undefined);
  Curry._1(Printf.printf(/* Format */{
            _0: {
              TAG: /* Float */8,
              _0: /* Float_f */0,
              _1: /* No_padding */0,
              _2: /* No_precision */0,
              _3: {
                TAG: /* Char_literal */12,
                _0: /* '\t' */9,
                _1: /* End_of_format */0
              }
            },
            _1: "%f\t"
          }), t1 - t0);
  var t0$1 = Unix.gettimeofday(undefined);
  for(var _for$1 = 0; _for$1 <= 1000; ++_for$1){
    List.rev_append(List.rev(lst), lst);
  }
  var t1$1 = Unix.gettimeofday(undefined);
  Curry._1(Printf.printf(/* Format */{
            _0: {
              TAG: /* Float */8,
              _0: /* Float_f */0,
              _1: /* No_padding */0,
              _2: /* No_precision */0,
              _3: {
                TAG: /* Char_literal */12,
                _0: /* '\t' */9,
                _1: /* End_of_format */0
              }
            },
            _1: "%f\t"
          }), t1$1 - t0$1);
  var t0$2 = Unix.gettimeofday(undefined);
  for(var _for$2 = 0; _for$2 <= 1000; ++_for$2){
    Curry._2(Deque.Steque.$at, steq, steq);
  }
  var t1$2 = Unix.gettimeofday(undefined);
  Curry._1(Printf.printf(/* Format */{
            _0: {
              TAG: /* Float */8,
              _0: /* Float_f */0,
              _1: /* No_padding */0,
              _2: /* No_precision */0,
              _3: {
                TAG: /* Char_literal */12,
                _0: /* '\t' */9,
                _1: /* End_of_format */0
              }
            },
            _1: "%f\t"
          }), t1$2 - t0$2);
  var t0$3 = Unix.gettimeofday(undefined);
  for(var _for$3 = 0; _for$3 <= 1000; ++_for$3){
    Curry._2(Deque.Deck.$at, deck, deck);
  }
  var t1$3 = Unix.gettimeofday(undefined);
  Curry._1(Printf.printf(/* Format */{
            _0: {
              TAG: /* Float */8,
              _0: /* Float_f */0,
              _1: /* No_padding */0,
              _2: /* No_precision */0,
              _3: {
                TAG: /* Char_literal */12,
                _0: /* '\t' */9,
                _1: /* End_of_format */0
              }
            },
            _1: "%f\t"
          }), t1$3 - t0$3);
  var t0$4 = Unix.gettimeofday(undefined);
  for(var _for$4 = 0; _for$4 <= 1000; ++_for$4){
    Curry._2(Deque.Deckrev.$at, deckrev, deckrev);
  }
  var t1$4 = Unix.gettimeofday(undefined);
  Curry._1(Printf.printf(/* Format */{
            _0: {
              TAG: /* Float */8,
              _0: /* Float_f */0,
              _1: /* No_padding */0,
              _2: /* No_precision */0,
              _3: {
                TAG: /* Char_literal */12,
                _0: /* '\n' */10,
                _1: {
                  TAG: /* Flush */10,
                  _0: /* End_of_format */0
                }
              }
            },
            _1: "%f\n%!"
          }), t1$4 - t0$4);
}

export {
  
}
/*  Not a pure module */
