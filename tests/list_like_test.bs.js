// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("../src/List.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Deque = require("../src/deque.bs.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Random = require("bs-platform/lib/js/random.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Printexc = require("bs-platform/lib/js/printexc.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

Random.self_init(undefined);

function make_f(param) {
  var calls = {
    contents: /* [] */0
  };
  var f = function (x) {
    calls.contents = {
      hd: x,
      tl: calls.contents
    };
    return x;
  };
  return [
          f,
          calls
        ];
}

function make_fs(param) {
  var match = make_f(undefined);
  var fc = match[1];
  var match$1 = make_f(undefined);
  var gc = match$1[1];
  var check = function (param) {
    if (Caml_obj.caml_notequal(fc.contents, gc.contents)) {
      Pervasives.failwith("differing call order");
    }
    if (fc.contents === /* [] */0) {
      return Pervasives.failwith("functions were not called");
    }
    
  };
  return [
          match[0],
          match$1[0],
          check
        ];
}

var counter = {
  contents: Pervasives.min_int
};

function elt(param) {
  counter.contents = counter.contents + 1 | 0;
  return counter.contents;
}

function make_list(n) {
  return List.init(n, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
}

function test(name, fn) {
  try {
    Curry._1(fn, undefined);
    return Curry._1(Printf.printf(/* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "OK ",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* Char_literal */12,
                          _0: /* '\n' */10,
                          _1: {
                            TAG: /* Flush */10,
                            _0: /* End_of_format */0
                          }
                        }
                      }
                    },
                    _1: "OK %s\n%!"
                  }), name);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    Curry._2(Printf.fprintf(Pervasives.stderr, /* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "ERROR ",
                _1: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: {
                    TAG: /* Char_literal */12,
                    _0: /* '\n' */10,
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* Char_literal */12,
                        _0: /* '\n' */10,
                        _1: {
                          TAG: /* Flush */10,
                          _0: /* End_of_format */0
                        }
                      }
                    }
                  }
                }
              },
              _1: "ERROR %s\n%s\n%!"
            }), name, Printexc.to_string(err));
    Printexc.print_backtrace(Pervasives.stderr);
    throw err;
  }
}

function Test(D) {
  var make = function (sizeOpt, param) {
    var size = sizeOpt !== undefined ? sizeOpt : 10;
    var lst = List.init(size, (function (param) {
            counter.contents = counter.contents + 1 | 0;
            return counter.contents;
          }));
    var deq = Curry._1(D.of_list, lst);
    return [
            lst,
            deq
          ];
  };
  var assert_eq = function (lst, deq) {
    if (Caml_obj.caml_equal(lst, Curry._1(D.to_list, deq))) {
      return ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "list_like_test.re",
            62,
            32
          ],
          Error: new Error()
        };
  };
  var assert_not_found = function (f) {
    var tmp;
    try {
      Curry._1(f, undefined);
      tmp = false;
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === "Not_found") {
        tmp = true;
      } else {
        throw exn;
      }
    }
    if (tmp) {
      return ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "list_like_test.re",
            64,
            4
          ],
          Error: new Error()
        };
  };
  var assert_invalid = function (f) {
    var tmp;
    try {
      Curry._1(f, undefined);
      tmp = false;
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === "Invalid_argument") {
        tmp = true;
      } else {
        throw exn;
      }
    }
    if (tmp) {
      return ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "list_like_test.re",
            73,
            4
          ],
          Error: new Error()
        };
  };
  var assert_failure = function (f) {
    var tmp;
    try {
      Curry._1(f, undefined);
      tmp = false;
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === "Failure") {
        tmp = true;
      } else {
        throw exn;
      }
    }
    if (tmp) {
      return ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "list_like_test.re",
            82,
            4
          ],
          Error: new Error()
        };
  };
  test("iter", (function (param) {
          var match = make(undefined, undefined);
          var deq = match[1];
          var lst = match[0];
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          List.iter((function (x) {
                  Curry._1(f, x);
                  
                }), lst);
          Curry._2(D.iter, (function (x) {
                  Curry._1(g, x);
                  
                }), deq);
          assert_eq(lst, deq);
          return Curry._1(match$1[2], undefined);
        }));
  test("iteri", (function (param) {
          var match = make(undefined, undefined);
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          List.iteri((function (i, x) {
                  Curry._1(f, [
                        i,
                        x
                      ]);
                  
                }), match[0]);
          Curry._2(D.iteri, (function (i, x) {
                  Curry._1(g, [
                        i,
                        x
                      ]);
                  
                }), match[1]);
          return Curry._1(match$1[2], undefined);
        }));
  test("map", (function (param) {
          var match = make(undefined, undefined);
          var match$1 = make_fs(undefined);
          var lst = List.map(match$1[0], match[0]);
          var deq = Curry._2(D.map, match$1[1], match[1]);
          assert_eq(lst, deq);
          return Curry._1(match$1[2], undefined);
        }));
  test("mapi", (function (param) {
          var match = make(undefined, undefined);
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var lst = List.mapi((function (i, x) {
                  return Curry._1(f, [
                              i,
                              x
                            ]);
                }), match[0]);
          var deq = Curry._2(D.mapi, (function (i, x) {
                  return Curry._1(g, [
                              i,
                              x
                            ]);
                }), match[1]);
          assert_eq(lst, deq);
          return Curry._1(match$1[2], undefined);
        }));
  test("rev", (function (param) {
          var match = make(undefined, undefined);
          var lst_orig = match[0];
          var lst = List.rev(lst_orig);
          var deq = Curry._1(D.rev, match[1]);
          assert_eq(lst, deq);
          if (Caml_obj.caml_notequal(lst, lst_orig)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  150,
                  8
                ],
                Error: new Error()
              };
        }));
  test("append & rev_append", (function (param) {
          var match = make(10, undefined);
          var deq0 = match[1];
          var lst0 = match[0];
          var match$1 = make(20, undefined);
          var deq1 = match$1[1];
          var lst1 = match$1[0];
          var lst01 = List.append(lst0, lst1);
          var deq01 = Curry._2(D.append, deq0, deq1);
          assert_eq(lst01, deq01);
          var lst10 = List.rev_append(lst0, lst1);
          var deq10 = Curry._2(D.rev_append, deq0, deq1);
          assert_eq(lst10, deq10);
          if (Caml_obj.caml_notequal(lst10, lst01)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  166,
                  8
                ],
                Error: new Error()
              };
        }));
  test("rev_map", (function (param) {
          var match = make(undefined, undefined);
          var match$1 = make_fs(undefined);
          var lst = List.rev_map(match$1[0], match[0]);
          var deq = Curry._2(D.rev_map, match$1[1], match[1]);
          assert_eq(lst, deq);
          return Curry._1(match$1[2], undefined);
        }));
  test("filter_map", (function (param) {
          var match = make(undefined, undefined);
          var lst_orig = match[0];
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var is_even = function (f, x) {
            if (Curry._1(f, x) % 2 === 0) {
              return Math.imul(x, x);
            }
            
          };
          var lst = List.filter_map(function (param) {
                  return is_even(f, param);
                })(lst_orig);
          var deq = Curry._2(D.filter_map, (function (param) {
                  return is_even(g, param);
                }), match[1]);
          if (List.length(lst) >= List.length(lst_orig)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    197,
                    8
                  ],
                  Error: new Error()
                };
          }
          assert_eq(lst, deq);
          return Curry._1(match$1[2], undefined);
        }));
  test("nth & nth_opt", (function (param) {
          var match = make(1234, undefined);
          var deq = match[1];
          var lst = match[0];
          for(var i = 0 ,i_finish = List.length(lst); i < i_finish; ++i){
            var x = List.nth(lst, i);
            var y = Curry._2(D.nth, deq, i);
            if (x !== y) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      211,
                      10
                    ],
                    Error: new Error()
                  };
            }
            var y$1 = Curry._2(D.nth_opt, deq, i);
            if (y$1 !== undefined) {
              if (x !== y$1) {
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "list_like_test.re",
                        214,
                        23
                      ],
                      Error: new Error()
                    };
              }
              
            } else {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      213,
                      20
                    ],
                    Error: new Error()
                  };
            }
          }
          assert_invalid(function (param) {
                return Curry._2(D.nth, deq, -1);
              });
          assert_invalid(function (param) {
                return Curry._2(D.nth_opt, deq, -1);
              });
          assert_failure(function (param) {
                return Curry._2(D.nth, deq, Curry._1(D.length, deq));
              });
          if (undefined === Curry._2(D.nth_opt, deq, Curry._1(D.length, deq))) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  220,
                  8
                ],
                Error: new Error()
              };
        }));
  test("fold_left", (function (param) {
          var match = make(undefined, undefined);
          var deq = match[1];
          var lst = match[0];
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var acc = function (f, z, x) {
            return {
                    TAG: /* F */1,
                    _0: z,
                    _1: {
                      TAG: /* X */0,
                      _0: Curry._1(f, x)
                    }
                  };
          };
          var x = List.fold_left((function (param, param$1) {
                  return acc(f, param, param$1);
                }), /* Z */0, lst);
          var y = Curry._3(D.fold_left, (function (param, param$1) {
                  return acc(g, param, param$1);
                }), /* Z */0, deq);
          if (!Caml_obj.caml_equal(x, y)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    238,
                    8
                  ],
                  Error: new Error()
                };
          }
          var x$1 = List.fold_left((function (param, param$1) {
                  return acc(f, param, param$1);
                }), /* Z */0, List.rev(lst));
          var y$1 = Curry._3(D.fold_left, (function (param, param$1) {
                  return acc(g, param, param$1);
                }), /* Z */0, Curry._1(D.rev, deq));
          if (!Caml_obj.caml_equal(x$1, y$1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    241,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$1[2], undefined);
        }));
  test("fold_left2", (function (param) {
          var match = make(undefined, undefined);
          var match$1 = make(undefined, undefined);
          var match$2 = make_fs(undefined);
          var g = match$2[1];
          var f = match$2[0];
          var acc = function (f, z, x, y) {
            return {
                    TAG: /* F */1,
                    _0: z,
                    _1: {
                      TAG: /* X */0,
                      _0: Curry._1(f, [
                            x,
                            y
                          ])
                    }
                  };
          };
          var x = List.fold_left2((function (param, param$1, param$2) {
                  return acc(f, param, param$1, param$2);
                }), /* Z */0, match[0], match$1[0]);
          var y = Curry._4(D.fold_left2, (function (param, param$1, param$2) {
                  return acc(g, param, param$1, param$2);
                }), /* Z */0, match[1], match$1[1]);
          if (!Caml_obj.caml_equal(x, y)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    256,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$2[2], undefined);
        }));
  test("fold_right", (function (param) {
          var match = make(undefined, undefined);
          var deq = match[1];
          var lst = match[0];
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var acc = function (f, x, z) {
            return {
                    TAG: /* F */1,
                    _0: {
                      TAG: /* X */0,
                      _0: Curry._1(f, x)
                    },
                    _1: z
                  };
          };
          var x = List.fold_right((function (param, param$1) {
                  return acc(f, param, param$1);
                }), lst, /* Z */0);
          var y = Curry._3(D.fold_right, (function (param, param$1) {
                  return acc(g, param, param$1);
                }), deq, /* Z */0);
          if (!Caml_obj.caml_equal(x, y)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    270,
                    8
                  ],
                  Error: new Error()
                };
          }
          var x$1 = List.fold_right((function (param, param$1) {
                  return acc(f, param, param$1);
                }), List.rev(lst), /* Z */0);
          var y$1 = Curry._3(D.fold_right, (function (param, param$1) {
                  return acc(g, param, param$1);
                }), Curry._1(D.rev, deq), /* Z */0);
          if (!Caml_obj.caml_equal(x$1, y$1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    273,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$1[2], undefined);
        }));
  test("fold_left_map", (function (param) {
          var match = make(undefined, undefined);
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var go = function (f, acc, x) {
            return [
                    {
                      hd: x,
                      tl: acc
                    },
                    Curry._1(f, x)
                  ];
          };
          var match$2 = List.fold_left_map((function (param, param$1) {
                  return go(f, param, param$1);
                }), /* [] */0, match[0]);
          var match$3 = Curry._3(D.fold_left_map, (function (param, param$1) {
                  return go(g, param, param$1);
                }), /* [] */0, match[1]);
          if (!Caml_obj.caml_equal(match$2[0], match$3[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    287,
                    8
                  ],
                  Error: new Error()
                };
          }
          assert_eq(match$2[1], match$3[1]);
          return Curry._1(match$1[2], undefined);
        }));
  test("iter2", (function (param) {
          var match = make(undefined, undefined);
          var match$1 = make(undefined, undefined);
          var match$2 = make_fs(undefined);
          var g = match$2[1];
          var f = match$2[0];
          List.iter2((function (x, y) {
                  Curry._1(f, [
                        x,
                        y
                      ]);
                  
                }), match[0], match$1[0]);
          Curry._3(D.iter2, (function (x, y) {
                  Curry._1(g, [
                        x,
                        y
                      ]);
                  
                }), match[1], match$1[1]);
          return Curry._1(match$2[2], undefined);
        }));
  test("map2", (function (param) {
          var match = make(undefined, undefined);
          var match$1 = make(undefined, undefined);
          var match$2 = make_fs(undefined);
          var g = match$2[1];
          var f = match$2[0];
          var lst = List.map2((function (x, y) {
                  return Curry._1(f, [
                              x,
                              y
                            ]);
                }), match[0], match$1[0]);
          var deq = Curry._3(D.map2, (function (x, y) {
                  return Curry._1(g, [
                              x,
                              y
                            ]);
                }), match[1], match$1[1]);
          assert_eq(lst, deq);
          return Curry._1(match$2[2], undefined);
        }));
  test("rev_map2", (function (param) {
          var match = make(undefined, undefined);
          var match$1 = make(undefined, undefined);
          var match$2 = make_fs(undefined);
          var g = match$2[1];
          var f = match$2[0];
          var lst = List.rev_map2((function (x, y) {
                  return Curry._1(f, [
                              x,
                              y
                            ]);
                }), match[0], match$1[0]);
          var deq = Curry._3(D.rev_map2, (function (x, y) {
                  return Curry._1(g, [
                              x,
                              y
                            ]);
                }), match[1], match$1[1]);
          assert_eq(lst, deq);
          return Curry._1(match$2[2], undefined);
        }));
  test("exists", (function (param) {
          var match = make(undefined, undefined);
          var deq = match[1];
          var lst = match[0];
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var is_even = function (f, x) {
            return Curry._1(f, x) % 2 === 0;
          };
          if (true !== List.exists((function (param) {
                    return is_even(f, param);
                  }), lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    341,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(D.exists, (function (param) {
                    return is_even(g, param);
                  }), deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    342,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (false !== List.exists((function (param) {
                    Curry._1(f, param);
                    return false;
                  }), lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    347,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(D.exists, (function (param) {
                    Curry._1(g, param);
                    return false;
                  }), deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    348,
                    8
                  ],
                  Error: new Error()
                };
          }
          var fail = function (param) {
            return Pervasives.failwith("should not be called");
          };
          if (false !== List.exists(fail, /* [] */0)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    350,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(D.exists, fail, D.empty)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    351,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$1[2], undefined);
        }));
  test("for_all", (function (param) {
          var match = make(undefined, undefined);
          var deq = match[1];
          var lst = match[0];
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var is_even = function (f, x) {
            return Curry._1(f, x) % 2 === 0;
          };
          if (false !== List.for_all((function (param) {
                    return is_even(f, param);
                  }), lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    363,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(D.for_all, (function (param) {
                    return is_even(g, param);
                  }), deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    364,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (true !== List.for_all((function (param) {
                    Curry._1(f, param);
                    return true;
                  }), lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    369,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(D.for_all, (function (param) {
                    Curry._1(g, param);
                    return true;
                  }), deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    370,
                    8
                  ],
                  Error: new Error()
                };
          }
          var fail = function (param) {
            return Pervasives.failwith("should not be called");
          };
          if (true !== List.for_all(fail, /* [] */0)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    372,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(D.for_all, fail, D.empty)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    373,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$1[2], undefined);
        }));
  test("exists2", (function (param) {
          var match = make(undefined, undefined);
          var deq0 = match[1];
          var lst0 = match[0];
          var match$1 = make(undefined, undefined);
          var deq1 = match$1[1];
          var lst1 = match$1[0];
          var match$2 = make_fs(undefined);
          var g = match$2[1];
          var f = match$2[0];
          var is_even = function (f, x, y) {
            return Curry._1(f, Math.imul(x, y)) % 2 === 0;
          };
          if (true !== List.exists2((function (param, param$1) {
                    return is_even(f, param, param$1);
                  }), lst0, lst1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    386,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._3(D.exists2, (function (param, param$1) {
                    return is_even(g, param, param$1);
                  }), deq0, deq1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    387,
                    8
                  ],
                  Error: new Error()
                };
          }
          var nope = function (f, x, y) {
            Curry._1(f, Math.imul(x, y));
            return false;
          };
          if (false !== List.exists2((function (param, param$1) {
                    return nope(f, param, param$1);
                  }), lst0, lst1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    392,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._3(D.exists2, (function (param, param$1) {
                    return nope(g, param, param$1);
                  }), deq0, deq1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    393,
                    8
                  ],
                  Error: new Error()
                };
          }
          var fail = function (param, param$1) {
            return Pervasives.failwith("should not be called");
          };
          if (false !== List.exists2(fail, /* [] */0, /* [] */0)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    395,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._3(D.exists2, fail, D.empty, D.empty)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    396,
                    8
                  ],
                  Error: new Error()
                };
          }
          var tmp;
          try {
            tmp = List.exists2(fail, /* [] */0, lst1);
          }
          catch (raw_exn){
            var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
            if (exn.RE_EXN_ID === "Invalid_argument") {
              tmp = true;
            } else {
              throw exn;
            }
          }
          if (!tmp) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    397,
                    8
                  ],
                  Error: new Error()
                };
          }
          var tmp$1;
          try {
            tmp$1 = Curry._3(D.exists2, fail, D.empty, deq1);
          }
          catch (raw_exn$1){
            var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
            if (exn$1.RE_EXN_ID === "Invalid_argument") {
              tmp$1 = true;
            } else {
              throw exn$1;
            }
          }
          if (!tmp$1) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    402,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$2[2], undefined);
        }));
  test("for_all2", (function (param) {
          var match = make(undefined, undefined);
          var deq0 = match[1];
          var lst0 = match[0];
          var match$1 = make(undefined, undefined);
          var deq1 = match$1[1];
          var lst1 = match$1[0];
          var match$2 = make_fs(undefined);
          var g = match$2[1];
          var f = match$2[0];
          var is_even = function (f, x, y) {
            return Curry._1(f, Math.imul(x, y)) % 2 === 0;
          };
          if (false !== List.for_all2((function (param, param$1) {
                    return is_even(f, param, param$1);
                  }), lst0, lst1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    419,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._3(D.for_all2, (function (param, param$1) {
                    return is_even(g, param, param$1);
                  }), deq0, deq1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    420,
                    8
                  ],
                  Error: new Error()
                };
          }
          var yeap = function (f, x, y) {
            Curry._1(f, Math.imul(x, y));
            return true;
          };
          if (true !== List.for_all2((function (param, param$1) {
                    return yeap(f, param, param$1);
                  }), lst0, lst1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    425,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._3(D.for_all2, (function (param, param$1) {
                    return yeap(g, param, param$1);
                  }), deq0, deq1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    426,
                    8
                  ],
                  Error: new Error()
                };
          }
          var fail = function (param, param$1) {
            return Pervasives.failwith("should not be called");
          };
          if (true !== List.for_all2(fail, /* [] */0, /* [] */0)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    428,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._3(D.for_all2, fail, D.empty, D.empty)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    429,
                    8
                  ],
                  Error: new Error()
                };
          }
          var tmp;
          try {
            tmp = List.for_all2(fail, /* [] */0, lst1);
          }
          catch (raw_exn){
            var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
            if (exn.RE_EXN_ID === "Invalid_argument") {
              tmp = true;
            } else {
              throw exn;
            }
          }
          if (!tmp) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    430,
                    8
                  ],
                  Error: new Error()
                };
          }
          var tmp$1;
          try {
            tmp$1 = Curry._3(D.for_all2, fail, D.empty, deq1);
          }
          catch (raw_exn$1){
            var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
            if (exn$1.RE_EXN_ID === "Invalid_argument") {
              tmp$1 = true;
            } else {
              throw exn$1;
            }
          }
          if (!tmp$1) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    435,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$2[2], undefined);
        }));
  test("mem", (function (param) {
          var match = make(undefined, undefined);
          var deq = match[1];
          var match$1 = Curry._1(D.unsnoc, deq);
          if (match$1 !== undefined) {
            var x = match$1[1];
            if (true !== List.mem(x, match[0])) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      452,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (true !== Curry._2(D.mem, x, deq)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      453,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (false !== Curry._2(D.mem, x, match$1[0])) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      454,
                      10
                    ],
                    Error: new Error()
                  };
            }
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  450,
                  18
                ],
                Error: new Error()
              };
        }));
  test("memq", (function (param) {
          var lst = List.map((function (x) {
                  return {
                          contents: x
                        };
                }), List.init(10, (function (param) {
                      counter.contents = counter.contents + 1 | 0;
                      return counter.contents;
                    })));
          var deq = Curry._1(D.of_list, lst);
          var match = Curry._1(D.unsnoc, deq);
          if (match !== undefined) {
            var x = match[1];
            if (true !== List.memq(x, lst)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      469,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (true !== Curry._2(D.memq, x, deq)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      470,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (false !== Curry._2(D.memq, x, match[0])) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      471,
                      10
                    ],
                    Error: new Error()
                  };
            }
            var y = {
              contents: x.contents
            };
            if (true !== List.mem(y, lst)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      473,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (true !== Curry._2(D.mem, y, deq)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      474,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (false !== List.memq(y, lst)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      475,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (false !== Curry._2(D.memq, y, deq)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      476,
                      10
                    ],
                    Error: new Error()
                  };
            }
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  467,
                  18
                ],
                Error: new Error()
              };
        }));
  test("find", (function (param) {
          var match = make(undefined, undefined);
          var deq = match[1];
          var lst = match[0];
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var elt = List.nth(lst, 3);
          var x0 = List.find((function (param) {
                  return Curry._1(f, param) === elt;
                }), lst);
          var x1 = Curry._2(D.find, (function (param) {
                  return Curry._1(g, param) === elt;
                }), deq);
          if (x0 !== elt) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    492,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (x0 !== x1) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    493,
                    8
                  ],
                  Error: new Error()
                };
          }
          assert_not_found(function (param) {
                return List.find((function (param) {
                              Curry._1(f, param);
                              return false;
                            }), lst);
              });
          assert_not_found(function (param) {
                return Curry._2(D.find, (function (param) {
                              Curry._1(g, param);
                              return false;
                            }), deq);
              });
          return Curry._1(match$1[2], undefined);
        }));
  test("find_opt", (function (param) {
          var match = make(undefined, undefined);
          var deq = match[1];
          var lst = match[0];
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var elt = List.nth(lst, 3);
          var x0 = List.find_opt((function (param) {
                  return Curry._1(f, param) === elt;
                }), lst);
          var x1 = Curry._2(D.find_opt, (function (param) {
                  return Curry._1(g, param) === elt;
                }), deq);
          if (!Caml_obj.caml_equal(x0, elt)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    514,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (!Caml_obj.caml_equal(x0, x1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    515,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== List.find_opt((function (param) {
                    Curry._1(f, param);
                    return false;
                  }), lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    520,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(D.find_opt, (function (param) {
                    Curry._1(g, param);
                    return false;
                  }), deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    521,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$1[2], undefined);
        }));
  test("find_map", (function (param) {
          var match = make(undefined, undefined);
          var deq = match[1];
          var lst = match[0];
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var elt = List.nth(lst, 3);
          var eq = function (f, x) {
            if (Curry._1(f, x) === elt) {
              return Math.imul(x, x);
            }
            
          };
          var x0 = List.find_map((function (param) {
                  return eq(f, param);
                }), lst);
          var x1 = Curry._2(D.find_map, (function (param) {
                  return eq(g, param);
                }), deq);
          if (!Caml_obj.caml_equal(x0, Math.imul(elt, elt))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    541,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (!Caml_obj.caml_equal(x0, x1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    542,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== List.find_map((function (param) {
                    Curry._1(f, param);
                    
                  }), lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    547,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(D.find_map, (function (param) {
                    Curry._1(g, param);
                    
                  }), deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    548,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$1[2], undefined);
        }));
  test("filter", (function (param) {
          var match = make(undefined, undefined);
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var is_even = function (f, x) {
            return Curry._1(f, x) % 2 === 0;
          };
          var lst = List.filter(function (param) {
                  return is_even(f, param);
                })(match[0]);
          var deq = Curry._2(D.filter, (function (param) {
                  return is_even(g, param);
                }), match[1]);
          assert_eq(lst, deq);
          if (List.length(lst) <= 0) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    563,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (/* [] */0 !== List.filter(function (param) {
                    Curry._1(f, param);
                    return false;
                  })(lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    568,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (!Curry._1(D.is_empty, Curry._2(D.filter, (function (param) {
                        Curry._1(g, param);
                        return false;
                      }), deq))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    569,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$1[2], undefined);
        }));
  test("find_all", (function (param) {
          var match = make(undefined, undefined);
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var is_even = function (f, x) {
            return Curry._1(f, x) % 2 === 0;
          };
          var lst = List.find_all(function (param) {
                  return is_even(f, param);
                })(match[0]);
          var deq = Curry._2(D.find_all, (function (param) {
                  return is_even(g, param);
                }), match[1]);
          assert_eq(lst, deq);
          if (List.length(lst) <= 0) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    584,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (/* [] */0 !== List.find_all(function (param) {
                    Curry._1(f, param);
                    return false;
                  })(lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    589,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (!Curry._1(D.is_empty, Curry._2(D.find_all, (function (param) {
                        Curry._1(g, param);
                        return false;
                      }), deq))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    590,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$1[2], undefined);
        }));
  test("partition", (function (param) {
          var match = make(undefined, undefined);
          var deq = match[1];
          var lst = match[0];
          var match$1 = make_fs(undefined);
          var g = match$1[1];
          var f = match$1[0];
          var is_even = function (f, x) {
            return Curry._1(f, x) % 2 === 0;
          };
          var match$2 = List.partition((function (param) {
                  return is_even(f, param);
                }), lst);
          var lst1 = match$2[1];
          var lst0 = match$2[0];
          var match$3 = Curry._2(D.partition, (function (param) {
                  return is_even(g, param);
                }), deq);
          assert_eq(lst0, match$3[0]);
          assert_eq(lst1, match$3[1]);
          if (List.length(lst0) <= 0) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    606,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (List.length(lst1) <= 0) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    607,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (/* [] */0 !== List.partition((function (param) {
                      Curry._1(f, param);
                      return false;
                    }), lst)[0]) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    612,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (!Curry._1(D.is_empty, Curry._2(D.partition, (function (param) {
                          Curry._1(g, param);
                          return false;
                        }), deq)[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    613,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (/* [] */0 !== List.partition((function (param) {
                      Curry._1(f, param);
                      return true;
                    }), lst)[1]) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    618,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (!Curry._1(D.is_empty, Curry._2(D.partition, (function (param) {
                          Curry._1(g, param);
                          return true;
                        }), deq)[1])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    619,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$1[2], undefined);
        }));
  test("assoc & mem_assoc", (function (param) {
          var keys = List.init(10, (function (param) {
                  counter.contents = counter.contents + 1 | 0;
                  return counter.contents;
                }));
          var values = List.init(10, (function (param) {
                  counter.contents = counter.contents + 1 | 0;
                  return counter.contents;
                }));
          var lst = List.combine(keys, values);
          var deq = Curry._1(D.of_list, lst);
          var match = Curry._1(D.unsnoc, deq);
          if (match !== undefined) {
            var match$1 = match[1];
            var v = match$1[1];
            var k = match$1[0];
            var deq$prime = match[0];
            if (v !== List.assoc(k, lst)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      637,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (v !== Curry._2(D.assoc, k, deq)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      638,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (!List.mem_assoc(k, lst)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      639,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (!Curry._2(D.mem_assoc, k, deq)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      640,
                      10
                    ],
                    Error: new Error()
                  };
            }
            var lst$prime = Curry._1(D.to_list, deq$prime);
            assert_not_found(function (param) {
                  return List.assoc(k, lst$prime);
                });
            assert_not_found(function (param) {
                  return Curry._2(D.assoc, k, deq$prime);
                });
            if (List.mem_assoc(k, lst$prime)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      644,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (Curry._2(D.mem_assoc, k, deq$prime)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      645,
                      10
                    ],
                    Error: new Error()
                  };
            }
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  635,
                  18
                ],
                Error: new Error()
              };
        }));
  test("assoc_opt", (function (param) {
          var keys = List.init(10, (function (param) {
                  counter.contents = counter.contents + 1 | 0;
                  return counter.contents;
                }));
          var values = List.init(10, (function (param) {
                  counter.contents = counter.contents + 1 | 0;
                  return counter.contents;
                }));
          var lst = List.combine(keys, values);
          var deq = Curry._1(D.of_list, lst);
          var match = Curry._1(D.unsnoc, deq);
          if (match !== undefined) {
            var match$1 = match[1];
            var v = match$1[1];
            var k = match$1[0];
            var deq$prime = match[0];
            if (!Caml_obj.caml_equal(v, List.assoc_opt(k, lst))) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      664,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (!Caml_obj.caml_equal(v, Curry._2(D.assoc_opt, k, deq))) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      665,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (!List.mem_assoc(k, lst)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      666,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (!Curry._2(D.mem_assoc, k, deq)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      667,
                      10
                    ],
                    Error: new Error()
                  };
            }
            var lst$prime = Curry._1(D.to_list, deq$prime);
            if (undefined !== List.assoc_opt(k, lst$prime)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      669,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (undefined !== Curry._2(D.assoc_opt, k, deq$prime)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      670,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (List.mem_assq(k, lst$prime)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      671,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (Curry._2(D.mem_assq, k, deq$prime)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      672,
                      10
                    ],
                    Error: new Error()
                  };
            }
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  662,
                  18
                ],
                Error: new Error()
              };
        }));
  test("assq & mem_assq", (function (param) {
          var keys = List.init(10, (function (param) {
                  counter.contents = counter.contents + 1 | 0;
                  return counter.contents;
                }));
          var values = List.init(10, (function (param) {
                  counter.contents = counter.contents + 1 | 0;
                  return counter.contents;
                }));
          var keys$1 = List.map((function (x) {
                  return {
                          contents: x
                        };
                }), keys);
          var lst = List.combine(keys$1, values);
          var deq = Curry._1(D.of_list, lst);
          var match = Curry._1(D.unsnoc, deq);
          if (match !== undefined) {
            var match$1 = match[1];
            var v = match$1[1];
            var k = match$1[0];
            var deq$prime = match[0];
            if (v !== List.assq(k, lst)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      692,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (v !== Curry._2(D.assq, k, deq)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      693,
                      10
                    ],
                    Error: new Error()
                  };
            }
            var k$prime = {
              contents: k.contents
            };
            assert_not_found(function (param) {
                  return List.assq(k$prime, lst);
                });
            assert_not_found(function (param) {
                  return Curry._2(D.assq, k$prime, deq);
                });
            var lst$prime = Curry._1(D.to_list, deq$prime);
            assert_not_found(function (param) {
                  return List.assq(k, lst$prime);
                });
            assert_not_found(function (param) {
                  return Curry._2(D.assq, k, deq$prime);
                });
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  690,
                  18
                ],
                Error: new Error()
              };
        }));
  test("assq_opt", (function (param) {
          var keys = List.init(10, (function (param) {
                  counter.contents = counter.contents + 1 | 0;
                  return counter.contents;
                }));
          var values = List.init(10, (function (param) {
                  counter.contents = counter.contents + 1 | 0;
                  return counter.contents;
                }));
          var keys$1 = List.map((function (x) {
                  return {
                          contents: x
                        };
                }), keys);
          var lst = List.combine(keys$1, values);
          var deq = Curry._1(D.of_list, lst);
          var match = Curry._1(D.unsnoc, deq);
          if (match !== undefined) {
            var match$1 = match[1];
            var v = match$1[1];
            var k = match$1[0];
            var deq$prime = match[0];
            if (!Caml_obj.caml_equal(v, List.assq_opt(k, lst))) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      719,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (!Caml_obj.caml_equal(v, Curry._2(D.assq_opt, k, deq))) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      720,
                      10
                    ],
                    Error: new Error()
                  };
            }
            var k$prime = {
              contents: k.contents
            };
            if (undefined !== List.assq_opt(k$prime, lst)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      722,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (undefined !== Curry._2(D.assq_opt, k$prime, deq)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      723,
                      10
                    ],
                    Error: new Error()
                  };
            }
            var lst$prime = Curry._1(D.to_list, deq$prime);
            if (undefined !== List.assq_opt(k, lst$prime)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      725,
                      10
                    ],
                    Error: new Error()
                  };
            }
            if (undefined !== Curry._2(D.assq_opt, k, deq$prime)) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      726,
                      10
                    ],
                    Error: new Error()
                  };
            }
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  717,
                  18
                ],
                Error: new Error()
              };
        }));
  test("combine & split", (function (param) {
          var match_0 = make(undefined, undefined);
          var match_1 = make(undefined, undefined);
          var match = match_1;
          var values = match[0];
          var match$1 = match_0;
          var keys = match$1[0];
          var lst = List.combine(keys, values);
          var deq = Curry._2(D.combine, match$1[1], match[1]);
          assert_eq(lst, deq);
          var match$2 = List.split(lst);
          var lst1 = match$2[1];
          var lst0 = match$2[0];
          var match$3 = Curry._1(D.split, deq);
          if (!Caml_obj.caml_equal(lst0, keys)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    742,
                    8
                  ],
                  Error: new Error()
                };
          }
          assert_eq(lst0, match$3[0]);
          if (!Caml_obj.caml_equal(lst1, values)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    744,
                    8
                  ],
                  Error: new Error()
                };
          }
          return assert_eq(lst1, match$3[1]);
        }));
  test("to_seq & of_seq", (function (param) {
          var match = make(undefined, undefined);
          var lst = match[0];
          var lst_s = List.to_seq(lst);
          var deq_s = Curry._1(D.to_seq, match[1]);
          var lst$prime = List.of_seq(lst_s);
          var deq$prime = Curry._1(D.of_seq, deq_s);
          if (!Caml_obj.caml_equal(lst, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    758,
                    8
                  ],
                  Error: new Error()
                };
          }
          return assert_eq(lst, deq$prime);
        }));
  test("to_array & of_array", (function (param) {
          var lst = List.init(10, (function (param) {
                  counter.contents = counter.contents + 1 | 0;
                  return counter.contents;
                }));
          var arr = $$Array.of_list(lst);
          var deq = Curry._1(D.of_array, arr);
          assert_eq(lst, deq);
          var arr$prime = Curry._1(D.to_array, deq);
          if (Caml_obj.caml_equal(arr, arr$prime)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  772,
                  8
                ],
                Error: new Error()
              };
        }));
  test("make", (function (param) {
          for(var i = 0; i <= 100; ++i){
            var deq = Curry._2(D.make, i, "x");
            if (Curry._1(D.length, deq) !== i) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      782,
                      10
                    ],
                    Error: new Error()
                  };
            }
            
          }
          
        }));
  test("init", (function (param) {
          var match = make_fs(undefined);
          var lst = List.init(10, match[0]);
          var deq = Curry._2(D.init, 10, match[1]);
          assert_eq(lst, deq);
          return Curry._1(match[2], undefined);
        }));
  var random_list = function (param) {
    return List.init(1000, (function (param) {
                  return Random.$$int(100);
                }));
  };
  var make_rnd = function (param) {
    var lst = List.init(1000, (function (param) {
            return Random.$$int(100);
          }));
    return [
            lst,
            Curry._1(D.of_list, lst)
          ];
  };
  var is_sorted = function (_param) {
    while(true) {
      var param = _param;
      if (!param) {
        return true;
      }
      var match = param.tl;
      if (!match) {
        return true;
      }
      var x1 = match.hd;
      if (!Caml_obj.caml_lessequal(param.hd, x1)) {
        return false;
      }
      _param = {
        hd: x1,
        tl: match.tl
      };
      continue ;
    };
  };
  test("sort & merge", (function (param) {
          var match = make_rnd(undefined);
          var lst0 = List.sort(Caml_primitive.caml_int_compare, match[0]);
          var deq0 = Curry._2(D.sort, Caml_primitive.caml_int_compare, match[1]);
          assert_eq(lst0, deq0);
          var match$1 = make_rnd(undefined);
          var lst1 = List.sort(Caml_primitive.caml_int_compare, match$1[0]);
          var deq1 = Curry._2(D.sort, Caml_primitive.caml_int_compare, match$1[1]);
          assert_eq(lst1, deq1);
          var match$2 = make_fs(undefined);
          var g = match$2[1];
          var f = match$2[0];
          var count = {
            contents: 0
          };
          var comparing = function (f, x, y) {
            count.contents = count.contents + 1 | 0;
            Curry._1(f, [
                  x,
                  y
                ]);
            return Caml_obj.caml_compare(x, y);
          };
          var lst = List.merge((function (param, param$1) {
                  return comparing(f, param, param$1);
                }), lst0, lst1);
          var deq = Curry._3(D.merge, (function (param, param$1) {
                  return comparing(g, param, param$1);
                }), deq0, deq1);
          assert_eq(lst, deq);
          if (!is_sorted(lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    832,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (count.contents > (Curry._1(D.length, deq) << 1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    833,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$2[2], undefined);
        }));
  test("merge not sorted", (function (param) {
          var match = make_rnd(undefined);
          var match$1 = make_rnd(undefined);
          var match$2 = make_fs(undefined);
          var g = match$2[1];
          var f = match$2[0];
          var count = {
            contents: 0
          };
          var comparing = function (f, x, y) {
            count.contents = count.contents + 1 | 0;
            Curry._1(f, [
                  x,
                  y
                ]);
            return Caml_obj.caml_compare(x, y);
          };
          var lst = List.merge((function (param, param$1) {
                  return comparing(f, param, param$1);
                }), match[0], match$1[0]);
          var deq = Curry._3(D.merge, (function (param, param$1) {
                  return comparing(g, param, param$1);
                }), match[1], match$1[1]);
          assert_eq(lst, deq);
          if (is_sorted(lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    855,
                    8
                  ],
                  Error: new Error()
                };
          }
          if (count.contents > (Curry._1(D.length, deq) << 1)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    856,
                    8
                  ],
                  Error: new Error()
                };
          }
          return Curry._1(match$2[2], undefined);
        }));
  return {
          input_size: 10,
          make: make,
          assert_eq: assert_eq,
          assert_not_found: assert_not_found,
          assert_invalid: assert_invalid,
          assert_failure: assert_failure,
          random_list: random_list,
          make_rnd: make_rnd,
          is_sorted: is_sorted
        };
}

function header(name) {
  return Curry._2(Printf.printf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "-- ",
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* Char_literal */12,
                        _0: /* ' ' */32,
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: {
                            TAG: /* Char_literal */12,
                            _0: /* '\n' */10,
                            _1: {
                              TAG: /* Flush */10,
                              _0: /* End_of_format */0
                            }
                          }
                        }
                      }
                    }
                  },
                  _1: "-- %s %s\n%!"
                }), name, $$String.make((70 - name.length | 0) - 4 | 0, /* '-' */45));
}

header("Dequeue");

function make(sizeOpt, param) {
  var size = sizeOpt !== undefined ? sizeOpt : 10;
  var lst = List.init(size, (function (param) {
          counter.contents = counter.contents + 1 | 0;
          return counter.contents;
        }));
  var deq = Curry._1(Deque.Dequeue.of_list, lst);
  return [
          lst,
          deq
        ];
}

function assert_eq(lst, deq) {
  if (Caml_obj.caml_equal(lst, Curry._1(Deque.Dequeue.to_list, deq))) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          62,
          32
        ],
        Error: new Error()
      };
}

function assert_not_found(f) {
  var tmp;
  try {
    Curry._1(f, undefined);
    tmp = false;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      tmp = true;
    } else {
      throw exn;
    }
  }
  if (tmp) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          64,
          4
        ],
        Error: new Error()
      };
}

function assert_invalid(f) {
  var tmp;
  try {
    Curry._1(f, undefined);
    tmp = false;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Invalid_argument") {
      tmp = true;
    } else {
      throw exn;
    }
  }
  if (tmp) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          73,
          4
        ],
        Error: new Error()
      };
}

function assert_failure(f) {
  var tmp;
  try {
    Curry._1(f, undefined);
    tmp = false;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Failure") {
      tmp = true;
    } else {
      throw exn;
    }
  }
  if (tmp) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          82,
          4
        ],
        Error: new Error()
      };
}

test("iter", (function (param) {
        var match = make(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        List.iter((function (x) {
                Curry._1(f, x);
                
              }), lst);
        Curry._2(Deque.Dequeue.iter, (function (x) {
                Curry._1(g, x);
                
              }), deq);
        assert_eq(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("iteri", (function (param) {
        var match = make(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        List.iteri((function (i, x) {
                Curry._1(f, [
                      i,
                      x
                    ]);
                
              }), match[0]);
        Curry._2(Deque.Dequeue.iteri, (function (i, x) {
                Curry._1(g, [
                      i,
                      x
                    ]);
                
              }), match[1]);
        return Curry._1(match$1[2], undefined);
      }));

test("map", (function (param) {
        var match = make(undefined, undefined);
        var match$1 = make_fs(undefined);
        var lst = List.map(match$1[0], match[0]);
        var deq = Curry._2(Deque.Dequeue.map, match$1[1], match[1]);
        assert_eq(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("mapi", (function (param) {
        var match = make(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var lst = List.mapi((function (i, x) {
                return Curry._1(f, [
                            i,
                            x
                          ]);
              }), match[0]);
        var deq = Curry._2(Deque.Dequeue.mapi, (function (i, x) {
                return Curry._1(g, [
                            i,
                            x
                          ]);
              }), match[1]);
        assert_eq(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("rev", (function (param) {
        var match = make(undefined, undefined);
        var lst_orig = match[0];
        var lst = List.rev(lst_orig);
        var deq = Curry._1(Deque.Dequeue.rev, match[1]);
        assert_eq(lst, deq);
        if (Caml_obj.caml_notequal(lst, lst_orig)) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                150,
                8
              ],
              Error: new Error()
            };
      }));

test("append & rev_append", (function (param) {
        var match = make(10, undefined);
        var deq0 = match[1];
        var lst0 = match[0];
        var match$1 = make(20, undefined);
        var deq1 = match$1[1];
        var lst1 = match$1[0];
        var lst01 = List.append(lst0, lst1);
        var deq01 = Curry._2(Deque.Dequeue.append, deq0, deq1);
        assert_eq(lst01, deq01);
        var lst10 = List.rev_append(lst0, lst1);
        var deq10 = Curry._2(Deque.Dequeue.rev_append, deq0, deq1);
        assert_eq(lst10, deq10);
        if (Caml_obj.caml_notequal(lst10, lst01)) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                166,
                8
              ],
              Error: new Error()
            };
      }));

test("rev_map", (function (param) {
        var match = make(undefined, undefined);
        var match$1 = make_fs(undefined);
        var lst = List.rev_map(match$1[0], match[0]);
        var deq = Curry._2(Deque.Dequeue.rev_map, match$1[1], match[1]);
        assert_eq(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("filter_map", (function (param) {
        var match = make(undefined, undefined);
        var lst_orig = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          if (Curry._1(f, x) % 2 === 0) {
            return Math.imul(x, x);
          }
          
        };
        var lst = List.filter_map(function (param) {
                return is_even(f, param);
              })(lst_orig);
        var deq = Curry._2(Deque.Dequeue.filter_map, (function (param) {
                return is_even(g, param);
              }), match[1]);
        if (List.length(lst) >= List.length(lst_orig)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  197,
                  8
                ],
                Error: new Error()
              };
        }
        assert_eq(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("nth & nth_opt", (function (param) {
        var match = make(1234, undefined);
        var deq = match[1];
        var lst = match[0];
        for(var i = 0 ,i_finish = List.length(lst); i < i_finish; ++i){
          var x = List.nth(lst, i);
          var y = Curry._2(Deque.Dequeue.nth, deq, i);
          if (x !== y) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    211,
                    10
                  ],
                  Error: new Error()
                };
          }
          var y$1 = Curry._2(Deque.Dequeue.nth_opt, deq, i);
          if (y$1 !== undefined) {
            if (x !== y$1) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      214,
                      23
                    ],
                    Error: new Error()
                  };
            }
            
          } else {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    213,
                    20
                  ],
                  Error: new Error()
                };
          }
        }
        assert_invalid(function (param) {
              return Curry._2(Deque.Dequeue.nth, deq, -1);
            });
        assert_invalid(function (param) {
              return Curry._2(Deque.Dequeue.nth_opt, deq, -1);
            });
        assert_failure(function (param) {
              return Curry._2(Deque.Dequeue.nth, deq, Curry._1(Deque.Dequeue.length, deq));
            });
        if (undefined === Curry._2(Deque.Dequeue.nth_opt, deq, Curry._1(Deque.Dequeue.length, deq))) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                220,
                8
              ],
              Error: new Error()
            };
      }));

test("fold_left", (function (param) {
        var match = make(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var acc = function (f, z, x) {
          return {
                  TAG: /* F */1,
                  _0: z,
                  _1: {
                    TAG: /* X */0,
                    _0: Curry._1(f, x)
                  }
                };
        };
        var x = List.fold_left((function (param, param$1) {
                return acc(f, param, param$1);
              }), /* Z */0, lst);
        var y = Curry._3(Deque.Dequeue.fold_left, (function (param, param$1) {
                return acc(g, param, param$1);
              }), /* Z */0, deq);
        if (!Caml_obj.caml_equal(x, y)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  238,
                  8
                ],
                Error: new Error()
              };
        }
        var x$1 = List.fold_left((function (param, param$1) {
                return acc(f, param, param$1);
              }), /* Z */0, List.rev(lst));
        var y$1 = Curry._3(Deque.Dequeue.fold_left, (function (param, param$1) {
                return acc(g, param, param$1);
              }), /* Z */0, Curry._1(Deque.Dequeue.rev, deq));
        if (!Caml_obj.caml_equal(x$1, y$1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  241,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("fold_left2", (function (param) {
        var match = make(undefined, undefined);
        var match$1 = make(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var acc = function (f, z, x, y) {
          return {
                  TAG: /* F */1,
                  _0: z,
                  _1: {
                    TAG: /* X */0,
                    _0: Curry._1(f, [
                          x,
                          y
                        ])
                  }
                };
        };
        var x = List.fold_left2((function (param, param$1, param$2) {
                return acc(f, param, param$1, param$2);
              }), /* Z */0, match[0], match$1[0]);
        var y = Curry._4(Deque.Dequeue.fold_left2, (function (param, param$1, param$2) {
                return acc(g, param, param$1, param$2);
              }), /* Z */0, match[1], match$1[1]);
        if (!Caml_obj.caml_equal(x, y)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  256,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("fold_right", (function (param) {
        var match = make(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var acc = function (f, x, z) {
          return {
                  TAG: /* F */1,
                  _0: {
                    TAG: /* X */0,
                    _0: Curry._1(f, x)
                  },
                  _1: z
                };
        };
        var x = List.fold_right((function (param, param$1) {
                return acc(f, param, param$1);
              }), lst, /* Z */0);
        var y = Curry._3(Deque.Dequeue.fold_right, (function (param, param$1) {
                return acc(g, param, param$1);
              }), deq, /* Z */0);
        if (!Caml_obj.caml_equal(x, y)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  270,
                  8
                ],
                Error: new Error()
              };
        }
        var x$1 = List.fold_right((function (param, param$1) {
                return acc(f, param, param$1);
              }), List.rev(lst), /* Z */0);
        var y$1 = Curry._3(Deque.Dequeue.fold_right, (function (param, param$1) {
                return acc(g, param, param$1);
              }), Curry._1(Deque.Dequeue.rev, deq), /* Z */0);
        if (!Caml_obj.caml_equal(x$1, y$1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  273,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("fold_left_map", (function (param) {
        var match = make(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var go = function (f, acc, x) {
          return [
                  {
                    hd: x,
                    tl: acc
                  },
                  Curry._1(f, x)
                ];
        };
        var match$2 = List.fold_left_map((function (param, param$1) {
                return go(f, param, param$1);
              }), /* [] */0, match[0]);
        var match$3 = Curry._3(Deque.Dequeue.fold_left_map, (function (param, param$1) {
                return go(g, param, param$1);
              }), /* [] */0, match[1]);
        if (!Caml_obj.caml_equal(match$2[0], match$3[0])) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  287,
                  8
                ],
                Error: new Error()
              };
        }
        assert_eq(match$2[1], match$3[1]);
        return Curry._1(match$1[2], undefined);
      }));

test("iter2", (function (param) {
        var match = make(undefined, undefined);
        var match$1 = make(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        List.iter2((function (x, y) {
                Curry._1(f, [
                      x,
                      y
                    ]);
                
              }), match[0], match$1[0]);
        Curry._3(Deque.Dequeue.iter2, (function (x, y) {
                Curry._1(g, [
                      x,
                      y
                    ]);
                
              }), match[1], match$1[1]);
        return Curry._1(match$2[2], undefined);
      }));

test("map2", (function (param) {
        var match = make(undefined, undefined);
        var match$1 = make(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var lst = List.map2((function (x, y) {
                return Curry._1(f, [
                            x,
                            y
                          ]);
              }), match[0], match$1[0]);
        var deq = Curry._3(Deque.Dequeue.map2, (function (x, y) {
                return Curry._1(g, [
                            x,
                            y
                          ]);
              }), match[1], match$1[1]);
        assert_eq(lst, deq);
        return Curry._1(match$2[2], undefined);
      }));

test("rev_map2", (function (param) {
        var match = make(undefined, undefined);
        var match$1 = make(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var lst = List.rev_map2((function (x, y) {
                return Curry._1(f, [
                            x,
                            y
                          ]);
              }), match[0], match$1[0]);
        var deq = Curry._3(Deque.Dequeue.rev_map2, (function (x, y) {
                return Curry._1(g, [
                            x,
                            y
                          ]);
              }), match[1], match$1[1]);
        assert_eq(lst, deq);
        return Curry._1(match$2[2], undefined);
      }));

test("exists", (function (param) {
        var match = make(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        if (true !== List.exists((function (param) {
                  return is_even(f, param);
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  341,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._2(Deque.Dequeue.exists, (function (param) {
                  return is_even(g, param);
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  342,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== List.exists((function (param) {
                  Curry._1(f, param);
                  return false;
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  347,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._2(Deque.Dequeue.exists, (function (param) {
                  Curry._1(g, param);
                  return false;
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  348,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param) {
          return Pervasives.failwith("should not be called");
        };
        if (false !== List.exists(fail, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  350,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._2(Deque.Dequeue.exists, fail, Deque.Dequeue.empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  351,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("for_all", (function (param) {
        var match = make(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        if (false !== List.for_all((function (param) {
                  return is_even(f, param);
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  363,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._2(Deque.Dequeue.for_all, (function (param) {
                  return is_even(g, param);
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  364,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== List.for_all((function (param) {
                  Curry._1(f, param);
                  return true;
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  369,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._2(Deque.Dequeue.for_all, (function (param) {
                  Curry._1(g, param);
                  return true;
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  370,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param) {
          return Pervasives.failwith("should not be called");
        };
        if (true !== List.for_all(fail, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  372,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._2(Deque.Dequeue.for_all, fail, Deque.Dequeue.empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  373,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("exists2", (function (param) {
        var match = make(undefined, undefined);
        var deq0 = match[1];
        var lst0 = match[0];
        var match$1 = make(undefined, undefined);
        var deq1 = match$1[1];
        var lst1 = match$1[0];
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var is_even = function (f, x, y) {
          return Curry._1(f, Math.imul(x, y)) % 2 === 0;
        };
        if (true !== List.exists2((function (param, param$1) {
                  return is_even(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  386,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._3(Deque.Dequeue.exists2, (function (param, param$1) {
                  return is_even(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  387,
                  8
                ],
                Error: new Error()
              };
        }
        var nope = function (f, x, y) {
          Curry._1(f, Math.imul(x, y));
          return false;
        };
        if (false !== List.exists2((function (param, param$1) {
                  return nope(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  392,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._3(Deque.Dequeue.exists2, (function (param, param$1) {
                  return nope(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  393,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param, param$1) {
          return Pervasives.failwith("should not be called");
        };
        if (false !== List.exists2(fail, /* [] */0, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  395,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._3(Deque.Dequeue.exists2, fail, Deque.Dequeue.empty, Deque.Dequeue.empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  396,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp;
        try {
          tmp = List.exists2(fail, /* [] */0, lst1);
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Invalid_argument") {
            tmp = true;
          } else {
            throw exn;
          }
        }
        if (!tmp) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  397,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp$1;
        try {
          tmp$1 = Curry._3(Deque.Dequeue.exists2, fail, Deque.Dequeue.empty, deq1);
        }
        catch (raw_exn$1){
          var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
          if (exn$1.RE_EXN_ID === "Invalid_argument") {
            tmp$1 = true;
          } else {
            throw exn$1;
          }
        }
        if (!tmp$1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  402,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("for_all2", (function (param) {
        var match = make(undefined, undefined);
        var deq0 = match[1];
        var lst0 = match[0];
        var match$1 = make(undefined, undefined);
        var deq1 = match$1[1];
        var lst1 = match$1[0];
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var is_even = function (f, x, y) {
          return Curry._1(f, Math.imul(x, y)) % 2 === 0;
        };
        if (false !== List.for_all2((function (param, param$1) {
                  return is_even(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  419,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._3(Deque.Dequeue.for_all2, (function (param, param$1) {
                  return is_even(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  420,
                  8
                ],
                Error: new Error()
              };
        }
        var yeap = function (f, x, y) {
          Curry._1(f, Math.imul(x, y));
          return true;
        };
        if (true !== List.for_all2((function (param, param$1) {
                  return yeap(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  425,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._3(Deque.Dequeue.for_all2, (function (param, param$1) {
                  return yeap(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  426,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param, param$1) {
          return Pervasives.failwith("should not be called");
        };
        if (true !== List.for_all2(fail, /* [] */0, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  428,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._3(Deque.Dequeue.for_all2, fail, Deque.Dequeue.empty, Deque.Dequeue.empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  429,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp;
        try {
          tmp = List.for_all2(fail, /* [] */0, lst1);
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Invalid_argument") {
            tmp = true;
          } else {
            throw exn;
          }
        }
        if (!tmp) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  430,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp$1;
        try {
          tmp$1 = Curry._3(Deque.Dequeue.for_all2, fail, Deque.Dequeue.empty, deq1);
        }
        catch (raw_exn$1){
          var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
          if (exn$1.RE_EXN_ID === "Invalid_argument") {
            tmp$1 = true;
          } else {
            throw exn$1;
          }
        }
        if (!tmp$1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  435,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("mem", (function (param) {
        var match = make(undefined, undefined);
        var deq = match[1];
        var match$1 = Curry._1(Deque.Dequeue.unsnoc, deq);
        if (match$1 !== undefined) {
          var x = match$1[1];
          if (true !== List.mem(x, match[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    452,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(Deque.Dequeue.mem, x, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    453,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(Deque.Dequeue.mem, x, match$1[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    454,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                450,
                18
              ],
              Error: new Error()
            };
      }));

test("memq", (function (param) {
        var lst = List.map((function (x) {
                return {
                        contents: x
                      };
              }), List.init(10, (function (param) {
                    counter.contents = counter.contents + 1 | 0;
                    return counter.contents;
                  })));
        var deq = Curry._1(Deque.Dequeue.of_list, lst);
        var match = Curry._1(Deque.Dequeue.unsnoc, deq);
        if (match !== undefined) {
          var x = match[1];
          if (true !== List.memq(x, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    469,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(Deque.Dequeue.memq, x, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    470,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(Deque.Dequeue.memq, x, match[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    471,
                    10
                  ],
                  Error: new Error()
                };
          }
          var y = {
            contents: x.contents
          };
          if (true !== List.mem(y, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    473,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(Deque.Dequeue.mem, y, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    474,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== List.memq(y, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    475,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(Deque.Dequeue.memq, y, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    476,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                467,
                18
              ],
              Error: new Error()
            };
      }));

test("find", (function (param) {
        var match = make(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var elt = List.nth(lst, 3);
        var x0 = List.find((function (param) {
                return Curry._1(f, param) === elt;
              }), lst);
        var x1 = Curry._2(Deque.Dequeue.find, (function (param) {
                return Curry._1(g, param) === elt;
              }), deq);
        if (x0 !== elt) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  492,
                  8
                ],
                Error: new Error()
              };
        }
        if (x0 !== x1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  493,
                  8
                ],
                Error: new Error()
              };
        }
        assert_not_found(function (param) {
              return List.find((function (param) {
                            Curry._1(f, param);
                            return false;
                          }), lst);
            });
        assert_not_found(function (param) {
              return Curry._2(Deque.Dequeue.find, (function (param) {
                            Curry._1(g, param);
                            return false;
                          }), deq);
            });
        return Curry._1(match$1[2], undefined);
      }));

test("find_opt", (function (param) {
        var match = make(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var elt = List.nth(lst, 3);
        var x0 = List.find_opt((function (param) {
                return Curry._1(f, param) === elt;
              }), lst);
        var x1 = Curry._2(Deque.Dequeue.find_opt, (function (param) {
                return Curry._1(g, param) === elt;
              }), deq);
        if (!Caml_obj.caml_equal(x0, elt)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  514,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Caml_obj.caml_equal(x0, x1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  515,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== List.find_opt((function (param) {
                  Curry._1(f, param);
                  return false;
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  520,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== Curry._2(Deque.Dequeue.find_opt, (function (param) {
                  Curry._1(g, param);
                  return false;
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  521,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("find_map", (function (param) {
        var match = make(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var elt = List.nth(lst, 3);
        var eq = function (f, x) {
          if (Curry._1(f, x) === elt) {
            return Math.imul(x, x);
          }
          
        };
        var x0 = List.find_map((function (param) {
                return eq(f, param);
              }), lst);
        var x1 = Curry._2(Deque.Dequeue.find_map, (function (param) {
                return eq(g, param);
              }), deq);
        if (!Caml_obj.caml_equal(x0, Math.imul(elt, elt))) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  541,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Caml_obj.caml_equal(x0, x1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  542,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== List.find_map((function (param) {
                  Curry._1(f, param);
                  
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  547,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== Curry._2(Deque.Dequeue.find_map, (function (param) {
                  Curry._1(g, param);
                  
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  548,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("filter", (function (param) {
        var match = make(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        var lst = List.filter(function (param) {
                return is_even(f, param);
              })(match[0]);
        var deq = Curry._2(Deque.Dequeue.filter, (function (param) {
                return is_even(g, param);
              }), match[1]);
        assert_eq(lst, deq);
        if (List.length(lst) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  563,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.filter(function (param) {
                  Curry._1(f, param);
                  return false;
                })(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  568,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(Deque.Dequeue.is_empty, Curry._2(Deque.Dequeue.filter, (function (param) {
                      Curry._1(g, param);
                      return false;
                    }), deq))) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  569,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("find_all", (function (param) {
        var match = make(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        var lst = List.find_all(function (param) {
                return is_even(f, param);
              })(match[0]);
        var deq = Curry._2(Deque.Dequeue.find_all, (function (param) {
                return is_even(g, param);
              }), match[1]);
        assert_eq(lst, deq);
        if (List.length(lst) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  584,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.find_all(function (param) {
                  Curry._1(f, param);
                  return false;
                })(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  589,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(Deque.Dequeue.is_empty, Curry._2(Deque.Dequeue.find_all, (function (param) {
                      Curry._1(g, param);
                      return false;
                    }), deq))) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  590,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("partition", (function (param) {
        var match = make(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        var match$2 = List.partition((function (param) {
                return is_even(f, param);
              }), lst);
        var lst1 = match$2[1];
        var lst0 = match$2[0];
        var match$3 = Curry._2(Deque.Dequeue.partition, (function (param) {
                return is_even(g, param);
              }), deq);
        assert_eq(lst0, match$3[0]);
        assert_eq(lst1, match$3[1]);
        if (List.length(lst0) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  606,
                  8
                ],
                Error: new Error()
              };
        }
        if (List.length(lst1) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  607,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.partition((function (param) {
                    Curry._1(f, param);
                    return false;
                  }), lst)[0]) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  612,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(Deque.Dequeue.is_empty, Curry._2(Deque.Dequeue.partition, (function (param) {
                        Curry._1(g, param);
                        return false;
                      }), deq)[0])) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  613,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.partition((function (param) {
                    Curry._1(f, param);
                    return true;
                  }), lst)[1]) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  618,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(Deque.Dequeue.is_empty, Curry._2(Deque.Dequeue.partition, (function (param) {
                        Curry._1(g, param);
                        return true;
                      }), deq)[1])) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  619,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("assoc & mem_assoc", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var lst = List.combine(keys, values);
        var deq = Curry._1(Deque.Dequeue.of_list, lst);
        var match = Curry._1(Deque.Dequeue.unsnoc, deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (v !== List.assoc(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    637,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (v !== Curry._2(Deque.Dequeue.assoc, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    638,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!List.mem_assoc(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    639,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Curry._2(Deque.Dequeue.mem_assoc, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    640,
                    10
                  ],
                  Error: new Error()
                };
          }
          var lst$prime = Curry._1(Deque.Dequeue.to_list, deq$prime);
          assert_not_found(function (param) {
                return List.assoc(k, lst$prime);
              });
          assert_not_found(function (param) {
                return Curry._2(Deque.Dequeue.assoc, k, deq$prime);
              });
          if (List.mem_assoc(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    644,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (Curry._2(Deque.Dequeue.mem_assoc, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    645,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                635,
                18
              ],
              Error: new Error()
            };
      }));

test("assoc_opt", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var lst = List.combine(keys, values);
        var deq = Curry._1(Deque.Dequeue.of_list, lst);
        var match = Curry._1(Deque.Dequeue.unsnoc, deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (!Caml_obj.caml_equal(v, List.assoc_opt(k, lst))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    664,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Caml_obj.caml_equal(v, Curry._2(Deque.Dequeue.assoc_opt, k, deq))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    665,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!List.mem_assoc(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    666,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Curry._2(Deque.Dequeue.mem_assoc, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    667,
                    10
                  ],
                  Error: new Error()
                };
          }
          var lst$prime = Curry._1(Deque.Dequeue.to_list, deq$prime);
          if (undefined !== List.assoc_opt(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    669,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(Deque.Dequeue.assoc_opt, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    670,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (List.mem_assq(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    671,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (Curry._2(Deque.Dequeue.mem_assq, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    672,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                662,
                18
              ],
              Error: new Error()
            };
      }));

test("assq & mem_assq", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var keys$1 = List.map((function (x) {
                return {
                        contents: x
                      };
              }), keys);
        var lst = List.combine(keys$1, values);
        var deq = Curry._1(Deque.Dequeue.of_list, lst);
        var match = Curry._1(Deque.Dequeue.unsnoc, deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (v !== List.assq(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    692,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (v !== Curry._2(Deque.Dequeue.assq, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    693,
                    10
                  ],
                  Error: new Error()
                };
          }
          var k$prime = {
            contents: k.contents
          };
          assert_not_found(function (param) {
                return List.assq(k$prime, lst);
              });
          assert_not_found(function (param) {
                return Curry._2(Deque.Dequeue.assq, k$prime, deq);
              });
          var lst$prime = Curry._1(Deque.Dequeue.to_list, deq$prime);
          assert_not_found(function (param) {
                return List.assq(k, lst$prime);
              });
          assert_not_found(function (param) {
                return Curry._2(Deque.Dequeue.assq, k, deq$prime);
              });
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                690,
                18
              ],
              Error: new Error()
            };
      }));

test("assq_opt", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var keys$1 = List.map((function (x) {
                return {
                        contents: x
                      };
              }), keys);
        var lst = List.combine(keys$1, values);
        var deq = Curry._1(Deque.Dequeue.of_list, lst);
        var match = Curry._1(Deque.Dequeue.unsnoc, deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (!Caml_obj.caml_equal(v, List.assq_opt(k, lst))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    719,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Caml_obj.caml_equal(v, Curry._2(Deque.Dequeue.assq_opt, k, deq))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    720,
                    10
                  ],
                  Error: new Error()
                };
          }
          var k$prime = {
            contents: k.contents
          };
          if (undefined !== List.assq_opt(k$prime, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    722,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(Deque.Dequeue.assq_opt, k$prime, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    723,
                    10
                  ],
                  Error: new Error()
                };
          }
          var lst$prime = Curry._1(Deque.Dequeue.to_list, deq$prime);
          if (undefined !== List.assq_opt(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    725,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(Deque.Dequeue.assq_opt, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    726,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                717,
                18
              ],
              Error: new Error()
            };
      }));

test("combine & split", (function (param) {
        var match_0 = make(undefined, undefined);
        var match_1 = make(undefined, undefined);
        var match = match_1;
        var values = match[0];
        var match$1 = match_0;
        var keys = match$1[0];
        var lst = List.combine(keys, values);
        var deq = Curry._2(Deque.Dequeue.combine, match$1[1], match[1]);
        assert_eq(lst, deq);
        var match$2 = List.split(lst);
        var lst1 = match$2[1];
        var lst0 = match$2[0];
        var match$3 = Curry._1(Deque.Dequeue.split, deq);
        if (!Caml_obj.caml_equal(lst0, keys)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  742,
                  8
                ],
                Error: new Error()
              };
        }
        assert_eq(lst0, match$3[0]);
        if (!Caml_obj.caml_equal(lst1, values)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  744,
                  8
                ],
                Error: new Error()
              };
        }
        return assert_eq(lst1, match$3[1]);
      }));

test("to_seq & of_seq", (function (param) {
        var match = make(undefined, undefined);
        var lst = match[0];
        var lst_s = List.to_seq(lst);
        var deq_s = Curry._1(Deque.Dequeue.to_seq, match[1]);
        var lst$prime = List.of_seq(lst_s);
        var deq$prime = Curry._1(Deque.Dequeue.of_seq, deq_s);
        if (!Caml_obj.caml_equal(lst, lst$prime)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  758,
                  8
                ],
                Error: new Error()
              };
        }
        return assert_eq(lst, deq$prime);
      }));

test("to_array & of_array", (function (param) {
        var lst = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var arr = $$Array.of_list(lst);
        var deq = Curry._1(Deque.Dequeue.of_array, arr);
        assert_eq(lst, deq);
        var arr$prime = Curry._1(Deque.Dequeue.to_array, deq);
        if (Caml_obj.caml_equal(arr, arr$prime)) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                772,
                8
              ],
              Error: new Error()
            };
      }));

test("make", (function (param) {
        for(var i = 0; i <= 100; ++i){
          var deq = Curry._2(Deque.Dequeue.make, i, "x");
          if (Curry._1(Deque.Dequeue.length, deq) !== i) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    782,
                    10
                  ],
                  Error: new Error()
                };
          }
          
        }
        
      }));

test("init", (function (param) {
        var match = make_fs(undefined);
        var lst = List.init(10, match[0]);
        var deq = Curry._2(Deque.Dequeue.init, 10, match[1]);
        assert_eq(lst, deq);
        return Curry._1(match[2], undefined);
      }));

function random_list(param) {
  return List.init(1000, (function (param) {
                return Random.$$int(100);
              }));
}

function make_rnd(param) {
  var lst = List.init(1000, (function (param) {
          return Random.$$int(100);
        }));
  return [
          lst,
          Curry._1(Deque.Dequeue.of_list, lst)
        ];
}

function is_sorted(_param) {
  while(true) {
    var param = _param;
    if (!param) {
      return true;
    }
    var match = param.tl;
    if (!match) {
      return true;
    }
    var x1 = match.hd;
    if (!Caml_obj.caml_lessequal(param.hd, x1)) {
      return false;
    }
    _param = {
      hd: x1,
      tl: match.tl
    };
    continue ;
  };
}

test("sort & merge", (function (param) {
        var match = make_rnd(undefined);
        var lst0 = List.sort(Caml_primitive.caml_int_compare, match[0]);
        var deq0 = Curry._2(Deque.Dequeue.sort, Caml_primitive.caml_int_compare, match[1]);
        assert_eq(lst0, deq0);
        var match$1 = make_rnd(undefined);
        var lst1 = List.sort(Caml_primitive.caml_int_compare, match$1[0]);
        var deq1 = Curry._2(Deque.Dequeue.sort, Caml_primitive.caml_int_compare, match$1[1]);
        assert_eq(lst1, deq1);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var count = {
          contents: 0
        };
        var comparing = function (f, x, y) {
          count.contents = count.contents + 1 | 0;
          Curry._1(f, [
                x,
                y
              ]);
          return Caml_obj.caml_compare(x, y);
        };
        var lst = List.merge((function (param, param$1) {
                return comparing(f, param, param$1);
              }), lst0, lst1);
        var deq = Curry._3(Deque.Dequeue.merge, (function (param, param$1) {
                return comparing(g, param, param$1);
              }), deq0, deq1);
        assert_eq(lst, deq);
        if (!is_sorted(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  832,
                  8
                ],
                Error: new Error()
              };
        }
        if (count.contents > (Curry._1(Deque.Dequeue.length, deq) << 1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  833,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("merge not sorted", (function (param) {
        var match = make_rnd(undefined);
        var match$1 = make_rnd(undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var count = {
          contents: 0
        };
        var comparing = function (f, x, y) {
          count.contents = count.contents + 1 | 0;
          Curry._1(f, [
                x,
                y
              ]);
          return Caml_obj.caml_compare(x, y);
        };
        var lst = List.merge((function (param, param$1) {
                return comparing(f, param, param$1);
              }), match[0], match$1[0]);
        var deq = Curry._3(Deque.Dequeue.merge, (function (param, param$1) {
                return comparing(g, param, param$1);
              }), match[1], match$1[1]);
        assert_eq(lst, deq);
        if (is_sorted(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  855,
                  8
                ],
                Error: new Error()
              };
        }
        if (count.contents > (Curry._1(Deque.Dequeue.length, deq) << 1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  856,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

var Test_dequeue = {
  input_size: 10,
  make: make,
  assert_eq: assert_eq,
  assert_not_found: assert_not_found,
  assert_invalid: assert_invalid,
  assert_failure: assert_failure,
  random_list: random_list,
  make_rnd: make_rnd,
  is_sorted: is_sorted
};

Printf.printf(/* Format */{
      _0: {
        TAG: /* Char_literal */12,
        _0: /* '\n' */10,
        _1: {
          TAG: /* Flush */10,
          _0: /* End_of_format */0
        }
      },
      _1: "\n%!"
    });

header("Steque");

var empty = Deque.Steque.empty;

var is_empty = Deque.Steque.is_empty;

var uncons = Deque.Steque.uncons;

var append = Deque.Steque.append;

var rev = Deque.Steque.rev;

var length = Deque.Steque.length;

var nth = Deque.Steque.nth;

var nth_opt = Deque.Steque.nth_opt;

var make$1 = Deque.Steque.make;

var init = Deque.Steque.init;

var rev_append = Deque.Steque.rev_append;

var iter = Deque.Steque.iter;

var iteri = Deque.Steque.iteri;

var map = Deque.Steque.map;

var mapi = Deque.Steque.mapi;

var rev_map = Deque.Steque.rev_map;

var filter_map = Deque.Steque.filter_map;

var fold_left_map = Deque.Steque.fold_left_map;

var fold_left = Deque.Steque.fold_left;

var fold_right = Deque.Steque.fold_right;

var iter2 = Deque.Steque.iter2;

var map2 = Deque.Steque.map2;

var rev_map2 = Deque.Steque.rev_map2;

var fold_left2 = Deque.Steque.fold_left2;

var for_all = Deque.Steque.for_all;

var exists = Deque.Steque.exists;

var for_all2 = Deque.Steque.for_all2;

var exists2 = Deque.Steque.exists2;

var mem = Deque.Steque.mem;

var memq = Deque.Steque.memq;

var find = Deque.Steque.find;

var find_opt = Deque.Steque.find_opt;

var find_map = Deque.Steque.find_map;

var filter = Deque.Steque.filter;

var find_all = Deque.Steque.find_all;

var partition = Deque.Steque.partition;

var assoc = Deque.Steque.assoc;

var assoc_opt = Deque.Steque.assoc_opt;

var assq = Deque.Steque.assq;

var assq_opt = Deque.Steque.assq_opt;

var mem_assoc = Deque.Steque.mem_assoc;

var mem_assq = Deque.Steque.mem_assq;

var split = Deque.Steque.split;

var combine = Deque.Steque.combine;

var sort = Deque.Steque.sort;

var merge = Deque.Steque.merge;

var to_array = Deque.Steque.to_array;

var of_array = Deque.Steque.of_array;

var to_list = Deque.Steque.to_list;

var of_list = Deque.Steque.of_list;

var to_seq = Deque.Steque.to_seq;

var of_seq = Deque.Steque.of_seq;

function unsnoc(t) {
  var match = Curry._1(uncons, Curry._1(rev, t));
  if (match !== undefined) {
    return [
            Curry._1(rev, match[1]),
            match[0]
          ];
  }
  
}

function make$2(sizeOpt, param) {
  var size = sizeOpt !== undefined ? sizeOpt : 10;
  var lst = List.init(size, (function (param) {
          counter.contents = counter.contents + 1 | 0;
          return counter.contents;
        }));
  var deq = Curry._1(of_list, lst);
  return [
          lst,
          deq
        ];
}

function assert_eq$1(lst, deq) {
  if (Caml_obj.caml_equal(lst, Curry._1(to_list, deq))) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          62,
          32
        ],
        Error: new Error()
      };
}

function assert_not_found$1(f) {
  var tmp;
  try {
    Curry._1(f, undefined);
    tmp = false;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      tmp = true;
    } else {
      throw exn;
    }
  }
  if (tmp) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          64,
          4
        ],
        Error: new Error()
      };
}

function assert_invalid$1(f) {
  var tmp;
  try {
    Curry._1(f, undefined);
    tmp = false;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Invalid_argument") {
      tmp = true;
    } else {
      throw exn;
    }
  }
  if (tmp) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          73,
          4
        ],
        Error: new Error()
      };
}

function assert_failure$1(f) {
  var tmp;
  try {
    Curry._1(f, undefined);
    tmp = false;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Failure") {
      tmp = true;
    } else {
      throw exn;
    }
  }
  if (tmp) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          82,
          4
        ],
        Error: new Error()
      };
}

test("iter", (function (param) {
        var match = make$2(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        List.iter((function (x) {
                Curry._1(f, x);
                
              }), lst);
        Curry._2(iter, (function (x) {
                Curry._1(g, x);
                
              }), deq);
        assert_eq$1(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("iteri", (function (param) {
        var match = make$2(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        List.iteri((function (i, x) {
                Curry._1(f, [
                      i,
                      x
                    ]);
                
              }), match[0]);
        Curry._2(iteri, (function (i, x) {
                Curry._1(g, [
                      i,
                      x
                    ]);
                
              }), match[1]);
        return Curry._1(match$1[2], undefined);
      }));

test("map", (function (param) {
        var match = make$2(undefined, undefined);
        var match$1 = make_fs(undefined);
        var lst = List.map(match$1[0], match[0]);
        var deq = Curry._2(map, match$1[1], match[1]);
        assert_eq$1(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("mapi", (function (param) {
        var match = make$2(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var lst = List.mapi((function (i, x) {
                return Curry._1(f, [
                            i,
                            x
                          ]);
              }), match[0]);
        var deq = Curry._2(mapi, (function (i, x) {
                return Curry._1(g, [
                            i,
                            x
                          ]);
              }), match[1]);
        assert_eq$1(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("rev", (function (param) {
        var match = make$2(undefined, undefined);
        var lst_orig = match[0];
        var lst = List.rev(lst_orig);
        var deq = Curry._1(rev, match[1]);
        assert_eq$1(lst, deq);
        if (Caml_obj.caml_notequal(lst, lst_orig)) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                150,
                8
              ],
              Error: new Error()
            };
      }));

test("append & rev_append", (function (param) {
        var match = make$2(10, undefined);
        var deq0 = match[1];
        var lst0 = match[0];
        var match$1 = make$2(20, undefined);
        var deq1 = match$1[1];
        var lst1 = match$1[0];
        var lst01 = List.append(lst0, lst1);
        var deq01 = Curry._2(append, deq0, deq1);
        assert_eq$1(lst01, deq01);
        var lst10 = List.rev_append(lst0, lst1);
        var deq10 = Curry._2(rev_append, deq0, deq1);
        assert_eq$1(lst10, deq10);
        if (Caml_obj.caml_notequal(lst10, lst01)) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                166,
                8
              ],
              Error: new Error()
            };
      }));

test("rev_map", (function (param) {
        var match = make$2(undefined, undefined);
        var match$1 = make_fs(undefined);
        var lst = List.rev_map(match$1[0], match[0]);
        var deq = Curry._2(rev_map, match$1[1], match[1]);
        assert_eq$1(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("filter_map", (function (param) {
        var match = make$2(undefined, undefined);
        var lst_orig = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          if (Curry._1(f, x) % 2 === 0) {
            return Math.imul(x, x);
          }
          
        };
        var lst = List.filter_map(function (param) {
                return is_even(f, param);
              })(lst_orig);
        var deq = Curry._2(filter_map, (function (param) {
                return is_even(g, param);
              }), match[1]);
        if (List.length(lst) >= List.length(lst_orig)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  197,
                  8
                ],
                Error: new Error()
              };
        }
        assert_eq$1(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("nth & nth_opt", (function (param) {
        var match = make$2(1234, undefined);
        var deq = match[1];
        var lst = match[0];
        for(var i = 0 ,i_finish = List.length(lst); i < i_finish; ++i){
          var x = List.nth(lst, i);
          var y = Curry._2(nth, deq, i);
          if (x !== y) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    211,
                    10
                  ],
                  Error: new Error()
                };
          }
          var y$1 = Curry._2(nth_opt, deq, i);
          if (y$1 !== undefined) {
            if (x !== y$1) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      214,
                      23
                    ],
                    Error: new Error()
                  };
            }
            
          } else {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    213,
                    20
                  ],
                  Error: new Error()
                };
          }
        }
        assert_invalid$1(function (param) {
              return Curry._2(nth, deq, -1);
            });
        assert_invalid$1(function (param) {
              return Curry._2(nth_opt, deq, -1);
            });
        assert_failure$1(function (param) {
              return Curry._2(nth, deq, Curry._1(length, deq));
            });
        if (undefined === Curry._2(nth_opt, deq, Curry._1(length, deq))) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                220,
                8
              ],
              Error: new Error()
            };
      }));

test("fold_left", (function (param) {
        var match = make$2(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var acc = function (f, z, x) {
          return {
                  TAG: /* F */1,
                  _0: z,
                  _1: {
                    TAG: /* X */0,
                    _0: Curry._1(f, x)
                  }
                };
        };
        var x = List.fold_left((function (param, param$1) {
                return acc(f, param, param$1);
              }), /* Z */0, lst);
        var y = Curry._3(fold_left, (function (param, param$1) {
                return acc(g, param, param$1);
              }), /* Z */0, deq);
        if (!Caml_obj.caml_equal(x, y)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  238,
                  8
                ],
                Error: new Error()
              };
        }
        var x$1 = List.fold_left((function (param, param$1) {
                return acc(f, param, param$1);
              }), /* Z */0, List.rev(lst));
        var y$1 = Curry._3(fold_left, (function (param, param$1) {
                return acc(g, param, param$1);
              }), /* Z */0, Curry._1(rev, deq));
        if (!Caml_obj.caml_equal(x$1, y$1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  241,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("fold_left2", (function (param) {
        var match = make$2(undefined, undefined);
        var match$1 = make$2(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var acc = function (f, z, x, y) {
          return {
                  TAG: /* F */1,
                  _0: z,
                  _1: {
                    TAG: /* X */0,
                    _0: Curry._1(f, [
                          x,
                          y
                        ])
                  }
                };
        };
        var x = List.fold_left2((function (param, param$1, param$2) {
                return acc(f, param, param$1, param$2);
              }), /* Z */0, match[0], match$1[0]);
        var y = Curry._4(fold_left2, (function (param, param$1, param$2) {
                return acc(g, param, param$1, param$2);
              }), /* Z */0, match[1], match$1[1]);
        if (!Caml_obj.caml_equal(x, y)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  256,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("fold_right", (function (param) {
        var match = make$2(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var acc = function (f, x, z) {
          return {
                  TAG: /* F */1,
                  _0: {
                    TAG: /* X */0,
                    _0: Curry._1(f, x)
                  },
                  _1: z
                };
        };
        var x = List.fold_right((function (param, param$1) {
                return acc(f, param, param$1);
              }), lst, /* Z */0);
        var y = Curry._3(fold_right, (function (param, param$1) {
                return acc(g, param, param$1);
              }), deq, /* Z */0);
        if (!Caml_obj.caml_equal(x, y)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  270,
                  8
                ],
                Error: new Error()
              };
        }
        var x$1 = List.fold_right((function (param, param$1) {
                return acc(f, param, param$1);
              }), List.rev(lst), /* Z */0);
        var y$1 = Curry._3(fold_right, (function (param, param$1) {
                return acc(g, param, param$1);
              }), Curry._1(rev, deq), /* Z */0);
        if (!Caml_obj.caml_equal(x$1, y$1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  273,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("fold_left_map", (function (param) {
        var match = make$2(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var go = function (f, acc, x) {
          return [
                  {
                    hd: x,
                    tl: acc
                  },
                  Curry._1(f, x)
                ];
        };
        var match$2 = List.fold_left_map((function (param, param$1) {
                return go(f, param, param$1);
              }), /* [] */0, match[0]);
        var match$3 = Curry._3(fold_left_map, (function (param, param$1) {
                return go(g, param, param$1);
              }), /* [] */0, match[1]);
        if (!Caml_obj.caml_equal(match$2[0], match$3[0])) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  287,
                  8
                ],
                Error: new Error()
              };
        }
        assert_eq$1(match$2[1], match$3[1]);
        return Curry._1(match$1[2], undefined);
      }));

test("iter2", (function (param) {
        var match = make$2(undefined, undefined);
        var match$1 = make$2(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        List.iter2((function (x, y) {
                Curry._1(f, [
                      x,
                      y
                    ]);
                
              }), match[0], match$1[0]);
        Curry._3(iter2, (function (x, y) {
                Curry._1(g, [
                      x,
                      y
                    ]);
                
              }), match[1], match$1[1]);
        return Curry._1(match$2[2], undefined);
      }));

test("map2", (function (param) {
        var match = make$2(undefined, undefined);
        var match$1 = make$2(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var lst = List.map2((function (x, y) {
                return Curry._1(f, [
                            x,
                            y
                          ]);
              }), match[0], match$1[0]);
        var deq = Curry._3(map2, (function (x, y) {
                return Curry._1(g, [
                            x,
                            y
                          ]);
              }), match[1], match$1[1]);
        assert_eq$1(lst, deq);
        return Curry._1(match$2[2], undefined);
      }));

test("rev_map2", (function (param) {
        var match = make$2(undefined, undefined);
        var match$1 = make$2(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var lst = List.rev_map2((function (x, y) {
                return Curry._1(f, [
                            x,
                            y
                          ]);
              }), match[0], match$1[0]);
        var deq = Curry._3(rev_map2, (function (x, y) {
                return Curry._1(g, [
                            x,
                            y
                          ]);
              }), match[1], match$1[1]);
        assert_eq$1(lst, deq);
        return Curry._1(match$2[2], undefined);
      }));

test("exists", (function (param) {
        var match = make$2(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        if (true !== List.exists((function (param) {
                  return is_even(f, param);
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  341,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._2(exists, (function (param) {
                  return is_even(g, param);
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  342,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== List.exists((function (param) {
                  Curry._1(f, param);
                  return false;
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  347,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._2(exists, (function (param) {
                  Curry._1(g, param);
                  return false;
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  348,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param) {
          return Pervasives.failwith("should not be called");
        };
        if (false !== List.exists(fail, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  350,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._2(exists, fail, empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  351,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("for_all", (function (param) {
        var match = make$2(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        if (false !== List.for_all((function (param) {
                  return is_even(f, param);
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  363,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._2(for_all, (function (param) {
                  return is_even(g, param);
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  364,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== List.for_all((function (param) {
                  Curry._1(f, param);
                  return true;
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  369,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._2(for_all, (function (param) {
                  Curry._1(g, param);
                  return true;
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  370,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param) {
          return Pervasives.failwith("should not be called");
        };
        if (true !== List.for_all(fail, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  372,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._2(for_all, fail, empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  373,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("exists2", (function (param) {
        var match = make$2(undefined, undefined);
        var deq0 = match[1];
        var lst0 = match[0];
        var match$1 = make$2(undefined, undefined);
        var deq1 = match$1[1];
        var lst1 = match$1[0];
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var is_even = function (f, x, y) {
          return Curry._1(f, Math.imul(x, y)) % 2 === 0;
        };
        if (true !== List.exists2((function (param, param$1) {
                  return is_even(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  386,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._3(exists2, (function (param, param$1) {
                  return is_even(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  387,
                  8
                ],
                Error: new Error()
              };
        }
        var nope = function (f, x, y) {
          Curry._1(f, Math.imul(x, y));
          return false;
        };
        if (false !== List.exists2((function (param, param$1) {
                  return nope(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  392,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._3(exists2, (function (param, param$1) {
                  return nope(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  393,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param, param$1) {
          return Pervasives.failwith("should not be called");
        };
        if (false !== List.exists2(fail, /* [] */0, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  395,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._3(exists2, fail, empty, empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  396,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp;
        try {
          tmp = List.exists2(fail, /* [] */0, lst1);
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Invalid_argument") {
            tmp = true;
          } else {
            throw exn;
          }
        }
        if (!tmp) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  397,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp$1;
        try {
          tmp$1 = Curry._3(exists2, fail, empty, deq1);
        }
        catch (raw_exn$1){
          var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
          if (exn$1.RE_EXN_ID === "Invalid_argument") {
            tmp$1 = true;
          } else {
            throw exn$1;
          }
        }
        if (!tmp$1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  402,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("for_all2", (function (param) {
        var match = make$2(undefined, undefined);
        var deq0 = match[1];
        var lst0 = match[0];
        var match$1 = make$2(undefined, undefined);
        var deq1 = match$1[1];
        var lst1 = match$1[0];
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var is_even = function (f, x, y) {
          return Curry._1(f, Math.imul(x, y)) % 2 === 0;
        };
        if (false !== List.for_all2((function (param, param$1) {
                  return is_even(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  419,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._3(for_all2, (function (param, param$1) {
                  return is_even(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  420,
                  8
                ],
                Error: new Error()
              };
        }
        var yeap = function (f, x, y) {
          Curry._1(f, Math.imul(x, y));
          return true;
        };
        if (true !== List.for_all2((function (param, param$1) {
                  return yeap(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  425,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._3(for_all2, (function (param, param$1) {
                  return yeap(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  426,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param, param$1) {
          return Pervasives.failwith("should not be called");
        };
        if (true !== List.for_all2(fail, /* [] */0, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  428,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._3(for_all2, fail, empty, empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  429,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp;
        try {
          tmp = List.for_all2(fail, /* [] */0, lst1);
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Invalid_argument") {
            tmp = true;
          } else {
            throw exn;
          }
        }
        if (!tmp) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  430,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp$1;
        try {
          tmp$1 = Curry._3(for_all2, fail, empty, deq1);
        }
        catch (raw_exn$1){
          var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
          if (exn$1.RE_EXN_ID === "Invalid_argument") {
            tmp$1 = true;
          } else {
            throw exn$1;
          }
        }
        if (!tmp$1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  435,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("mem", (function (param) {
        var match = make$2(undefined, undefined);
        var deq = match[1];
        var match$1 = unsnoc(deq);
        if (match$1 !== undefined) {
          var x = match$1[1];
          if (true !== List.mem(x, match[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    452,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(mem, x, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    453,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(mem, x, match$1[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    454,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                450,
                18
              ],
              Error: new Error()
            };
      }));

test("memq", (function (param) {
        var lst = List.map((function (x) {
                return {
                        contents: x
                      };
              }), List.init(10, (function (param) {
                    counter.contents = counter.contents + 1 | 0;
                    return counter.contents;
                  })));
        var deq = Curry._1(of_list, lst);
        var match = unsnoc(deq);
        if (match !== undefined) {
          var x = match[1];
          if (true !== List.memq(x, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    469,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(memq, x, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    470,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(memq, x, match[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    471,
                    10
                  ],
                  Error: new Error()
                };
          }
          var y = {
            contents: x.contents
          };
          if (true !== List.mem(y, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    473,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(mem, y, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    474,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== List.memq(y, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    475,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(memq, y, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    476,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                467,
                18
              ],
              Error: new Error()
            };
      }));

test("find", (function (param) {
        var match = make$2(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var elt = List.nth(lst, 3);
        var x0 = List.find((function (param) {
                return Curry._1(f, param) === elt;
              }), lst);
        var x1 = Curry._2(find, (function (param) {
                return Curry._1(g, param) === elt;
              }), deq);
        if (x0 !== elt) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  492,
                  8
                ],
                Error: new Error()
              };
        }
        if (x0 !== x1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  493,
                  8
                ],
                Error: new Error()
              };
        }
        assert_not_found$1(function (param) {
              return List.find((function (param) {
                            Curry._1(f, param);
                            return false;
                          }), lst);
            });
        assert_not_found$1(function (param) {
              return Curry._2(find, (function (param) {
                            Curry._1(g, param);
                            return false;
                          }), deq);
            });
        return Curry._1(match$1[2], undefined);
      }));

test("find_opt", (function (param) {
        var match = make$2(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var elt = List.nth(lst, 3);
        var x0 = List.find_opt((function (param) {
                return Curry._1(f, param) === elt;
              }), lst);
        var x1 = Curry._2(find_opt, (function (param) {
                return Curry._1(g, param) === elt;
              }), deq);
        if (!Caml_obj.caml_equal(x0, elt)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  514,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Caml_obj.caml_equal(x0, x1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  515,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== List.find_opt((function (param) {
                  Curry._1(f, param);
                  return false;
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  520,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== Curry._2(find_opt, (function (param) {
                  Curry._1(g, param);
                  return false;
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  521,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("find_map", (function (param) {
        var match = make$2(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var elt = List.nth(lst, 3);
        var eq = function (f, x) {
          if (Curry._1(f, x) === elt) {
            return Math.imul(x, x);
          }
          
        };
        var x0 = List.find_map((function (param) {
                return eq(f, param);
              }), lst);
        var x1 = Curry._2(find_map, (function (param) {
                return eq(g, param);
              }), deq);
        if (!Caml_obj.caml_equal(x0, Math.imul(elt, elt))) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  541,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Caml_obj.caml_equal(x0, x1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  542,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== List.find_map((function (param) {
                  Curry._1(f, param);
                  
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  547,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== Curry._2(find_map, (function (param) {
                  Curry._1(g, param);
                  
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  548,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("filter", (function (param) {
        var match = make$2(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        var lst = List.filter(function (param) {
                return is_even(f, param);
              })(match[0]);
        var deq = Curry._2(filter, (function (param) {
                return is_even(g, param);
              }), match[1]);
        assert_eq$1(lst, deq);
        if (List.length(lst) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  563,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.filter(function (param) {
                  Curry._1(f, param);
                  return false;
                })(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  568,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(is_empty, Curry._2(filter, (function (param) {
                      Curry._1(g, param);
                      return false;
                    }), deq))) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  569,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("find_all", (function (param) {
        var match = make$2(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        var lst = List.find_all(function (param) {
                return is_even(f, param);
              })(match[0]);
        var deq = Curry._2(find_all, (function (param) {
                return is_even(g, param);
              }), match[1]);
        assert_eq$1(lst, deq);
        if (List.length(lst) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  584,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.find_all(function (param) {
                  Curry._1(f, param);
                  return false;
                })(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  589,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(is_empty, Curry._2(find_all, (function (param) {
                      Curry._1(g, param);
                      return false;
                    }), deq))) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  590,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("partition", (function (param) {
        var match = make$2(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        var match$2 = List.partition((function (param) {
                return is_even(f, param);
              }), lst);
        var lst1 = match$2[1];
        var lst0 = match$2[0];
        var match$3 = Curry._2(partition, (function (param) {
                return is_even(g, param);
              }), deq);
        assert_eq$1(lst0, match$3[0]);
        assert_eq$1(lst1, match$3[1]);
        if (List.length(lst0) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  606,
                  8
                ],
                Error: new Error()
              };
        }
        if (List.length(lst1) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  607,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.partition((function (param) {
                    Curry._1(f, param);
                    return false;
                  }), lst)[0]) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  612,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(is_empty, Curry._2(partition, (function (param) {
                        Curry._1(g, param);
                        return false;
                      }), deq)[0])) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  613,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.partition((function (param) {
                    Curry._1(f, param);
                    return true;
                  }), lst)[1]) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  618,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(is_empty, Curry._2(partition, (function (param) {
                        Curry._1(g, param);
                        return true;
                      }), deq)[1])) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  619,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("assoc & mem_assoc", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var lst = List.combine(keys, values);
        var deq = Curry._1(of_list, lst);
        var match = unsnoc(deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (v !== List.assoc(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    637,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (v !== Curry._2(assoc, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    638,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!List.mem_assoc(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    639,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Curry._2(mem_assoc, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    640,
                    10
                  ],
                  Error: new Error()
                };
          }
          var lst$prime = Curry._1(to_list, deq$prime);
          assert_not_found$1(function (param) {
                return List.assoc(k, lst$prime);
              });
          assert_not_found$1(function (param) {
                return Curry._2(assoc, k, deq$prime);
              });
          if (List.mem_assoc(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    644,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (Curry._2(mem_assoc, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    645,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                635,
                18
              ],
              Error: new Error()
            };
      }));

test("assoc_opt", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var lst = List.combine(keys, values);
        var deq = Curry._1(of_list, lst);
        var match = unsnoc(deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (!Caml_obj.caml_equal(v, List.assoc_opt(k, lst))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    664,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Caml_obj.caml_equal(v, Curry._2(assoc_opt, k, deq))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    665,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!List.mem_assoc(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    666,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Curry._2(mem_assoc, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    667,
                    10
                  ],
                  Error: new Error()
                };
          }
          var lst$prime = Curry._1(to_list, deq$prime);
          if (undefined !== List.assoc_opt(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    669,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(assoc_opt, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    670,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (List.mem_assq(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    671,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (Curry._2(mem_assq, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    672,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                662,
                18
              ],
              Error: new Error()
            };
      }));

test("assq & mem_assq", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var keys$1 = List.map((function (x) {
                return {
                        contents: x
                      };
              }), keys);
        var lst = List.combine(keys$1, values);
        var deq = Curry._1(of_list, lst);
        var match = unsnoc(deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (v !== List.assq(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    692,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (v !== Curry._2(assq, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    693,
                    10
                  ],
                  Error: new Error()
                };
          }
          var k$prime = {
            contents: k.contents
          };
          assert_not_found$1(function (param) {
                return List.assq(k$prime, lst);
              });
          assert_not_found$1(function (param) {
                return Curry._2(assq, k$prime, deq);
              });
          var lst$prime = Curry._1(to_list, deq$prime);
          assert_not_found$1(function (param) {
                return List.assq(k, lst$prime);
              });
          assert_not_found$1(function (param) {
                return Curry._2(assq, k, deq$prime);
              });
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                690,
                18
              ],
              Error: new Error()
            };
      }));

test("assq_opt", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var keys$1 = List.map((function (x) {
                return {
                        contents: x
                      };
              }), keys);
        var lst = List.combine(keys$1, values);
        var deq = Curry._1(of_list, lst);
        var match = unsnoc(deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (!Caml_obj.caml_equal(v, List.assq_opt(k, lst))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    719,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Caml_obj.caml_equal(v, Curry._2(assq_opt, k, deq))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    720,
                    10
                  ],
                  Error: new Error()
                };
          }
          var k$prime = {
            contents: k.contents
          };
          if (undefined !== List.assq_opt(k$prime, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    722,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(assq_opt, k$prime, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    723,
                    10
                  ],
                  Error: new Error()
                };
          }
          var lst$prime = Curry._1(to_list, deq$prime);
          if (undefined !== List.assq_opt(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    725,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(assq_opt, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    726,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                717,
                18
              ],
              Error: new Error()
            };
      }));

test("combine & split", (function (param) {
        var match_0 = make$2(undefined, undefined);
        var match_1 = make$2(undefined, undefined);
        var match = match_1;
        var values = match[0];
        var match$1 = match_0;
        var keys = match$1[0];
        var lst = List.combine(keys, values);
        var deq = Curry._2(combine, match$1[1], match[1]);
        assert_eq$1(lst, deq);
        var match$2 = List.split(lst);
        var lst1 = match$2[1];
        var lst0 = match$2[0];
        var match$3 = Curry._1(split, deq);
        if (!Caml_obj.caml_equal(lst0, keys)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  742,
                  8
                ],
                Error: new Error()
              };
        }
        assert_eq$1(lst0, match$3[0]);
        if (!Caml_obj.caml_equal(lst1, values)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  744,
                  8
                ],
                Error: new Error()
              };
        }
        return assert_eq$1(lst1, match$3[1]);
      }));

test("to_seq & of_seq", (function (param) {
        var match = make$2(undefined, undefined);
        var lst = match[0];
        var lst_s = List.to_seq(lst);
        var deq_s = Curry._1(to_seq, match[1]);
        var lst$prime = List.of_seq(lst_s);
        var deq$prime = Curry._1(of_seq, deq_s);
        if (!Caml_obj.caml_equal(lst, lst$prime)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  758,
                  8
                ],
                Error: new Error()
              };
        }
        return assert_eq$1(lst, deq$prime);
      }));

test("to_array & of_array", (function (param) {
        var lst = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var arr = $$Array.of_list(lst);
        var deq = Curry._1(of_array, arr);
        assert_eq$1(lst, deq);
        var arr$prime = Curry._1(to_array, deq);
        if (Caml_obj.caml_equal(arr, arr$prime)) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                772,
                8
              ],
              Error: new Error()
            };
      }));

test("make", (function (param) {
        for(var i = 0; i <= 100; ++i){
          var deq = Curry._2(make$1, i, "x");
          if (Curry._1(length, deq) !== i) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    782,
                    10
                  ],
                  Error: new Error()
                };
          }
          
        }
        
      }));

test("init", (function (param) {
        var match = make_fs(undefined);
        var lst = List.init(10, match[0]);
        var deq = Curry._2(init, 10, match[1]);
        assert_eq$1(lst, deq);
        return Curry._1(match[2], undefined);
      }));

function random_list$1(param) {
  return List.init(1000, (function (param) {
                return Random.$$int(100);
              }));
}

function make_rnd$1(param) {
  var lst = List.init(1000, (function (param) {
          return Random.$$int(100);
        }));
  return [
          lst,
          Curry._1(of_list, lst)
        ];
}

function is_sorted$1(_param) {
  while(true) {
    var param = _param;
    if (!param) {
      return true;
    }
    var match = param.tl;
    if (!match) {
      return true;
    }
    var x1 = match.hd;
    if (!Caml_obj.caml_lessequal(param.hd, x1)) {
      return false;
    }
    _param = {
      hd: x1,
      tl: match.tl
    };
    continue ;
  };
}

test("sort & merge", (function (param) {
        var match = make_rnd$1(undefined);
        var lst0 = List.sort(Caml_primitive.caml_int_compare, match[0]);
        var deq0 = Curry._2(sort, Caml_primitive.caml_int_compare, match[1]);
        assert_eq$1(lst0, deq0);
        var match$1 = make_rnd$1(undefined);
        var lst1 = List.sort(Caml_primitive.caml_int_compare, match$1[0]);
        var deq1 = Curry._2(sort, Caml_primitive.caml_int_compare, match$1[1]);
        assert_eq$1(lst1, deq1);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var count = {
          contents: 0
        };
        var comparing = function (f, x, y) {
          count.contents = count.contents + 1 | 0;
          Curry._1(f, [
                x,
                y
              ]);
          return Caml_obj.caml_compare(x, y);
        };
        var lst = List.merge((function (param, param$1) {
                return comparing(f, param, param$1);
              }), lst0, lst1);
        var deq = Curry._3(merge, (function (param, param$1) {
                return comparing(g, param, param$1);
              }), deq0, deq1);
        assert_eq$1(lst, deq);
        if (!is_sorted$1(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  832,
                  8
                ],
                Error: new Error()
              };
        }
        if (count.contents > (Curry._1(length, deq) << 1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  833,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("merge not sorted", (function (param) {
        var match = make_rnd$1(undefined);
        var match$1 = make_rnd$1(undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var count = {
          contents: 0
        };
        var comparing = function (f, x, y) {
          count.contents = count.contents + 1 | 0;
          Curry._1(f, [
                x,
                y
              ]);
          return Caml_obj.caml_compare(x, y);
        };
        var lst = List.merge((function (param, param$1) {
                return comparing(f, param, param$1);
              }), match[0], match$1[0]);
        var deq = Curry._3(merge, (function (param, param$1) {
                return comparing(g, param, param$1);
              }), match[1], match$1[1]);
        assert_eq$1(lst, deq);
        if (is_sorted$1(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  855,
                  8
                ],
                Error: new Error()
              };
        }
        if (count.contents > (Curry._1(length, deq) << 1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  856,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

var Test_steque = {
  input_size: 10,
  make: make$2,
  assert_eq: assert_eq$1,
  assert_not_found: assert_not_found$1,
  assert_invalid: assert_invalid$1,
  assert_failure: assert_failure$1,
  random_list: random_list$1,
  make_rnd: make_rnd$1,
  is_sorted: is_sorted$1
};

Printf.printf(/* Format */{
      _0: {
        TAG: /* Char_literal */12,
        _0: /* '\n' */10,
        _1: {
          TAG: /* Flush */10,
          _0: /* End_of_format */0
        }
      },
      _1: "\n%!"
    });

header("Deck");

function make$3(sizeOpt, param) {
  var size = sizeOpt !== undefined ? sizeOpt : 10;
  var lst = List.init(size, (function (param) {
          counter.contents = counter.contents + 1 | 0;
          return counter.contents;
        }));
  var deq = Curry._1(Deque.Deck.of_list, lst);
  return [
          lst,
          deq
        ];
}

function assert_eq$2(lst, deq) {
  if (Caml_obj.caml_equal(lst, Curry._1(Deque.Deck.to_list, deq))) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          62,
          32
        ],
        Error: new Error()
      };
}

function assert_not_found$2(f) {
  var tmp;
  try {
    Curry._1(f, undefined);
    tmp = false;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      tmp = true;
    } else {
      throw exn;
    }
  }
  if (tmp) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          64,
          4
        ],
        Error: new Error()
      };
}

function assert_invalid$2(f) {
  var tmp;
  try {
    Curry._1(f, undefined);
    tmp = false;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Invalid_argument") {
      tmp = true;
    } else {
      throw exn;
    }
  }
  if (tmp) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          73,
          4
        ],
        Error: new Error()
      };
}

function assert_failure$2(f) {
  var tmp;
  try {
    Curry._1(f, undefined);
    tmp = false;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Failure") {
      tmp = true;
    } else {
      throw exn;
    }
  }
  if (tmp) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          82,
          4
        ],
        Error: new Error()
      };
}

test("iter", (function (param) {
        var match = make$3(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        List.iter((function (x) {
                Curry._1(f, x);
                
              }), lst);
        Curry._2(Deque.Deck.iter, (function (x) {
                Curry._1(g, x);
                
              }), deq);
        assert_eq$2(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("iteri", (function (param) {
        var match = make$3(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        List.iteri((function (i, x) {
                Curry._1(f, [
                      i,
                      x
                    ]);
                
              }), match[0]);
        Curry._2(Deque.Deck.iteri, (function (i, x) {
                Curry._1(g, [
                      i,
                      x
                    ]);
                
              }), match[1]);
        return Curry._1(match$1[2], undefined);
      }));

test("map", (function (param) {
        var match = make$3(undefined, undefined);
        var match$1 = make_fs(undefined);
        var lst = List.map(match$1[0], match[0]);
        var deq = Curry._2(Deque.Deck.map, match$1[1], match[1]);
        assert_eq$2(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("mapi", (function (param) {
        var match = make$3(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var lst = List.mapi((function (i, x) {
                return Curry._1(f, [
                            i,
                            x
                          ]);
              }), match[0]);
        var deq = Curry._2(Deque.Deck.mapi, (function (i, x) {
                return Curry._1(g, [
                            i,
                            x
                          ]);
              }), match[1]);
        assert_eq$2(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("rev", (function (param) {
        var match = make$3(undefined, undefined);
        var lst_orig = match[0];
        var lst = List.rev(lst_orig);
        var deq = Curry._1(Deque.Deck.rev, match[1]);
        assert_eq$2(lst, deq);
        if (Caml_obj.caml_notequal(lst, lst_orig)) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                150,
                8
              ],
              Error: new Error()
            };
      }));

test("append & rev_append", (function (param) {
        var match = make$3(10, undefined);
        var deq0 = match[1];
        var lst0 = match[0];
        var match$1 = make$3(20, undefined);
        var deq1 = match$1[1];
        var lst1 = match$1[0];
        var lst01 = List.append(lst0, lst1);
        var deq01 = Curry._2(Deque.Deck.append, deq0, deq1);
        assert_eq$2(lst01, deq01);
        var lst10 = List.rev_append(lst0, lst1);
        var deq10 = Curry._2(Deque.Deck.rev_append, deq0, deq1);
        assert_eq$2(lst10, deq10);
        if (Caml_obj.caml_notequal(lst10, lst01)) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                166,
                8
              ],
              Error: new Error()
            };
      }));

test("rev_map", (function (param) {
        var match = make$3(undefined, undefined);
        var match$1 = make_fs(undefined);
        var lst = List.rev_map(match$1[0], match[0]);
        var deq = Curry._2(Deque.Deck.rev_map, match$1[1], match[1]);
        assert_eq$2(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("filter_map", (function (param) {
        var match = make$3(undefined, undefined);
        var lst_orig = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          if (Curry._1(f, x) % 2 === 0) {
            return Math.imul(x, x);
          }
          
        };
        var lst = List.filter_map(function (param) {
                return is_even(f, param);
              })(lst_orig);
        var deq = Curry._2(Deque.Deck.filter_map, (function (param) {
                return is_even(g, param);
              }), match[1]);
        if (List.length(lst) >= List.length(lst_orig)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  197,
                  8
                ],
                Error: new Error()
              };
        }
        assert_eq$2(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("nth & nth_opt", (function (param) {
        var match = make$3(1234, undefined);
        var deq = match[1];
        var lst = match[0];
        for(var i = 0 ,i_finish = List.length(lst); i < i_finish; ++i){
          var x = List.nth(lst, i);
          var y = Curry._2(Deque.Deck.nth, deq, i);
          if (x !== y) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    211,
                    10
                  ],
                  Error: new Error()
                };
          }
          var y$1 = Curry._2(Deque.Deck.nth_opt, deq, i);
          if (y$1 !== undefined) {
            if (x !== y$1) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      214,
                      23
                    ],
                    Error: new Error()
                  };
            }
            
          } else {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    213,
                    20
                  ],
                  Error: new Error()
                };
          }
        }
        assert_invalid$2(function (param) {
              return Curry._2(Deque.Deck.nth, deq, -1);
            });
        assert_invalid$2(function (param) {
              return Curry._2(Deque.Deck.nth_opt, deq, -1);
            });
        assert_failure$2(function (param) {
              return Curry._2(Deque.Deck.nth, deq, Curry._1(Deque.Deck.length, deq));
            });
        if (undefined === Curry._2(Deque.Deck.nth_opt, deq, Curry._1(Deque.Deck.length, deq))) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                220,
                8
              ],
              Error: new Error()
            };
      }));

test("fold_left", (function (param) {
        var match = make$3(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var acc = function (f, z, x) {
          return {
                  TAG: /* F */1,
                  _0: z,
                  _1: {
                    TAG: /* X */0,
                    _0: Curry._1(f, x)
                  }
                };
        };
        var x = List.fold_left((function (param, param$1) {
                return acc(f, param, param$1);
              }), /* Z */0, lst);
        var y = Curry._3(Deque.Deck.fold_left, (function (param, param$1) {
                return acc(g, param, param$1);
              }), /* Z */0, deq);
        if (!Caml_obj.caml_equal(x, y)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  238,
                  8
                ],
                Error: new Error()
              };
        }
        var x$1 = List.fold_left((function (param, param$1) {
                return acc(f, param, param$1);
              }), /* Z */0, List.rev(lst));
        var y$1 = Curry._3(Deque.Deck.fold_left, (function (param, param$1) {
                return acc(g, param, param$1);
              }), /* Z */0, Curry._1(Deque.Deck.rev, deq));
        if (!Caml_obj.caml_equal(x$1, y$1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  241,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("fold_left2", (function (param) {
        var match = make$3(undefined, undefined);
        var match$1 = make$3(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var acc = function (f, z, x, y) {
          return {
                  TAG: /* F */1,
                  _0: z,
                  _1: {
                    TAG: /* X */0,
                    _0: Curry._1(f, [
                          x,
                          y
                        ])
                  }
                };
        };
        var x = List.fold_left2((function (param, param$1, param$2) {
                return acc(f, param, param$1, param$2);
              }), /* Z */0, match[0], match$1[0]);
        var y = Curry._4(Deque.Deck.fold_left2, (function (param, param$1, param$2) {
                return acc(g, param, param$1, param$2);
              }), /* Z */0, match[1], match$1[1]);
        if (!Caml_obj.caml_equal(x, y)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  256,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("fold_right", (function (param) {
        var match = make$3(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var acc = function (f, x, z) {
          return {
                  TAG: /* F */1,
                  _0: {
                    TAG: /* X */0,
                    _0: Curry._1(f, x)
                  },
                  _1: z
                };
        };
        var x = List.fold_right((function (param, param$1) {
                return acc(f, param, param$1);
              }), lst, /* Z */0);
        var y = Curry._3(Deque.Deck.fold_right, (function (param, param$1) {
                return acc(g, param, param$1);
              }), deq, /* Z */0);
        if (!Caml_obj.caml_equal(x, y)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  270,
                  8
                ],
                Error: new Error()
              };
        }
        var x$1 = List.fold_right((function (param, param$1) {
                return acc(f, param, param$1);
              }), List.rev(lst), /* Z */0);
        var y$1 = Curry._3(Deque.Deck.fold_right, (function (param, param$1) {
                return acc(g, param, param$1);
              }), Curry._1(Deque.Deck.rev, deq), /* Z */0);
        if (!Caml_obj.caml_equal(x$1, y$1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  273,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("fold_left_map", (function (param) {
        var match = make$3(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var go = function (f, acc, x) {
          return [
                  {
                    hd: x,
                    tl: acc
                  },
                  Curry._1(f, x)
                ];
        };
        var match$2 = List.fold_left_map((function (param, param$1) {
                return go(f, param, param$1);
              }), /* [] */0, match[0]);
        var match$3 = Curry._3(Deque.Deck.fold_left_map, (function (param, param$1) {
                return go(g, param, param$1);
              }), /* [] */0, match[1]);
        if (!Caml_obj.caml_equal(match$2[0], match$3[0])) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  287,
                  8
                ],
                Error: new Error()
              };
        }
        assert_eq$2(match$2[1], match$3[1]);
        return Curry._1(match$1[2], undefined);
      }));

test("iter2", (function (param) {
        var match = make$3(undefined, undefined);
        var match$1 = make$3(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        List.iter2((function (x, y) {
                Curry._1(f, [
                      x,
                      y
                    ]);
                
              }), match[0], match$1[0]);
        Curry._3(Deque.Deck.iter2, (function (x, y) {
                Curry._1(g, [
                      x,
                      y
                    ]);
                
              }), match[1], match$1[1]);
        return Curry._1(match$2[2], undefined);
      }));

test("map2", (function (param) {
        var match = make$3(undefined, undefined);
        var match$1 = make$3(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var lst = List.map2((function (x, y) {
                return Curry._1(f, [
                            x,
                            y
                          ]);
              }), match[0], match$1[0]);
        var deq = Curry._3(Deque.Deck.map2, (function (x, y) {
                return Curry._1(g, [
                            x,
                            y
                          ]);
              }), match[1], match$1[1]);
        assert_eq$2(lst, deq);
        return Curry._1(match$2[2], undefined);
      }));

test("rev_map2", (function (param) {
        var match = make$3(undefined, undefined);
        var match$1 = make$3(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var lst = List.rev_map2((function (x, y) {
                return Curry._1(f, [
                            x,
                            y
                          ]);
              }), match[0], match$1[0]);
        var deq = Curry._3(Deque.Deck.rev_map2, (function (x, y) {
                return Curry._1(g, [
                            x,
                            y
                          ]);
              }), match[1], match$1[1]);
        assert_eq$2(lst, deq);
        return Curry._1(match$2[2], undefined);
      }));

test("exists", (function (param) {
        var match = make$3(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        if (true !== List.exists((function (param) {
                  return is_even(f, param);
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  341,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._2(Deque.Deck.exists, (function (param) {
                  return is_even(g, param);
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  342,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== List.exists((function (param) {
                  Curry._1(f, param);
                  return false;
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  347,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._2(Deque.Deck.exists, (function (param) {
                  Curry._1(g, param);
                  return false;
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  348,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param) {
          return Pervasives.failwith("should not be called");
        };
        if (false !== List.exists(fail, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  350,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._2(Deque.Deck.exists, fail, Deque.Deck.empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  351,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("for_all", (function (param) {
        var match = make$3(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        if (false !== List.for_all((function (param) {
                  return is_even(f, param);
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  363,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._2(Deque.Deck.for_all, (function (param) {
                  return is_even(g, param);
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  364,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== List.for_all((function (param) {
                  Curry._1(f, param);
                  return true;
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  369,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._2(Deque.Deck.for_all, (function (param) {
                  Curry._1(g, param);
                  return true;
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  370,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param) {
          return Pervasives.failwith("should not be called");
        };
        if (true !== List.for_all(fail, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  372,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._2(Deque.Deck.for_all, fail, Deque.Deck.empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  373,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("exists2", (function (param) {
        var match = make$3(undefined, undefined);
        var deq0 = match[1];
        var lst0 = match[0];
        var match$1 = make$3(undefined, undefined);
        var deq1 = match$1[1];
        var lst1 = match$1[0];
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var is_even = function (f, x, y) {
          return Curry._1(f, Math.imul(x, y)) % 2 === 0;
        };
        if (true !== List.exists2((function (param, param$1) {
                  return is_even(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  386,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._3(Deque.Deck.exists2, (function (param, param$1) {
                  return is_even(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  387,
                  8
                ],
                Error: new Error()
              };
        }
        var nope = function (f, x, y) {
          Curry._1(f, Math.imul(x, y));
          return false;
        };
        if (false !== List.exists2((function (param, param$1) {
                  return nope(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  392,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._3(Deque.Deck.exists2, (function (param, param$1) {
                  return nope(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  393,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param, param$1) {
          return Pervasives.failwith("should not be called");
        };
        if (false !== List.exists2(fail, /* [] */0, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  395,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._3(Deque.Deck.exists2, fail, Deque.Deck.empty, Deque.Deck.empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  396,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp;
        try {
          tmp = List.exists2(fail, /* [] */0, lst1);
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Invalid_argument") {
            tmp = true;
          } else {
            throw exn;
          }
        }
        if (!tmp) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  397,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp$1;
        try {
          tmp$1 = Curry._3(Deque.Deck.exists2, fail, Deque.Deck.empty, deq1);
        }
        catch (raw_exn$1){
          var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
          if (exn$1.RE_EXN_ID === "Invalid_argument") {
            tmp$1 = true;
          } else {
            throw exn$1;
          }
        }
        if (!tmp$1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  402,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("for_all2", (function (param) {
        var match = make$3(undefined, undefined);
        var deq0 = match[1];
        var lst0 = match[0];
        var match$1 = make$3(undefined, undefined);
        var deq1 = match$1[1];
        var lst1 = match$1[0];
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var is_even = function (f, x, y) {
          return Curry._1(f, Math.imul(x, y)) % 2 === 0;
        };
        if (false !== List.for_all2((function (param, param$1) {
                  return is_even(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  419,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._3(Deque.Deck.for_all2, (function (param, param$1) {
                  return is_even(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  420,
                  8
                ],
                Error: new Error()
              };
        }
        var yeap = function (f, x, y) {
          Curry._1(f, Math.imul(x, y));
          return true;
        };
        if (true !== List.for_all2((function (param, param$1) {
                  return yeap(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  425,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._3(Deque.Deck.for_all2, (function (param, param$1) {
                  return yeap(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  426,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param, param$1) {
          return Pervasives.failwith("should not be called");
        };
        if (true !== List.for_all2(fail, /* [] */0, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  428,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._3(Deque.Deck.for_all2, fail, Deque.Deck.empty, Deque.Deck.empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  429,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp;
        try {
          tmp = List.for_all2(fail, /* [] */0, lst1);
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Invalid_argument") {
            tmp = true;
          } else {
            throw exn;
          }
        }
        if (!tmp) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  430,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp$1;
        try {
          tmp$1 = Curry._3(Deque.Deck.for_all2, fail, Deque.Deck.empty, deq1);
        }
        catch (raw_exn$1){
          var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
          if (exn$1.RE_EXN_ID === "Invalid_argument") {
            tmp$1 = true;
          } else {
            throw exn$1;
          }
        }
        if (!tmp$1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  435,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("mem", (function (param) {
        var match = make$3(undefined, undefined);
        var deq = match[1];
        var match$1 = Curry._1(Deque.Deck.unsnoc, deq);
        if (match$1 !== undefined) {
          var x = match$1[1];
          if (true !== List.mem(x, match[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    452,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(Deque.Deck.mem, x, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    453,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(Deque.Deck.mem, x, match$1[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    454,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                450,
                18
              ],
              Error: new Error()
            };
      }));

test("memq", (function (param) {
        var lst = List.map((function (x) {
                return {
                        contents: x
                      };
              }), List.init(10, (function (param) {
                    counter.contents = counter.contents + 1 | 0;
                    return counter.contents;
                  })));
        var deq = Curry._1(Deque.Deck.of_list, lst);
        var match = Curry._1(Deque.Deck.unsnoc, deq);
        if (match !== undefined) {
          var x = match[1];
          if (true !== List.memq(x, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    469,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(Deque.Deck.memq, x, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    470,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(Deque.Deck.memq, x, match[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    471,
                    10
                  ],
                  Error: new Error()
                };
          }
          var y = {
            contents: x.contents
          };
          if (true !== List.mem(y, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    473,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(Deque.Deck.mem, y, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    474,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== List.memq(y, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    475,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(Deque.Deck.memq, y, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    476,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                467,
                18
              ],
              Error: new Error()
            };
      }));

test("find", (function (param) {
        var match = make$3(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var elt = List.nth(lst, 3);
        var x0 = List.find((function (param) {
                return Curry._1(f, param) === elt;
              }), lst);
        var x1 = Curry._2(Deque.Deck.find, (function (param) {
                return Curry._1(g, param) === elt;
              }), deq);
        if (x0 !== elt) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  492,
                  8
                ],
                Error: new Error()
              };
        }
        if (x0 !== x1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  493,
                  8
                ],
                Error: new Error()
              };
        }
        assert_not_found$2(function (param) {
              return List.find((function (param) {
                            Curry._1(f, param);
                            return false;
                          }), lst);
            });
        assert_not_found$2(function (param) {
              return Curry._2(Deque.Deck.find, (function (param) {
                            Curry._1(g, param);
                            return false;
                          }), deq);
            });
        return Curry._1(match$1[2], undefined);
      }));

test("find_opt", (function (param) {
        var match = make$3(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var elt = List.nth(lst, 3);
        var x0 = List.find_opt((function (param) {
                return Curry._1(f, param) === elt;
              }), lst);
        var x1 = Curry._2(Deque.Deck.find_opt, (function (param) {
                return Curry._1(g, param) === elt;
              }), deq);
        if (!Caml_obj.caml_equal(x0, elt)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  514,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Caml_obj.caml_equal(x0, x1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  515,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== List.find_opt((function (param) {
                  Curry._1(f, param);
                  return false;
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  520,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== Curry._2(Deque.Deck.find_opt, (function (param) {
                  Curry._1(g, param);
                  return false;
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  521,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("find_map", (function (param) {
        var match = make$3(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var elt = List.nth(lst, 3);
        var eq = function (f, x) {
          if (Curry._1(f, x) === elt) {
            return Math.imul(x, x);
          }
          
        };
        var x0 = List.find_map((function (param) {
                return eq(f, param);
              }), lst);
        var x1 = Curry._2(Deque.Deck.find_map, (function (param) {
                return eq(g, param);
              }), deq);
        if (!Caml_obj.caml_equal(x0, Math.imul(elt, elt))) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  541,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Caml_obj.caml_equal(x0, x1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  542,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== List.find_map((function (param) {
                  Curry._1(f, param);
                  
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  547,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== Curry._2(Deque.Deck.find_map, (function (param) {
                  Curry._1(g, param);
                  
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  548,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("filter", (function (param) {
        var match = make$3(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        var lst = List.filter(function (param) {
                return is_even(f, param);
              })(match[0]);
        var deq = Curry._2(Deque.Deck.filter, (function (param) {
                return is_even(g, param);
              }), match[1]);
        assert_eq$2(lst, deq);
        if (List.length(lst) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  563,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.filter(function (param) {
                  Curry._1(f, param);
                  return false;
                })(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  568,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(Deque.Deck.is_empty, Curry._2(Deque.Deck.filter, (function (param) {
                      Curry._1(g, param);
                      return false;
                    }), deq))) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  569,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("find_all", (function (param) {
        var match = make$3(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        var lst = List.find_all(function (param) {
                return is_even(f, param);
              })(match[0]);
        var deq = Curry._2(Deque.Deck.find_all, (function (param) {
                return is_even(g, param);
              }), match[1]);
        assert_eq$2(lst, deq);
        if (List.length(lst) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  584,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.find_all(function (param) {
                  Curry._1(f, param);
                  return false;
                })(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  589,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(Deque.Deck.is_empty, Curry._2(Deque.Deck.find_all, (function (param) {
                      Curry._1(g, param);
                      return false;
                    }), deq))) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  590,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("partition", (function (param) {
        var match = make$3(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        var match$2 = List.partition((function (param) {
                return is_even(f, param);
              }), lst);
        var lst1 = match$2[1];
        var lst0 = match$2[0];
        var match$3 = Curry._2(Deque.Deck.partition, (function (param) {
                return is_even(g, param);
              }), deq);
        assert_eq$2(lst0, match$3[0]);
        assert_eq$2(lst1, match$3[1]);
        if (List.length(lst0) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  606,
                  8
                ],
                Error: new Error()
              };
        }
        if (List.length(lst1) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  607,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.partition((function (param) {
                    Curry._1(f, param);
                    return false;
                  }), lst)[0]) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  612,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(Deque.Deck.is_empty, Curry._2(Deque.Deck.partition, (function (param) {
                        Curry._1(g, param);
                        return false;
                      }), deq)[0])) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  613,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.partition((function (param) {
                    Curry._1(f, param);
                    return true;
                  }), lst)[1]) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  618,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(Deque.Deck.is_empty, Curry._2(Deque.Deck.partition, (function (param) {
                        Curry._1(g, param);
                        return true;
                      }), deq)[1])) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  619,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("assoc & mem_assoc", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var lst = List.combine(keys, values);
        var deq = Curry._1(Deque.Deck.of_list, lst);
        var match = Curry._1(Deque.Deck.unsnoc, deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (v !== List.assoc(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    637,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (v !== Curry._2(Deque.Deck.assoc, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    638,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!List.mem_assoc(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    639,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Curry._2(Deque.Deck.mem_assoc, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    640,
                    10
                  ],
                  Error: new Error()
                };
          }
          var lst$prime = Curry._1(Deque.Deck.to_list, deq$prime);
          assert_not_found$2(function (param) {
                return List.assoc(k, lst$prime);
              });
          assert_not_found$2(function (param) {
                return Curry._2(Deque.Deck.assoc, k, deq$prime);
              });
          if (List.mem_assoc(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    644,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (Curry._2(Deque.Deck.mem_assoc, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    645,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                635,
                18
              ],
              Error: new Error()
            };
      }));

test("assoc_opt", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var lst = List.combine(keys, values);
        var deq = Curry._1(Deque.Deck.of_list, lst);
        var match = Curry._1(Deque.Deck.unsnoc, deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (!Caml_obj.caml_equal(v, List.assoc_opt(k, lst))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    664,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Caml_obj.caml_equal(v, Curry._2(Deque.Deck.assoc_opt, k, deq))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    665,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!List.mem_assoc(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    666,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Curry._2(Deque.Deck.mem_assoc, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    667,
                    10
                  ],
                  Error: new Error()
                };
          }
          var lst$prime = Curry._1(Deque.Deck.to_list, deq$prime);
          if (undefined !== List.assoc_opt(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    669,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(Deque.Deck.assoc_opt, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    670,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (List.mem_assq(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    671,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (Curry._2(Deque.Deck.mem_assq, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    672,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                662,
                18
              ],
              Error: new Error()
            };
      }));

test("assq & mem_assq", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var keys$1 = List.map((function (x) {
                return {
                        contents: x
                      };
              }), keys);
        var lst = List.combine(keys$1, values);
        var deq = Curry._1(Deque.Deck.of_list, lst);
        var match = Curry._1(Deque.Deck.unsnoc, deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (v !== List.assq(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    692,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (v !== Curry._2(Deque.Deck.assq, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    693,
                    10
                  ],
                  Error: new Error()
                };
          }
          var k$prime = {
            contents: k.contents
          };
          assert_not_found$2(function (param) {
                return List.assq(k$prime, lst);
              });
          assert_not_found$2(function (param) {
                return Curry._2(Deque.Deck.assq, k$prime, deq);
              });
          var lst$prime = Curry._1(Deque.Deck.to_list, deq$prime);
          assert_not_found$2(function (param) {
                return List.assq(k, lst$prime);
              });
          assert_not_found$2(function (param) {
                return Curry._2(Deque.Deck.assq, k, deq$prime);
              });
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                690,
                18
              ],
              Error: new Error()
            };
      }));

test("assq_opt", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var keys$1 = List.map((function (x) {
                return {
                        contents: x
                      };
              }), keys);
        var lst = List.combine(keys$1, values);
        var deq = Curry._1(Deque.Deck.of_list, lst);
        var match = Curry._1(Deque.Deck.unsnoc, deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (!Caml_obj.caml_equal(v, List.assq_opt(k, lst))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    719,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Caml_obj.caml_equal(v, Curry._2(Deque.Deck.assq_opt, k, deq))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    720,
                    10
                  ],
                  Error: new Error()
                };
          }
          var k$prime = {
            contents: k.contents
          };
          if (undefined !== List.assq_opt(k$prime, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    722,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(Deque.Deck.assq_opt, k$prime, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    723,
                    10
                  ],
                  Error: new Error()
                };
          }
          var lst$prime = Curry._1(Deque.Deck.to_list, deq$prime);
          if (undefined !== List.assq_opt(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    725,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(Deque.Deck.assq_opt, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    726,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                717,
                18
              ],
              Error: new Error()
            };
      }));

test("combine & split", (function (param) {
        var match_0 = make$3(undefined, undefined);
        var match_1 = make$3(undefined, undefined);
        var match = match_1;
        var values = match[0];
        var match$1 = match_0;
        var keys = match$1[0];
        var lst = List.combine(keys, values);
        var deq = Curry._2(Deque.Deck.combine, match$1[1], match[1]);
        assert_eq$2(lst, deq);
        var match$2 = List.split(lst);
        var lst1 = match$2[1];
        var lst0 = match$2[0];
        var match$3 = Curry._1(Deque.Deck.split, deq);
        if (!Caml_obj.caml_equal(lst0, keys)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  742,
                  8
                ],
                Error: new Error()
              };
        }
        assert_eq$2(lst0, match$3[0]);
        if (!Caml_obj.caml_equal(lst1, values)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  744,
                  8
                ],
                Error: new Error()
              };
        }
        return assert_eq$2(lst1, match$3[1]);
      }));

test("to_seq & of_seq", (function (param) {
        var match = make$3(undefined, undefined);
        var lst = match[0];
        var lst_s = List.to_seq(lst);
        var deq_s = Curry._1(Deque.Deck.to_seq, match[1]);
        var lst$prime = List.of_seq(lst_s);
        var deq$prime = Curry._1(Deque.Deck.of_seq, deq_s);
        if (!Caml_obj.caml_equal(lst, lst$prime)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  758,
                  8
                ],
                Error: new Error()
              };
        }
        return assert_eq$2(lst, deq$prime);
      }));

test("to_array & of_array", (function (param) {
        var lst = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var arr = $$Array.of_list(lst);
        var deq = Curry._1(Deque.Deck.of_array, arr);
        assert_eq$2(lst, deq);
        var arr$prime = Curry._1(Deque.Deck.to_array, deq);
        if (Caml_obj.caml_equal(arr, arr$prime)) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                772,
                8
              ],
              Error: new Error()
            };
      }));

test("make", (function (param) {
        for(var i = 0; i <= 100; ++i){
          var deq = Curry._2(Deque.Deck.make, i, "x");
          if (Curry._1(Deque.Deck.length, deq) !== i) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    782,
                    10
                  ],
                  Error: new Error()
                };
          }
          
        }
        
      }));

test("init", (function (param) {
        var match = make_fs(undefined);
        var lst = List.init(10, match[0]);
        var deq = Curry._2(Deque.Deck.init, 10, match[1]);
        assert_eq$2(lst, deq);
        return Curry._1(match[2], undefined);
      }));

function random_list$2(param) {
  return List.init(1000, (function (param) {
                return Random.$$int(100);
              }));
}

function make_rnd$2(param) {
  var lst = List.init(1000, (function (param) {
          return Random.$$int(100);
        }));
  return [
          lst,
          Curry._1(Deque.Deck.of_list, lst)
        ];
}

function is_sorted$2(_param) {
  while(true) {
    var param = _param;
    if (!param) {
      return true;
    }
    var match = param.tl;
    if (!match) {
      return true;
    }
    var x1 = match.hd;
    if (!Caml_obj.caml_lessequal(param.hd, x1)) {
      return false;
    }
    _param = {
      hd: x1,
      tl: match.tl
    };
    continue ;
  };
}

test("sort & merge", (function (param) {
        var match = make_rnd$2(undefined);
        var lst0 = List.sort(Caml_primitive.caml_int_compare, match[0]);
        var deq0 = Curry._2(Deque.Deck.sort, Caml_primitive.caml_int_compare, match[1]);
        assert_eq$2(lst0, deq0);
        var match$1 = make_rnd$2(undefined);
        var lst1 = List.sort(Caml_primitive.caml_int_compare, match$1[0]);
        var deq1 = Curry._2(Deque.Deck.sort, Caml_primitive.caml_int_compare, match$1[1]);
        assert_eq$2(lst1, deq1);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var count = {
          contents: 0
        };
        var comparing = function (f, x, y) {
          count.contents = count.contents + 1 | 0;
          Curry._1(f, [
                x,
                y
              ]);
          return Caml_obj.caml_compare(x, y);
        };
        var lst = List.merge((function (param, param$1) {
                return comparing(f, param, param$1);
              }), lst0, lst1);
        var deq = Curry._3(Deque.Deck.merge, (function (param, param$1) {
                return comparing(g, param, param$1);
              }), deq0, deq1);
        assert_eq$2(lst, deq);
        if (!is_sorted$2(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  832,
                  8
                ],
                Error: new Error()
              };
        }
        if (count.contents > (Curry._1(Deque.Deck.length, deq) << 1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  833,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("merge not sorted", (function (param) {
        var match = make_rnd$2(undefined);
        var match$1 = make_rnd$2(undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var count = {
          contents: 0
        };
        var comparing = function (f, x, y) {
          count.contents = count.contents + 1 | 0;
          Curry._1(f, [
                x,
                y
              ]);
          return Caml_obj.caml_compare(x, y);
        };
        var lst = List.merge((function (param, param$1) {
                return comparing(f, param, param$1);
              }), match[0], match$1[0]);
        var deq = Curry._3(Deque.Deck.merge, (function (param, param$1) {
                return comparing(g, param, param$1);
              }), match[1], match$1[1]);
        assert_eq$2(lst, deq);
        if (is_sorted$2(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  855,
                  8
                ],
                Error: new Error()
              };
        }
        if (count.contents > (Curry._1(Deque.Deck.length, deq) << 1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  856,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

var Test_deck = {
  input_size: 10,
  make: make$3,
  assert_eq: assert_eq$2,
  assert_not_found: assert_not_found$2,
  assert_invalid: assert_invalid$2,
  assert_failure: assert_failure$2,
  random_list: random_list$2,
  make_rnd: make_rnd$2,
  is_sorted: is_sorted$2
};

Printf.printf(/* Format */{
      _0: {
        TAG: /* Char_literal */12,
        _0: /* '\n' */10,
        _1: {
          TAG: /* Flush */10,
          _0: /* End_of_format */0
        }
      },
      _1: "\n%!"
    });

header("Deckrev");

function make$4(sizeOpt, param) {
  var size = sizeOpt !== undefined ? sizeOpt : 10;
  var lst = List.init(size, (function (param) {
          counter.contents = counter.contents + 1 | 0;
          return counter.contents;
        }));
  var deq = Curry._1(Deque.Deckrev.of_list, lst);
  return [
          lst,
          deq
        ];
}

function assert_eq$3(lst, deq) {
  if (Caml_obj.caml_equal(lst, Curry._1(Deque.Deckrev.to_list, deq))) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          62,
          32
        ],
        Error: new Error()
      };
}

function assert_not_found$3(f) {
  var tmp;
  try {
    Curry._1(f, undefined);
    tmp = false;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      tmp = true;
    } else {
      throw exn;
    }
  }
  if (tmp) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          64,
          4
        ],
        Error: new Error()
      };
}

function assert_invalid$3(f) {
  var tmp;
  try {
    Curry._1(f, undefined);
    tmp = false;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Invalid_argument") {
      tmp = true;
    } else {
      throw exn;
    }
  }
  if (tmp) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          73,
          4
        ],
        Error: new Error()
      };
}

function assert_failure$3(f) {
  var tmp;
  try {
    Curry._1(f, undefined);
    tmp = false;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Failure") {
      tmp = true;
    } else {
      throw exn;
    }
  }
  if (tmp) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "list_like_test.re",
          82,
          4
        ],
        Error: new Error()
      };
}

test("iter", (function (param) {
        var match = make$4(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        List.iter((function (x) {
                Curry._1(f, x);
                
              }), lst);
        Curry._2(Deque.Deckrev.iter, (function (x) {
                Curry._1(g, x);
                
              }), deq);
        assert_eq$3(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("iteri", (function (param) {
        var match = make$4(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        List.iteri((function (i, x) {
                Curry._1(f, [
                      i,
                      x
                    ]);
                
              }), match[0]);
        Curry._2(Deque.Deckrev.iteri, (function (i, x) {
                Curry._1(g, [
                      i,
                      x
                    ]);
                
              }), match[1]);
        return Curry._1(match$1[2], undefined);
      }));

test("map", (function (param) {
        var match = make$4(undefined, undefined);
        var match$1 = make_fs(undefined);
        var lst = List.map(match$1[0], match[0]);
        var deq = Curry._2(Deque.Deckrev.map, match$1[1], match[1]);
        assert_eq$3(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("mapi", (function (param) {
        var match = make$4(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var lst = List.mapi((function (i, x) {
                return Curry._1(f, [
                            i,
                            x
                          ]);
              }), match[0]);
        var deq = Curry._2(Deque.Deckrev.mapi, (function (i, x) {
                return Curry._1(g, [
                            i,
                            x
                          ]);
              }), match[1]);
        assert_eq$3(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("rev", (function (param) {
        var match = make$4(undefined, undefined);
        var lst_orig = match[0];
        var lst = List.rev(lst_orig);
        var deq = Curry._1(Deque.Deckrev.rev, match[1]);
        assert_eq$3(lst, deq);
        if (Caml_obj.caml_notequal(lst, lst_orig)) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                150,
                8
              ],
              Error: new Error()
            };
      }));

test("append & rev_append", (function (param) {
        var match = make$4(10, undefined);
        var deq0 = match[1];
        var lst0 = match[0];
        var match$1 = make$4(20, undefined);
        var deq1 = match$1[1];
        var lst1 = match$1[0];
        var lst01 = List.append(lst0, lst1);
        var deq01 = Curry._2(Deque.Deckrev.append, deq0, deq1);
        assert_eq$3(lst01, deq01);
        var lst10 = List.rev_append(lst0, lst1);
        var deq10 = Curry._2(Deque.Deckrev.rev_append, deq0, deq1);
        assert_eq$3(lst10, deq10);
        if (Caml_obj.caml_notequal(lst10, lst01)) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                166,
                8
              ],
              Error: new Error()
            };
      }));

test("rev_map", (function (param) {
        var match = make$4(undefined, undefined);
        var match$1 = make_fs(undefined);
        var lst = List.rev_map(match$1[0], match[0]);
        var deq = Curry._2(Deque.Deckrev.rev_map, match$1[1], match[1]);
        assert_eq$3(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("filter_map", (function (param) {
        var match = make$4(undefined, undefined);
        var lst_orig = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          if (Curry._1(f, x) % 2 === 0) {
            return Math.imul(x, x);
          }
          
        };
        var lst = List.filter_map(function (param) {
                return is_even(f, param);
              })(lst_orig);
        var deq = Curry._2(Deque.Deckrev.filter_map, (function (param) {
                return is_even(g, param);
              }), match[1]);
        if (List.length(lst) >= List.length(lst_orig)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  197,
                  8
                ],
                Error: new Error()
              };
        }
        assert_eq$3(lst, deq);
        return Curry._1(match$1[2], undefined);
      }));

test("nth & nth_opt", (function (param) {
        var match = make$4(1234, undefined);
        var deq = match[1];
        var lst = match[0];
        for(var i = 0 ,i_finish = List.length(lst); i < i_finish; ++i){
          var x = List.nth(lst, i);
          var y = Curry._2(Deque.Deckrev.nth, deq, i);
          if (x !== y) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    211,
                    10
                  ],
                  Error: new Error()
                };
          }
          var y$1 = Curry._2(Deque.Deckrev.nth_opt, deq, i);
          if (y$1 !== undefined) {
            if (x !== y$1) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "list_like_test.re",
                      214,
                      23
                    ],
                    Error: new Error()
                  };
            }
            
          } else {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    213,
                    20
                  ],
                  Error: new Error()
                };
          }
        }
        assert_invalid$3(function (param) {
              return Curry._2(Deque.Deckrev.nth, deq, -1);
            });
        assert_invalid$3(function (param) {
              return Curry._2(Deque.Deckrev.nth_opt, deq, -1);
            });
        assert_failure$3(function (param) {
              return Curry._2(Deque.Deckrev.nth, deq, Curry._1(Deque.Deckrev.length, deq));
            });
        if (undefined === Curry._2(Deque.Deckrev.nth_opt, deq, Curry._1(Deque.Deckrev.length, deq))) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                220,
                8
              ],
              Error: new Error()
            };
      }));

test("fold_left", (function (param) {
        var match = make$4(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var acc = function (f, z, x) {
          return {
                  TAG: /* F */1,
                  _0: z,
                  _1: {
                    TAG: /* X */0,
                    _0: Curry._1(f, x)
                  }
                };
        };
        var x = List.fold_left((function (param, param$1) {
                return acc(f, param, param$1);
              }), /* Z */0, lst);
        var y = Curry._3(Deque.Deckrev.fold_left, (function (param, param$1) {
                return acc(g, param, param$1);
              }), /* Z */0, deq);
        if (!Caml_obj.caml_equal(x, y)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  238,
                  8
                ],
                Error: new Error()
              };
        }
        var x$1 = List.fold_left((function (param, param$1) {
                return acc(f, param, param$1);
              }), /* Z */0, List.rev(lst));
        var y$1 = Curry._3(Deque.Deckrev.fold_left, (function (param, param$1) {
                return acc(g, param, param$1);
              }), /* Z */0, Curry._1(Deque.Deckrev.rev, deq));
        if (!Caml_obj.caml_equal(x$1, y$1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  241,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("fold_left2", (function (param) {
        var match = make$4(undefined, undefined);
        var match$1 = make$4(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var acc = function (f, z, x, y) {
          return {
                  TAG: /* F */1,
                  _0: z,
                  _1: {
                    TAG: /* X */0,
                    _0: Curry._1(f, [
                          x,
                          y
                        ])
                  }
                };
        };
        var x = List.fold_left2((function (param, param$1, param$2) {
                return acc(f, param, param$1, param$2);
              }), /* Z */0, match[0], match$1[0]);
        var y = Curry._4(Deque.Deckrev.fold_left2, (function (param, param$1, param$2) {
                return acc(g, param, param$1, param$2);
              }), /* Z */0, match[1], match$1[1]);
        if (!Caml_obj.caml_equal(x, y)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  256,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("fold_right", (function (param) {
        var match = make$4(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var acc = function (f, x, z) {
          return {
                  TAG: /* F */1,
                  _0: {
                    TAG: /* X */0,
                    _0: Curry._1(f, x)
                  },
                  _1: z
                };
        };
        var x = List.fold_right((function (param, param$1) {
                return acc(f, param, param$1);
              }), lst, /* Z */0);
        var y = Curry._3(Deque.Deckrev.fold_right, (function (param, param$1) {
                return acc(g, param, param$1);
              }), deq, /* Z */0);
        if (!Caml_obj.caml_equal(x, y)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  270,
                  8
                ],
                Error: new Error()
              };
        }
        var x$1 = List.fold_right((function (param, param$1) {
                return acc(f, param, param$1);
              }), List.rev(lst), /* Z */0);
        var y$1 = Curry._3(Deque.Deckrev.fold_right, (function (param, param$1) {
                return acc(g, param, param$1);
              }), Curry._1(Deque.Deckrev.rev, deq), /* Z */0);
        if (!Caml_obj.caml_equal(x$1, y$1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  273,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("fold_left_map", (function (param) {
        var match = make$4(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var go = function (f, acc, x) {
          return [
                  {
                    hd: x,
                    tl: acc
                  },
                  Curry._1(f, x)
                ];
        };
        var match$2 = List.fold_left_map((function (param, param$1) {
                return go(f, param, param$1);
              }), /* [] */0, match[0]);
        var match$3 = Curry._3(Deque.Deckrev.fold_left_map, (function (param, param$1) {
                return go(g, param, param$1);
              }), /* [] */0, match[1]);
        if (!Caml_obj.caml_equal(match$2[0], match$3[0])) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  287,
                  8
                ],
                Error: new Error()
              };
        }
        assert_eq$3(match$2[1], match$3[1]);
        return Curry._1(match$1[2], undefined);
      }));

test("iter2", (function (param) {
        var match = make$4(undefined, undefined);
        var match$1 = make$4(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        List.iter2((function (x, y) {
                Curry._1(f, [
                      x,
                      y
                    ]);
                
              }), match[0], match$1[0]);
        Curry._3(Deque.Deckrev.iter2, (function (x, y) {
                Curry._1(g, [
                      x,
                      y
                    ]);
                
              }), match[1], match$1[1]);
        return Curry._1(match$2[2], undefined);
      }));

test("map2", (function (param) {
        var match = make$4(undefined, undefined);
        var match$1 = make$4(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var lst = List.map2((function (x, y) {
                return Curry._1(f, [
                            x,
                            y
                          ]);
              }), match[0], match$1[0]);
        var deq = Curry._3(Deque.Deckrev.map2, (function (x, y) {
                return Curry._1(g, [
                            x,
                            y
                          ]);
              }), match[1], match$1[1]);
        assert_eq$3(lst, deq);
        return Curry._1(match$2[2], undefined);
      }));

test("rev_map2", (function (param) {
        var match = make$4(undefined, undefined);
        var match$1 = make$4(undefined, undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var lst = List.rev_map2((function (x, y) {
                return Curry._1(f, [
                            x,
                            y
                          ]);
              }), match[0], match$1[0]);
        var deq = Curry._3(Deque.Deckrev.rev_map2, (function (x, y) {
                return Curry._1(g, [
                            x,
                            y
                          ]);
              }), match[1], match$1[1]);
        assert_eq$3(lst, deq);
        return Curry._1(match$2[2], undefined);
      }));

test("exists", (function (param) {
        var match = make$4(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        if (true !== List.exists((function (param) {
                  return is_even(f, param);
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  341,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._2(Deque.Deckrev.exists, (function (param) {
                  return is_even(g, param);
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  342,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== List.exists((function (param) {
                  Curry._1(f, param);
                  return false;
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  347,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._2(Deque.Deckrev.exists, (function (param) {
                  Curry._1(g, param);
                  return false;
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  348,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param) {
          return Pervasives.failwith("should not be called");
        };
        if (false !== List.exists(fail, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  350,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._2(Deque.Deckrev.exists, fail, Deque.Deckrev.empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  351,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("for_all", (function (param) {
        var match = make$4(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        if (false !== List.for_all((function (param) {
                  return is_even(f, param);
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  363,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._2(Deque.Deckrev.for_all, (function (param) {
                  return is_even(g, param);
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  364,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== List.for_all((function (param) {
                  Curry._1(f, param);
                  return true;
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  369,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._2(Deque.Deckrev.for_all, (function (param) {
                  Curry._1(g, param);
                  return true;
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  370,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param) {
          return Pervasives.failwith("should not be called");
        };
        if (true !== List.for_all(fail, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  372,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._2(Deque.Deckrev.for_all, fail, Deque.Deckrev.empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  373,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("exists2", (function (param) {
        var match = make$4(undefined, undefined);
        var deq0 = match[1];
        var lst0 = match[0];
        var match$1 = make$4(undefined, undefined);
        var deq1 = match$1[1];
        var lst1 = match$1[0];
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var is_even = function (f, x, y) {
          return Curry._1(f, Math.imul(x, y)) % 2 === 0;
        };
        if (true !== List.exists2((function (param, param$1) {
                  return is_even(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  386,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._3(Deque.Deckrev.exists2, (function (param, param$1) {
                  return is_even(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  387,
                  8
                ],
                Error: new Error()
              };
        }
        var nope = function (f, x, y) {
          Curry._1(f, Math.imul(x, y));
          return false;
        };
        if (false !== List.exists2((function (param, param$1) {
                  return nope(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  392,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._3(Deque.Deckrev.exists2, (function (param, param$1) {
                  return nope(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  393,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param, param$1) {
          return Pervasives.failwith("should not be called");
        };
        if (false !== List.exists2(fail, /* [] */0, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  395,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._3(Deque.Deckrev.exists2, fail, Deque.Deckrev.empty, Deque.Deckrev.empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  396,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp;
        try {
          tmp = List.exists2(fail, /* [] */0, lst1);
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Invalid_argument") {
            tmp = true;
          } else {
            throw exn;
          }
        }
        if (!tmp) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  397,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp$1;
        try {
          tmp$1 = Curry._3(Deque.Deckrev.exists2, fail, Deque.Deckrev.empty, deq1);
        }
        catch (raw_exn$1){
          var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
          if (exn$1.RE_EXN_ID === "Invalid_argument") {
            tmp$1 = true;
          } else {
            throw exn$1;
          }
        }
        if (!tmp$1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  402,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("for_all2", (function (param) {
        var match = make$4(undefined, undefined);
        var deq0 = match[1];
        var lst0 = match[0];
        var match$1 = make$4(undefined, undefined);
        var deq1 = match$1[1];
        var lst1 = match$1[0];
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var is_even = function (f, x, y) {
          return Curry._1(f, Math.imul(x, y)) % 2 === 0;
        };
        if (false !== List.for_all2((function (param, param$1) {
                  return is_even(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  419,
                  8
                ],
                Error: new Error()
              };
        }
        if (false !== Curry._3(Deque.Deckrev.for_all2, (function (param, param$1) {
                  return is_even(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  420,
                  8
                ],
                Error: new Error()
              };
        }
        var yeap = function (f, x, y) {
          Curry._1(f, Math.imul(x, y));
          return true;
        };
        if (true !== List.for_all2((function (param, param$1) {
                  return yeap(f, param, param$1);
                }), lst0, lst1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  425,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._3(Deque.Deckrev.for_all2, (function (param, param$1) {
                  return yeap(g, param, param$1);
                }), deq0, deq1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  426,
                  8
                ],
                Error: new Error()
              };
        }
        var fail = function (param, param$1) {
          return Pervasives.failwith("should not be called");
        };
        if (true !== List.for_all2(fail, /* [] */0, /* [] */0)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  428,
                  8
                ],
                Error: new Error()
              };
        }
        if (true !== Curry._3(Deque.Deckrev.for_all2, fail, Deque.Deckrev.empty, Deque.Deckrev.empty)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  429,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp;
        try {
          tmp = List.for_all2(fail, /* [] */0, lst1);
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Invalid_argument") {
            tmp = true;
          } else {
            throw exn;
          }
        }
        if (!tmp) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  430,
                  8
                ],
                Error: new Error()
              };
        }
        var tmp$1;
        try {
          tmp$1 = Curry._3(Deque.Deckrev.for_all2, fail, Deque.Deckrev.empty, deq1);
        }
        catch (raw_exn$1){
          var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
          if (exn$1.RE_EXN_ID === "Invalid_argument") {
            tmp$1 = true;
          } else {
            throw exn$1;
          }
        }
        if (!tmp$1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  435,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("mem", (function (param) {
        var match = make$4(undefined, undefined);
        var deq = match[1];
        var match$1 = Curry._1(Deque.Deckrev.unsnoc, deq);
        if (match$1 !== undefined) {
          var x = match$1[1];
          if (true !== List.mem(x, match[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    452,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(Deque.Deckrev.mem, x, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    453,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(Deque.Deckrev.mem, x, match$1[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    454,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                450,
                18
              ],
              Error: new Error()
            };
      }));

test("memq", (function (param) {
        var lst = List.map((function (x) {
                return {
                        contents: x
                      };
              }), List.init(10, (function (param) {
                    counter.contents = counter.contents + 1 | 0;
                    return counter.contents;
                  })));
        var deq = Curry._1(Deque.Deckrev.of_list, lst);
        var match = Curry._1(Deque.Deckrev.unsnoc, deq);
        if (match !== undefined) {
          var x = match[1];
          if (true !== List.memq(x, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    469,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(Deque.Deckrev.memq, x, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    470,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(Deque.Deckrev.memq, x, match[0])) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    471,
                    10
                  ],
                  Error: new Error()
                };
          }
          var y = {
            contents: x.contents
          };
          if (true !== List.mem(y, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    473,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (true !== Curry._2(Deque.Deckrev.mem, y, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    474,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== List.memq(y, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    475,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (false !== Curry._2(Deque.Deckrev.memq, y, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    476,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                467,
                18
              ],
              Error: new Error()
            };
      }));

test("find", (function (param) {
        var match = make$4(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var elt = List.nth(lst, 3);
        var x0 = List.find((function (param) {
                return Curry._1(f, param) === elt;
              }), lst);
        var x1 = Curry._2(Deque.Deckrev.find, (function (param) {
                return Curry._1(g, param) === elt;
              }), deq);
        if (x0 !== elt) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  492,
                  8
                ],
                Error: new Error()
              };
        }
        if (x0 !== x1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  493,
                  8
                ],
                Error: new Error()
              };
        }
        assert_not_found$3(function (param) {
              return List.find((function (param) {
                            Curry._1(f, param);
                            return false;
                          }), lst);
            });
        assert_not_found$3(function (param) {
              return Curry._2(Deque.Deckrev.find, (function (param) {
                            Curry._1(g, param);
                            return false;
                          }), deq);
            });
        return Curry._1(match$1[2], undefined);
      }));

test("find_opt", (function (param) {
        var match = make$4(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var elt = List.nth(lst, 3);
        var x0 = List.find_opt((function (param) {
                return Curry._1(f, param) === elt;
              }), lst);
        var x1 = Curry._2(Deque.Deckrev.find_opt, (function (param) {
                return Curry._1(g, param) === elt;
              }), deq);
        if (!Caml_obj.caml_equal(x0, elt)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  514,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Caml_obj.caml_equal(x0, x1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  515,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== List.find_opt((function (param) {
                  Curry._1(f, param);
                  return false;
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  520,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== Curry._2(Deque.Deckrev.find_opt, (function (param) {
                  Curry._1(g, param);
                  return false;
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  521,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("find_map", (function (param) {
        var match = make$4(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var elt = List.nth(lst, 3);
        var eq = function (f, x) {
          if (Curry._1(f, x) === elt) {
            return Math.imul(x, x);
          }
          
        };
        var x0 = List.find_map((function (param) {
                return eq(f, param);
              }), lst);
        var x1 = Curry._2(Deque.Deckrev.find_map, (function (param) {
                return eq(g, param);
              }), deq);
        if (!Caml_obj.caml_equal(x0, Math.imul(elt, elt))) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  541,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Caml_obj.caml_equal(x0, x1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  542,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== List.find_map((function (param) {
                  Curry._1(f, param);
                  
                }), lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  547,
                  8
                ],
                Error: new Error()
              };
        }
        if (undefined !== Curry._2(Deque.Deckrev.find_map, (function (param) {
                  Curry._1(g, param);
                  
                }), deq)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  548,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("filter", (function (param) {
        var match = make$4(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        var lst = List.filter(function (param) {
                return is_even(f, param);
              })(match[0]);
        var deq = Curry._2(Deque.Deckrev.filter, (function (param) {
                return is_even(g, param);
              }), match[1]);
        assert_eq$3(lst, deq);
        if (List.length(lst) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  563,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.filter(function (param) {
                  Curry._1(f, param);
                  return false;
                })(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  568,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(Deque.Deckrev.is_empty, Curry._2(Deque.Deckrev.filter, (function (param) {
                      Curry._1(g, param);
                      return false;
                    }), deq))) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  569,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("find_all", (function (param) {
        var match = make$4(undefined, undefined);
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        var lst = List.find_all(function (param) {
                return is_even(f, param);
              })(match[0]);
        var deq = Curry._2(Deque.Deckrev.find_all, (function (param) {
                return is_even(g, param);
              }), match[1]);
        assert_eq$3(lst, deq);
        if (List.length(lst) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  584,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.find_all(function (param) {
                  Curry._1(f, param);
                  return false;
                })(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  589,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(Deque.Deckrev.is_empty, Curry._2(Deque.Deckrev.find_all, (function (param) {
                      Curry._1(g, param);
                      return false;
                    }), deq))) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  590,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("partition", (function (param) {
        var match = make$4(undefined, undefined);
        var deq = match[1];
        var lst = match[0];
        var match$1 = make_fs(undefined);
        var g = match$1[1];
        var f = match$1[0];
        var is_even = function (f, x) {
          return Curry._1(f, x) % 2 === 0;
        };
        var match$2 = List.partition((function (param) {
                return is_even(f, param);
              }), lst);
        var lst1 = match$2[1];
        var lst0 = match$2[0];
        var match$3 = Curry._2(Deque.Deckrev.partition, (function (param) {
                return is_even(g, param);
              }), deq);
        assert_eq$3(lst0, match$3[0]);
        assert_eq$3(lst1, match$3[1]);
        if (List.length(lst0) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  606,
                  8
                ],
                Error: new Error()
              };
        }
        if (List.length(lst1) <= 0) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  607,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.partition((function (param) {
                    Curry._1(f, param);
                    return false;
                  }), lst)[0]) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  612,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(Deque.Deckrev.is_empty, Curry._2(Deque.Deckrev.partition, (function (param) {
                        Curry._1(g, param);
                        return false;
                      }), deq)[0])) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  613,
                  8
                ],
                Error: new Error()
              };
        }
        if (/* [] */0 !== List.partition((function (param) {
                    Curry._1(f, param);
                    return true;
                  }), lst)[1]) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  618,
                  8
                ],
                Error: new Error()
              };
        }
        if (!Curry._1(Deque.Deckrev.is_empty, Curry._2(Deque.Deckrev.partition, (function (param) {
                        Curry._1(g, param);
                        return true;
                      }), deq)[1])) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  619,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$1[2], undefined);
      }));

test("assoc & mem_assoc", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var lst = List.combine(keys, values);
        var deq = Curry._1(Deque.Deckrev.of_list, lst);
        var match = Curry._1(Deque.Deckrev.unsnoc, deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (v !== List.assoc(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    637,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (v !== Curry._2(Deque.Deckrev.assoc, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    638,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!List.mem_assoc(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    639,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Curry._2(Deque.Deckrev.mem_assoc, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    640,
                    10
                  ],
                  Error: new Error()
                };
          }
          var lst$prime = Curry._1(Deque.Deckrev.to_list, deq$prime);
          assert_not_found$3(function (param) {
                return List.assoc(k, lst$prime);
              });
          assert_not_found$3(function (param) {
                return Curry._2(Deque.Deckrev.assoc, k, deq$prime);
              });
          if (List.mem_assoc(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    644,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (Curry._2(Deque.Deckrev.mem_assoc, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    645,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                635,
                18
              ],
              Error: new Error()
            };
      }));

test("assoc_opt", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var lst = List.combine(keys, values);
        var deq = Curry._1(Deque.Deckrev.of_list, lst);
        var match = Curry._1(Deque.Deckrev.unsnoc, deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (!Caml_obj.caml_equal(v, List.assoc_opt(k, lst))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    664,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Caml_obj.caml_equal(v, Curry._2(Deque.Deckrev.assoc_opt, k, deq))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    665,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!List.mem_assoc(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    666,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Curry._2(Deque.Deckrev.mem_assoc, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    667,
                    10
                  ],
                  Error: new Error()
                };
          }
          var lst$prime = Curry._1(Deque.Deckrev.to_list, deq$prime);
          if (undefined !== List.assoc_opt(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    669,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(Deque.Deckrev.assoc_opt, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    670,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (List.mem_assq(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    671,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (Curry._2(Deque.Deckrev.mem_assq, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    672,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                662,
                18
              ],
              Error: new Error()
            };
      }));

test("assq & mem_assq", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var keys$1 = List.map((function (x) {
                return {
                        contents: x
                      };
              }), keys);
        var lst = List.combine(keys$1, values);
        var deq = Curry._1(Deque.Deckrev.of_list, lst);
        var match = Curry._1(Deque.Deckrev.unsnoc, deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (v !== List.assq(k, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    692,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (v !== Curry._2(Deque.Deckrev.assq, k, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    693,
                    10
                  ],
                  Error: new Error()
                };
          }
          var k$prime = {
            contents: k.contents
          };
          assert_not_found$3(function (param) {
                return List.assq(k$prime, lst);
              });
          assert_not_found$3(function (param) {
                return Curry._2(Deque.Deckrev.assq, k$prime, deq);
              });
          var lst$prime = Curry._1(Deque.Deckrev.to_list, deq$prime);
          assert_not_found$3(function (param) {
                return List.assq(k, lst$prime);
              });
          assert_not_found$3(function (param) {
                return Curry._2(Deque.Deckrev.assq, k, deq$prime);
              });
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                690,
                18
              ],
              Error: new Error()
            };
      }));

test("assq_opt", (function (param) {
        var keys = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var values = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var keys$1 = List.map((function (x) {
                return {
                        contents: x
                      };
              }), keys);
        var lst = List.combine(keys$1, values);
        var deq = Curry._1(Deque.Deckrev.of_list, lst);
        var match = Curry._1(Deque.Deckrev.unsnoc, deq);
        if (match !== undefined) {
          var match$1 = match[1];
          var v = match$1[1];
          var k = match$1[0];
          var deq$prime = match[0];
          if (!Caml_obj.caml_equal(v, List.assq_opt(k, lst))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    719,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (!Caml_obj.caml_equal(v, Curry._2(Deque.Deckrev.assq_opt, k, deq))) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    720,
                    10
                  ],
                  Error: new Error()
                };
          }
          var k$prime = {
            contents: k.contents
          };
          if (undefined !== List.assq_opt(k$prime, lst)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    722,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(Deque.Deckrev.assq_opt, k$prime, deq)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    723,
                    10
                  ],
                  Error: new Error()
                };
          }
          var lst$prime = Curry._1(Deque.Deckrev.to_list, deq$prime);
          if (undefined !== List.assq_opt(k, lst$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    725,
                    10
                  ],
                  Error: new Error()
                };
          }
          if (undefined !== Curry._2(Deque.Deckrev.assq_opt, k, deq$prime)) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    726,
                    10
                  ],
                  Error: new Error()
                };
          }
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                717,
                18
              ],
              Error: new Error()
            };
      }));

test("combine & split", (function (param) {
        var match_0 = make$4(undefined, undefined);
        var match_1 = make$4(undefined, undefined);
        var match = match_1;
        var values = match[0];
        var match$1 = match_0;
        var keys = match$1[0];
        var lst = List.combine(keys, values);
        var deq = Curry._2(Deque.Deckrev.combine, match$1[1], match[1]);
        assert_eq$3(lst, deq);
        var match$2 = List.split(lst);
        var lst1 = match$2[1];
        var lst0 = match$2[0];
        var match$3 = Curry._1(Deque.Deckrev.split, deq);
        if (!Caml_obj.caml_equal(lst0, keys)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  742,
                  8
                ],
                Error: new Error()
              };
        }
        assert_eq$3(lst0, match$3[0]);
        if (!Caml_obj.caml_equal(lst1, values)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  744,
                  8
                ],
                Error: new Error()
              };
        }
        return assert_eq$3(lst1, match$3[1]);
      }));

test("to_seq & of_seq", (function (param) {
        var match = make$4(undefined, undefined);
        var lst = match[0];
        var lst_s = List.to_seq(lst);
        var deq_s = Curry._1(Deque.Deckrev.to_seq, match[1]);
        var lst$prime = List.of_seq(lst_s);
        var deq$prime = Curry._1(Deque.Deckrev.of_seq, deq_s);
        if (!Caml_obj.caml_equal(lst, lst$prime)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  758,
                  8
                ],
                Error: new Error()
              };
        }
        return assert_eq$3(lst, deq$prime);
      }));

test("to_array & of_array", (function (param) {
        var lst = List.init(10, (function (param) {
                counter.contents = counter.contents + 1 | 0;
                return counter.contents;
              }));
        var arr = $$Array.of_list(lst);
        var deq = Curry._1(Deque.Deckrev.of_array, arr);
        assert_eq$3(lst, deq);
        var arr$prime = Curry._1(Deque.Deckrev.to_array, deq);
        if (Caml_obj.caml_equal(arr, arr$prime)) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "list_like_test.re",
                772,
                8
              ],
              Error: new Error()
            };
      }));

test("make", (function (param) {
        for(var i = 0; i <= 100; ++i){
          var deq = Curry._2(Deque.Deckrev.make, i, "x");
          if (Curry._1(Deque.Deckrev.length, deq) !== i) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "list_like_test.re",
                    782,
                    10
                  ],
                  Error: new Error()
                };
          }
          
        }
        
      }));

test("init", (function (param) {
        var match = make_fs(undefined);
        var lst = List.init(10, match[0]);
        var deq = Curry._2(Deque.Deckrev.init, 10, match[1]);
        assert_eq$3(lst, deq);
        return Curry._1(match[2], undefined);
      }));

function random_list$3(param) {
  return List.init(1000, (function (param) {
                return Random.$$int(100);
              }));
}

function make_rnd$3(param) {
  var lst = List.init(1000, (function (param) {
          return Random.$$int(100);
        }));
  return [
          lst,
          Curry._1(Deque.Deckrev.of_list, lst)
        ];
}

function is_sorted$3(_param) {
  while(true) {
    var param = _param;
    if (!param) {
      return true;
    }
    var match = param.tl;
    if (!match) {
      return true;
    }
    var x1 = match.hd;
    if (!Caml_obj.caml_lessequal(param.hd, x1)) {
      return false;
    }
    _param = {
      hd: x1,
      tl: match.tl
    };
    continue ;
  };
}

test("sort & merge", (function (param) {
        var match = make_rnd$3(undefined);
        var lst0 = List.sort(Caml_primitive.caml_int_compare, match[0]);
        var deq0 = Curry._2(Deque.Deckrev.sort, Caml_primitive.caml_int_compare, match[1]);
        assert_eq$3(lst0, deq0);
        var match$1 = make_rnd$3(undefined);
        var lst1 = List.sort(Caml_primitive.caml_int_compare, match$1[0]);
        var deq1 = Curry._2(Deque.Deckrev.sort, Caml_primitive.caml_int_compare, match$1[1]);
        assert_eq$3(lst1, deq1);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var count = {
          contents: 0
        };
        var comparing = function (f, x, y) {
          count.contents = count.contents + 1 | 0;
          Curry._1(f, [
                x,
                y
              ]);
          return Caml_obj.caml_compare(x, y);
        };
        var lst = List.merge((function (param, param$1) {
                return comparing(f, param, param$1);
              }), lst0, lst1);
        var deq = Curry._3(Deque.Deckrev.merge, (function (param, param$1) {
                return comparing(g, param, param$1);
              }), deq0, deq1);
        assert_eq$3(lst, deq);
        if (!is_sorted$3(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  832,
                  8
                ],
                Error: new Error()
              };
        }
        if (count.contents > (Curry._1(Deque.Deckrev.length, deq) << 1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  833,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

test("merge not sorted", (function (param) {
        var match = make_rnd$3(undefined);
        var match$1 = make_rnd$3(undefined);
        var match$2 = make_fs(undefined);
        var g = match$2[1];
        var f = match$2[0];
        var count = {
          contents: 0
        };
        var comparing = function (f, x, y) {
          count.contents = count.contents + 1 | 0;
          Curry._1(f, [
                x,
                y
              ]);
          return Caml_obj.caml_compare(x, y);
        };
        var lst = List.merge((function (param, param$1) {
                return comparing(f, param, param$1);
              }), match[0], match$1[0]);
        var deq = Curry._3(Deque.Deckrev.merge, (function (param, param$1) {
                return comparing(g, param, param$1);
              }), match[1], match$1[1]);
        assert_eq$3(lst, deq);
        if (is_sorted$3(lst)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  855,
                  8
                ],
                Error: new Error()
              };
        }
        if (count.contents > (Curry._1(Deque.Deckrev.length, deq) << 1)) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "list_like_test.re",
                  856,
                  8
                ],
                Error: new Error()
              };
        }
        return Curry._1(match$2[2], undefined);
      }));

var Test_deckrev = {
  input_size: 10,
  make: make$4,
  assert_eq: assert_eq$3,
  assert_not_found: assert_not_found$3,
  assert_invalid: assert_invalid$3,
  assert_failure: assert_failure$3,
  random_list: random_list$3,
  make_rnd: make_rnd$3,
  is_sorted: is_sorted$3
};

Printf.printf(/* Format */{
      _0: {
        TAG: /* Char_literal */12,
        _0: /* '\n' */10,
        _1: {
          TAG: /* Flush */10,
          _0: /* End_of_format */0
        }
      },
      _1: "\n%!"
    });

exports.make_f = make_f;
exports.make_fs = make_fs;
exports.counter = counter;
exports.elt = elt;
exports.make_list = make_list;
exports.test = test;
exports.Test = Test;
exports.header = header;
exports.Test_dequeue = Test_dequeue;
exports.Test_steque = Test_steque;
exports.Test_deck = Test_deck;
exports.Test_deckrev = Test_deckrev;
/*  Not a pure module */
