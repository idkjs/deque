// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Deck = require("./deck.bs.js");
var Steque = require("./steque.bs.js");
var Deckrev = require("./deckrev.bs.js");
var Dequeue = require("./dequeue.bs.js");
var List_like = require("./list_like.bs.js");

var include = List_like.Make({
      empty: Steque.empty,
      is_empty: Steque.is_empty,
      cons: Steque.cons,
      uncons: Steque.uncons,
      snoc: Steque.snoc,
      fold_left: Steque.fold_left,
      fold_right: Steque.fold_right,
      rev: Steque.rev,
      append: Steque.append,
      length: Steque.length
    });

var include$1 = List_like.Make({
      empty: Deck.empty,
      is_empty: Deck.is_empty,
      cons: Deck.cons,
      uncons: Deck.uncons,
      snoc: Deck.snoc,
      fold_left: Deck.fold_left,
      fold_right: Deck.fold_right,
      rev: Deck.rev,
      append: Deck.append,
      length: Deck.length
    });

var hd = include$1.hd;

var tl = include$1.tl;

var iter = include$1.iter;

var iteri = include$1.iteri;

var nth = include$1.nth;

var nth_opt = include$1.nth_opt;

var map = include$1.map;

var mapi = include$1.mapi;

var rev_map = include$1.rev_map;

var filter_map = include$1.filter_map;

var fold_left_map = include$1.fold_left_map;

var exists = include$1.exists;

var for_all = include$1.for_all;

var mem = include$1.mem;

var memq = include$1.memq;

var find = include$1.find;

var find_opt = include$1.find_opt;

var find_map = include$1.find_map;

var filter = include$1.filter;

var find_all = include$1.find_all;

var filteri = include$1.filteri;

var partition = include$1.partition;

var assoc = include$1.assoc;

var assoc_opt = include$1.assoc_opt;

var assq = include$1.assq;

var assq_opt = include$1.assq_opt;

var mem_assoc = include$1.mem_assoc;

var mem_assq = include$1.mem_assq;

var split = include$1.split;

var to_list = include$1.to_list;

var of_list = include$1.of_list;

var to_seq = include$1.to_seq;

var of_seq = include$1.of_seq;

var init = include$1.init;

var to_array = include$1.to_array;

var of_array = include$1.of_array;

var merge = include$1.merge;

var sort = include$1.sort;

var stable_sort = include$1.stable_sort;

var fast_sort = include$1.fast_sort;

var sort_uniq = include$1.sort_uniq;

var iter2 = include$1.iter2;

var map2 = include$1.map2;

var rev_map2 = include$1.rev_map2;

var exists2 = include$1.exists2;

var for_all2 = include$1.for_all2;

var combine = include$1.combine;

var fold_left2 = include$1.fold_left2;

var compare = include$1.compare;

var equal = include$1.equal;

var $eq = include$1.$eq;

var $at = include$1.$at;

var rev_append = include$1.rev_append;

var concat = include$1.concat;

var flatten = include$1.flatten;

var concat_map = include$1.concat_map;

var include$2 = List_like.Make({
      empty: Deckrev.empty,
      is_empty: Deckrev.is_empty,
      cons: Deckrev.cons,
      uncons: Deckrev.uncons,
      snoc: Deckrev.snoc,
      fold_left: Deckrev.fold_left,
      fold_right: Deckrev.fold_right,
      rev: Deckrev.rev,
      append: Deckrev.append,
      length: Deckrev.length
    });

var Dequeue$1 = {
  empty: Dequeue.empty,
  is_empty: Dequeue.is_empty,
  cons: Dequeue.cons,
  singleton: Dequeue.singleton,
  uncons: Dequeue.uncons,
  snoc: Dequeue.snoc,
  unsnoc: Dequeue.unsnoc,
  append: Dequeue.append,
  rev: Dequeue.rev,
  length: Dequeue.length,
  hd: Dequeue.hd,
  tl: Dequeue.tl,
  nth: Dequeue.nth,
  nth_opt: Dequeue.nth_opt,
  make: Dequeue.make,
  init: Dequeue.init,
  $eq: Dequeue.$eq,
  equal: Dequeue.equal,
  compare: Dequeue.compare,
  $at: Dequeue.$at,
  rev_append: Dequeue.rev_append,
  concat: Dequeue.concat,
  flatten: Dequeue.flatten,
  iter: Dequeue.iter,
  iteri: Dequeue.iteri,
  map: Dequeue.map,
  mapi: Dequeue.mapi,
  rev_map: Dequeue.rev_map,
  filter_map: Dequeue.filter_map,
  concat_map: Dequeue.concat_map,
  fold_left_map: Dequeue.fold_left_map,
  fold_left: Dequeue.fold_left,
  fold_right: Dequeue.fold_right,
  iter2: Dequeue.iter2,
  map2: Dequeue.map2,
  rev_map2: Dequeue.rev_map2,
  fold_left2: Dequeue.fold_left2,
  for_all: Dequeue.for_all,
  exists: Dequeue.exists,
  for_all2: Dequeue.for_all2,
  exists2: Dequeue.exists2,
  mem: Dequeue.mem,
  memq: Dequeue.memq,
  find: Dequeue.find,
  find_opt: Dequeue.find_opt,
  find_map: Dequeue.find_map,
  filter: Dequeue.filter,
  find_all: Dequeue.find_all,
  filteri: Dequeue.filteri,
  partition: Dequeue.partition,
  assoc: Dequeue.assoc,
  assoc_opt: Dequeue.assoc_opt,
  assq: Dequeue.assq,
  assq_opt: Dequeue.assq_opt,
  mem_assoc: Dequeue.mem_assoc,
  mem_assq: Dequeue.mem_assq,
  split: Dequeue.split,
  combine: Dequeue.combine,
  sort: Dequeue.sort,
  stable_sort: Dequeue.stable_sort,
  fast_sort: Dequeue.fast_sort,
  sort_uniq: Dequeue.sort_uniq,
  merge: Dequeue.merge,
  to_array: Dequeue.to_array,
  of_array: Dequeue.of_array,
  to_list: Dequeue.to_list,
  of_list: Dequeue.of_list,
  to_seq: Dequeue.to_seq,
  of_seq: Dequeue.of_seq
};

var Steque_hd = include.hd;

var Steque_tl = include.tl;

var Steque_nth = include.nth;

var Steque_nth_opt = include.nth_opt;

var Steque_init = include.init;

var Steque_$eq = include.$eq;

var Steque_equal = include.equal;

var Steque_compare = include.compare;

var Steque_$at = include.$at;

var Steque_rev_append = include.rev_append;

var Steque_concat = include.concat;

var Steque_flatten = include.flatten;

var Steque_iter = include.iter;

var Steque_iteri = include.iteri;

var Steque_map = include.map;

var Steque_mapi = include.mapi;

var Steque_rev_map = include.rev_map;

var Steque_filter_map = include.filter_map;

var Steque_concat_map = include.concat_map;

var Steque_fold_left_map = include.fold_left_map;

var Steque_iter2 = include.iter2;

var Steque_map2 = include.map2;

var Steque_rev_map2 = include.rev_map2;

var Steque_fold_left2 = include.fold_left2;

var Steque_for_all = include.for_all;

var Steque_exists = include.exists;

var Steque_for_all2 = include.for_all2;

var Steque_exists2 = include.exists2;

var Steque_mem = include.mem;

var Steque_memq = include.memq;

var Steque_find = include.find;

var Steque_find_opt = include.find_opt;

var Steque_find_map = include.find_map;

var Steque_filter = include.filter;

var Steque_find_all = include.find_all;

var Steque_filteri = include.filteri;

var Steque_partition = include.partition;

var Steque_assoc = include.assoc;

var Steque_assoc_opt = include.assoc_opt;

var Steque_assq = include.assq;

var Steque_assq_opt = include.assq_opt;

var Steque_mem_assoc = include.mem_assoc;

var Steque_mem_assq = include.mem_assq;

var Steque_split = include.split;

var Steque_combine = include.combine;

var Steque_sort = include.sort;

var Steque_stable_sort = include.stable_sort;

var Steque_fast_sort = include.fast_sort;

var Steque_sort_uniq = include.sort_uniq;

var Steque_merge = include.merge;

var Steque_to_array = include.to_array;

var Steque_of_array = include.of_array;

var Steque_to_list = include.to_list;

var Steque_of_list = include.of_list;

var Steque_to_seq = include.to_seq;

var Steque_of_seq = include.of_seq;

var Steque$1 = {
  empty: Steque.empty,
  is_empty: Steque.is_empty,
  singleton: Steque.singleton,
  cons: Steque.cons,
  uncons: Steque.uncons,
  snoc: Steque.snoc,
  append: Steque.append,
  rev: Steque.rev,
  length: Steque.length,
  of_dequeue: Steque.of_dequeue,
  hd: Steque_hd,
  tl: Steque_tl,
  nth: Steque_nth,
  nth_opt: Steque_nth_opt,
  make: Steque.make,
  init: Steque_init,
  $eq: Steque_$eq,
  equal: Steque_equal,
  compare: Steque_compare,
  $at: Steque_$at,
  rev_append: Steque_rev_append,
  concat: Steque_concat,
  flatten: Steque_flatten,
  iter: Steque_iter,
  iteri: Steque_iteri,
  map: Steque_map,
  mapi: Steque_mapi,
  rev_map: Steque_rev_map,
  filter_map: Steque_filter_map,
  concat_map: Steque_concat_map,
  fold_left_map: Steque_fold_left_map,
  fold_left: Steque.fold_left,
  fold_right: Steque.fold_right,
  iter2: Steque_iter2,
  map2: Steque_map2,
  rev_map2: Steque_rev_map2,
  fold_left2: Steque_fold_left2,
  for_all: Steque_for_all,
  exists: Steque_exists,
  for_all2: Steque_for_all2,
  exists2: Steque_exists2,
  mem: Steque_mem,
  memq: Steque_memq,
  find: Steque_find,
  find_opt: Steque_find_opt,
  find_map: Steque_find_map,
  filter: Steque_filter,
  find_all: Steque_find_all,
  filteri: Steque_filteri,
  partition: Steque_partition,
  assoc: Steque_assoc,
  assoc_opt: Steque_assoc_opt,
  assq: Steque_assq,
  assq_opt: Steque_assq_opt,
  mem_assoc: Steque_mem_assoc,
  mem_assq: Steque_mem_assq,
  split: Steque_split,
  combine: Steque_combine,
  sort: Steque_sort,
  stable_sort: Steque_stable_sort,
  fast_sort: Steque_fast_sort,
  sort_uniq: Steque_sort_uniq,
  merge: Steque_merge,
  to_array: Steque_to_array,
  of_array: Steque_of_array,
  to_list: Steque_to_list,
  of_list: Steque_of_list,
  to_seq: Steque_to_seq,
  of_seq: Steque_of_seq
};

var Deck$1 = {
  empty: Deck.empty,
  is_empty: Deck.is_empty,
  singleton: Deck.singleton,
  cons: Deck.cons,
  uncons: Deck.uncons,
  snoc: Deck.snoc,
  unsnoc: Deck.unsnoc,
  append: Deck.append,
  rev: Deck.rev,
  length: Deck.length,
  of_dequeue: Deck.of_dequeue,
  hd: hd,
  tl: tl,
  nth: nth,
  nth_opt: nth_opt,
  make: Deck.make,
  init: init,
  $eq: $eq,
  equal: equal,
  compare: compare,
  $at: $at,
  rev_append: rev_append,
  concat: concat,
  flatten: flatten,
  iter: iter,
  iteri: iteri,
  map: map,
  mapi: mapi,
  rev_map: rev_map,
  filter_map: filter_map,
  concat_map: concat_map,
  fold_left_map: fold_left_map,
  fold_left: Deck.fold_left,
  fold_right: Deck.fold_right,
  iter2: iter2,
  map2: map2,
  rev_map2: rev_map2,
  fold_left2: fold_left2,
  for_all: for_all,
  exists: exists,
  for_all2: for_all2,
  exists2: exists2,
  mem: mem,
  memq: memq,
  find: find,
  find_opt: find_opt,
  find_map: find_map,
  filter: filter,
  find_all: find_all,
  filteri: filteri,
  partition: partition,
  assoc: assoc,
  assoc_opt: assoc_opt,
  assq: assq,
  assq_opt: assq_opt,
  mem_assoc: mem_assoc,
  mem_assq: mem_assq,
  split: split,
  combine: combine,
  sort: sort,
  stable_sort: stable_sort,
  fast_sort: fast_sort,
  sort_uniq: sort_uniq,
  merge: merge,
  to_array: to_array,
  of_array: of_array,
  to_list: to_list,
  of_list: of_list,
  to_seq: to_seq,
  of_seq: of_seq
};

var Deckrev_hd = include$2.hd;

var Deckrev_tl = include$2.tl;

var Deckrev_nth = include$2.nth;

var Deckrev_nth_opt = include$2.nth_opt;

var Deckrev_init = include$2.init;

var Deckrev_$eq = include$2.$eq;

var Deckrev_equal = include$2.equal;

var Deckrev_compare = include$2.compare;

var Deckrev_$at = include$2.$at;

var Deckrev_rev_append = include$2.rev_append;

var Deckrev_concat = include$2.concat;

var Deckrev_flatten = include$2.flatten;

var Deckrev_iter = include$2.iter;

var Deckrev_iteri = include$2.iteri;

var Deckrev_map = include$2.map;

var Deckrev_mapi = include$2.mapi;

var Deckrev_rev_map = include$2.rev_map;

var Deckrev_filter_map = include$2.filter_map;

var Deckrev_concat_map = include$2.concat_map;

var Deckrev_fold_left_map = include$2.fold_left_map;

var Deckrev_iter2 = include$2.iter2;

var Deckrev_map2 = include$2.map2;

var Deckrev_rev_map2 = include$2.rev_map2;

var Deckrev_fold_left2 = include$2.fold_left2;

var Deckrev_for_all = include$2.for_all;

var Deckrev_exists = include$2.exists;

var Deckrev_for_all2 = include$2.for_all2;

var Deckrev_exists2 = include$2.exists2;

var Deckrev_mem = include$2.mem;

var Deckrev_memq = include$2.memq;

var Deckrev_find = include$2.find;

var Deckrev_find_opt = include$2.find_opt;

var Deckrev_find_map = include$2.find_map;

var Deckrev_filter = include$2.filter;

var Deckrev_find_all = include$2.find_all;

var Deckrev_filteri = include$2.filteri;

var Deckrev_partition = include$2.partition;

var Deckrev_assoc = include$2.assoc;

var Deckrev_assoc_opt = include$2.assoc_opt;

var Deckrev_assq = include$2.assq;

var Deckrev_assq_opt = include$2.assq_opt;

var Deckrev_mem_assoc = include$2.mem_assoc;

var Deckrev_mem_assq = include$2.mem_assq;

var Deckrev_split = include$2.split;

var Deckrev_combine = include$2.combine;

var Deckrev_sort = include$2.sort;

var Deckrev_stable_sort = include$2.stable_sort;

var Deckrev_fast_sort = include$2.fast_sort;

var Deckrev_sort_uniq = include$2.sort_uniq;

var Deckrev_merge = include$2.merge;

var Deckrev_to_array = include$2.to_array;

var Deckrev_of_array = include$2.of_array;

var Deckrev_to_list = include$2.to_list;

var Deckrev_of_list = include$2.of_list;

var Deckrev_to_seq = include$2.to_seq;

var Deckrev_of_seq = include$2.of_seq;

var Deckrev$1 = {
  empty: Deckrev.empty,
  is_empty: Deckrev.is_empty,
  singleton: Deckrev.singleton,
  cons: Deckrev.cons,
  uncons: Deckrev.uncons,
  snoc: Deckrev.snoc,
  unsnoc: Deckrev.unsnoc,
  append: Deckrev.append,
  rev: Deckrev.rev,
  length: Deckrev.length,
  of_dequeue: Deckrev.of_dequeue,
  hd: Deckrev_hd,
  tl: Deckrev_tl,
  nth: Deckrev_nth,
  nth_opt: Deckrev_nth_opt,
  make: Deckrev.make,
  init: Deckrev_init,
  $eq: Deckrev_$eq,
  equal: Deckrev_equal,
  compare: Deckrev_compare,
  $at: Deckrev_$at,
  rev_append: Deckrev_rev_append,
  concat: Deckrev_concat,
  flatten: Deckrev_flatten,
  iter: Deckrev_iter,
  iteri: Deckrev_iteri,
  map: Deckrev_map,
  mapi: Deckrev_mapi,
  rev_map: Deckrev_rev_map,
  filter_map: Deckrev_filter_map,
  concat_map: Deckrev_concat_map,
  fold_left_map: Deckrev_fold_left_map,
  fold_left: Deckrev.fold_left,
  fold_right: Deckrev.fold_right,
  iter2: Deckrev_iter2,
  map2: Deckrev_map2,
  rev_map2: Deckrev_rev_map2,
  fold_left2: Deckrev_fold_left2,
  for_all: Deckrev_for_all,
  exists: Deckrev_exists,
  for_all2: Deckrev_for_all2,
  exists2: Deckrev_exists2,
  mem: Deckrev_mem,
  memq: Deckrev_memq,
  find: Deckrev_find,
  find_opt: Deckrev_find_opt,
  find_map: Deckrev_find_map,
  filter: Deckrev_filter,
  find_all: Deckrev_find_all,
  filteri: Deckrev_filteri,
  partition: Deckrev_partition,
  assoc: Deckrev_assoc,
  assoc_opt: Deckrev_assoc_opt,
  assq: Deckrev_assq,
  assq_opt: Deckrev_assq_opt,
  mem_assoc: Deckrev_mem_assoc,
  mem_assq: Deckrev_mem_assq,
  split: Deckrev_split,
  combine: Deckrev_combine,
  sort: Deckrev_sort,
  stable_sort: Deckrev_stable_sort,
  fast_sort: Deckrev_fast_sort,
  sort_uniq: Deckrev_sort_uniq,
  merge: Deckrev_merge,
  to_array: Deckrev_to_array,
  of_array: Deckrev_of_array,
  to_list: Deckrev_to_list,
  of_list: Deckrev_of_list,
  to_seq: Deckrev_to_seq,
  of_seq: Deckrev_of_seq
};

var empty = Deck.empty;

var is_empty = Deck.is_empty;

var singleton = Deck.singleton;

var cons = Deck.cons;

var uncons = Deck.uncons;

var snoc = Deck.snoc;

var unsnoc = Deck.unsnoc;

var append = Deck.append;

var rev = Deck.rev;

var length = Deck.length;

var of_dequeue = Deck.of_dequeue;

var make = Deck.make;

var fold_left = Deck.fold_left;

var fold_right = Deck.fold_right;

exports.Dequeue = Dequeue$1;
exports.Steque = Steque$1;
exports.Deck = Deck$1;
exports.Deckrev = Deckrev$1;
exports.empty = empty;
exports.is_empty = is_empty;
exports.singleton = singleton;
exports.cons = cons;
exports.uncons = uncons;
exports.snoc = snoc;
exports.unsnoc = unsnoc;
exports.append = append;
exports.rev = rev;
exports.length = length;
exports.of_dequeue = of_dequeue;
exports.hd = hd;
exports.tl = tl;
exports.nth = nth;
exports.nth_opt = nth_opt;
exports.make = make;
exports.init = init;
exports.$eq = $eq;
exports.equal = equal;
exports.compare = compare;
exports.$at = $at;
exports.rev_append = rev_append;
exports.concat = concat;
exports.flatten = flatten;
exports.iter = iter;
exports.iteri = iteri;
exports.map = map;
exports.mapi = mapi;
exports.rev_map = rev_map;
exports.filter_map = filter_map;
exports.concat_map = concat_map;
exports.fold_left_map = fold_left_map;
exports.fold_left = fold_left;
exports.fold_right = fold_right;
exports.iter2 = iter2;
exports.map2 = map2;
exports.rev_map2 = rev_map2;
exports.fold_left2 = fold_left2;
exports.for_all = for_all;
exports.exists = exists;
exports.for_all2 = for_all2;
exports.exists2 = exists2;
exports.mem = mem;
exports.memq = memq;
exports.find = find;
exports.find_opt = find_opt;
exports.find_map = find_map;
exports.filter = filter;
exports.find_all = find_all;
exports.filteri = filteri;
exports.partition = partition;
exports.assoc = assoc;
exports.assoc_opt = assoc_opt;
exports.assq = assq;
exports.assq_opt = assq_opt;
exports.mem_assoc = mem_assoc;
exports.mem_assq = mem_assq;
exports.split = split;
exports.combine = combine;
exports.sort = sort;
exports.stable_sort = stable_sort;
exports.fast_sort = fast_sort;
exports.sort_uniq = sort_uniq;
exports.merge = merge;
exports.to_array = to_array;
exports.of_array = of_array;
exports.to_list = to_list;
exports.of_list = of_list;
exports.to_seq = to_seq;
exports.of_seq = of_seq;
/* include Not a pure module */
