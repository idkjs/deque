// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function green_prefix_cons(x, buf) {
  if (typeof buf !== "number") {
    if (buf.TAG === /* B2 */1) {
      return {
              TAG: /* B3 */2,
              _0: x,
              _1: buf._0,
              _2: buf._1
            };
    } else {
      return {
              TAG: /* B4 */3,
              _0: x,
              _1: buf._0,
              _2: buf._1,
              _3: buf._2
            };
    }
  }
  
}

function green_suffix_snoc(buf, x) {
  if (typeof buf !== "number") {
    if (buf.TAG === /* B2 */1) {
      return {
              TAG: /* B3 */2,
              _0: buf._0,
              _1: buf._1,
              _2: x
            };
    } else {
      return {
              TAG: /* B4 */3,
              _0: buf._0,
              _1: buf._1,
              _2: buf._2,
              _3: x
            };
    }
  }
  
}

function yellow_prefix_cons(x, buf) {
  var buf$1 = buf._0;
  if (typeof buf$1 !== "number") {
    switch (buf$1.TAG | 0) {
      case /* B1 */0 :
          return /* Any */{
                  _0: {
                    TAG: /* B2 */1,
                    _0: x,
                    _1: buf$1._0
                  }
                };
      case /* B2 */1 :
          return /* Any */{
                  _0: {
                    TAG: /* B3 */2,
                    _0: x,
                    _1: buf$1._0,
                    _2: buf$1._1
                  }
                };
      case /* B3 */2 :
          return /* Any */{
                  _0: {
                    TAG: /* B4 */3,
                    _0: x,
                    _1: buf$1._0,
                    _2: buf$1._1,
                    _3: buf$1._2
                  }
                };
      case /* B4 */3 :
          return /* Any */{
                  _0: {
                    TAG: /* B5 */4,
                    _0: x,
                    _1: buf$1._0,
                    _2: buf$1._1,
                    _3: buf$1._2,
                    _4: buf$1._3
                  }
                };
      
    }
  }
  
}

function yellow_suffix_snoc(buf, x) {
  var buf$1 = buf._0;
  if (typeof buf$1 !== "number") {
    switch (buf$1.TAG | 0) {
      case /* B1 */0 :
          return /* Any */{
                  _0: {
                    TAG: /* B2 */1,
                    _0: buf$1._0,
                    _1: x
                  }
                };
      case /* B2 */1 :
          return /* Any */{
                  _0: {
                    TAG: /* B3 */2,
                    _0: buf$1._0,
                    _1: buf$1._1,
                    _2: x
                  }
                };
      case /* B3 */2 :
          return /* Any */{
                  _0: {
                    TAG: /* B4 */3,
                    _0: buf$1._0,
                    _1: buf$1._1,
                    _2: buf$1._2,
                    _3: x
                  }
                };
      case /* B4 */3 :
          return /* Any */{
                  _0: {
                    TAG: /* B5 */4,
                    _0: buf$1._0,
                    _1: buf$1._1,
                    _2: buf$1._2,
                    _3: buf$1._3,
                    _4: x
                  }
                };
      
    }
  }
  
}

function buffer_cons(x, buf) {
  if (typeof buf === "number") {
    return {
            TAG: /* Small */0,
            _0: {
              TAG: /* B1 */0,
              _0: x
            }
          };
  }
  switch (buf.TAG | 0) {
    case /* B1 */0 :
        return {
                TAG: /* Small */0,
                _0: {
                  TAG: /* B2 */1,
                  _0: x,
                  _1: buf._0
                }
              };
    case /* B2 */1 :
        return {
                TAG: /* Small */0,
                _0: {
                  TAG: /* B3 */2,
                  _0: x,
                  _1: buf._0,
                  _2: buf._1
                }
              };
    case /* B3 */2 :
        return {
                TAG: /* Small */0,
                _0: {
                  TAG: /* B4 */3,
                  _0: x,
                  _1: buf._0,
                  _2: buf._1,
                  _3: buf._2
                }
              };
    case /* B4 */3 :
        return {
                TAG: /* Small */0,
                _0: {
                  TAG: /* B5 */4,
                  _0: x,
                  _1: buf._0,
                  _2: buf._1,
                  _3: buf._2,
                  _4: buf._3
                }
              };
    case /* B5 */4 :
        return {
                TAG: /* G */1,
                _0: {
                  TAG: /* Green */1,
                  _0: {
                    TAG: /* B3 */2,
                    _0: x,
                    _1: buf._0,
                    _2: buf._1
                  },
                  _1: /* HOLE */0,
                  _2: {
                    TAG: /* B3 */2,
                    _0: buf._2,
                    _1: buf._3,
                    _2: buf._4
                  }
                },
                _1: {
                  TAG: /* Small */0,
                  _0: /* B0 */0
                }
              };
    
  }
}

function buffer_snoc(buf, x) {
  if (typeof buf === "number") {
    return {
            TAG: /* Small */0,
            _0: {
              TAG: /* B1 */0,
              _0: x
            }
          };
  }
  switch (buf.TAG | 0) {
    case /* B1 */0 :
        return {
                TAG: /* Small */0,
                _0: {
                  TAG: /* B2 */1,
                  _0: buf._0,
                  _1: x
                }
              };
    case /* B2 */1 :
        return {
                TAG: /* Small */0,
                _0: {
                  TAG: /* B3 */2,
                  _0: buf._0,
                  _1: buf._1,
                  _2: x
                }
              };
    case /* B3 */2 :
        return {
                TAG: /* Small */0,
                _0: {
                  TAG: /* B4 */3,
                  _0: buf._0,
                  _1: buf._1,
                  _2: buf._2,
                  _3: x
                }
              };
    case /* B4 */3 :
        return {
                TAG: /* Small */0,
                _0: {
                  TAG: /* B5 */4,
                  _0: buf._0,
                  _1: buf._1,
                  _2: buf._2,
                  _3: buf._3,
                  _4: x
                }
              };
    case /* B5 */4 :
        return {
                TAG: /* G */1,
                _0: {
                  TAG: /* Green */1,
                  _0: {
                    TAG: /* B3 */2,
                    _0: buf._0,
                    _1: buf._1,
                    _2: buf._2
                  },
                  _1: /* HOLE */0,
                  _2: {
                    TAG: /* B3 */2,
                    _0: buf._3,
                    _1: buf._4,
                    _2: x
                  }
                },
                _1: {
                  TAG: /* Small */0,
                  _0: /* B0 */0
                }
              };
    
  }
}

function green_uncons(param) {
  if (typeof param !== "number") {
    if (param.TAG === /* B2 */1) {
      return [
              param._0,
              /* Yellowish */{
                _0: {
                  TAG: /* B1 */0,
                  _0: param._1
                }
              }
            ];
    } else {
      return [
              param._0,
              /* Yellowish */{
                _0: {
                  TAG: /* B2 */1,
                  _0: param._1,
                  _1: param._2
                }
              }
            ];
    }
  }
  
}

function green_unsnoc(param) {
  if (typeof param !== "number") {
    if (param.TAG === /* B2 */1) {
      return [
              /* Yellowish */{
                _0: {
                  TAG: /* B1 */0,
                  _0: param._0
                }
              },
              param._1
            ];
    } else {
      return [
              /* Yellowish */{
                _0: {
                  TAG: /* B2 */1,
                  _0: param._0,
                  _1: param._1
                }
              },
              param._2
            ];
    }
  }
  
}

function yellow_uncons(buf) {
  var buf$1 = buf._0;
  if (typeof buf$1 !== "number") {
    switch (buf$1.TAG | 0) {
      case /* B1 */0 :
          return [
                  buf$1._0,
                  /* Any */{
                    _0: /* B0 */0
                  }
                ];
      case /* B2 */1 :
          return [
                  buf$1._0,
                  /* Any */{
                    _0: {
                      TAG: /* B1 */0,
                      _0: buf$1._1
                    }
                  }
                ];
      case /* B3 */2 :
          return [
                  buf$1._0,
                  /* Any */{
                    _0: {
                      TAG: /* B2 */1,
                      _0: buf$1._1,
                      _1: buf$1._2
                    }
                  }
                ];
      case /* B4 */3 :
          return [
                  buf$1._0,
                  /* Any */{
                    _0: {
                      TAG: /* B3 */2,
                      _0: buf$1._1,
                      _1: buf$1._2,
                      _2: buf$1._3
                    }
                  }
                ];
      
    }
  }
  
}

function yellow_unsnoc(buf) {
  var buf$1 = buf._0;
  if (typeof buf$1 !== "number") {
    switch (buf$1.TAG | 0) {
      case /* B1 */0 :
          return [
                  /* Any */{
                    _0: /* B0 */0
                  },
                  buf$1._0
                ];
      case /* B2 */1 :
          return [
                  /* Any */{
                    _0: {
                      TAG: /* B1 */0,
                      _0: buf$1._0
                    }
                  },
                  buf$1._1
                ];
      case /* B3 */2 :
          return [
                  /* Any */{
                    _0: {
                      TAG: /* B2 */1,
                      _0: buf$1._0,
                      _1: buf$1._1
                    }
                  },
                  buf$1._2
                ];
      case /* B4 */3 :
          return [
                  /* Any */{
                    _0: {
                      TAG: /* B3 */2,
                      _0: buf$1._0,
                      _1: buf$1._1,
                      _2: buf$1._2
                    }
                  },
                  buf$1._3
                ];
      
    }
  }
  
}

function buffer_uncons_unsafe(buf) {
  if (typeof buf !== "number") {
    if (buf.TAG === /* B5 */4) {
      return [
              buf._0,
              /* Any */{
                _0: {
                  TAG: /* B4 */3,
                  _0: buf._1,
                  _1: buf._2,
                  _2: buf._3,
                  _3: buf._4
                }
              }
            ];
    } else {
      return yellow_uncons(/* Yellowish */{
                  _0: buf
                });
    }
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "dequeue_internal.re",
          172,
          10
        ],
        Error: new Error()
      };
}

function buffer_unsnoc_unsafe(buf) {
  if (typeof buf !== "number") {
    if (buf.TAG === /* B5 */4) {
      return [
              /* Any */{
                _0: {
                  TAG: /* B4 */3,
                  _0: buf._0,
                  _1: buf._1,
                  _2: buf._2,
                  _3: buf._3
                }
              },
              buf._4
            ];
    } else {
      return yellow_unsnoc(/* Yellowish */{
                  _0: buf
                });
    }
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "dequeue_internal.re",
          184,
          10
        ],
        Error: new Error()
      };
}

function buffer_uncons(buf) {
  if (typeof buf === "number") {
    return ;
  } else {
    return buffer_uncons_unsafe(buf);
  }
}

function buffer_unsnoc(buf) {
  if (typeof buf === "number") {
    return ;
  } else {
    return buffer_unsnoc_unsafe(buf);
  }
}

function prefix_rot(x, buf) {
  if (typeof buf === "number") {
    return [
            /* B0 */0,
            x
          ];
  }
  switch (buf.TAG | 0) {
    case /* B1 */0 :
        return [
                {
                  TAG: /* B1 */0,
                  _0: x
                },
                buf._0
              ];
    case /* B2 */1 :
        return [
                {
                  TAG: /* B2 */1,
                  _0: x,
                  _1: buf._0
                },
                buf._1
              ];
    case /* B3 */2 :
        return [
                {
                  TAG: /* B3 */2,
                  _0: x,
                  _1: buf._0,
                  _2: buf._1
                },
                buf._2
              ];
    case /* B4 */3 :
        return [
                {
                  TAG: /* B4 */3,
                  _0: x,
                  _1: buf._0,
                  _2: buf._1,
                  _3: buf._2
                },
                buf._3
              ];
    case /* B5 */4 :
        return [
                {
                  TAG: /* B5 */4,
                  _0: x,
                  _1: buf._0,
                  _2: buf._1,
                  _3: buf._2,
                  _4: buf._3
                },
                buf._4
              ];
    
  }
}

function suffix_rot(buf, x) {
  if (typeof buf === "number") {
    return [
            x,
            /* B0 */0
          ];
  }
  switch (buf.TAG | 0) {
    case /* B1 */0 :
        return [
                buf._0,
                {
                  TAG: /* B1 */0,
                  _0: x
                }
              ];
    case /* B2 */1 :
        return [
                buf._0,
                {
                  TAG: /* B2 */1,
                  _0: buf._1,
                  _1: x
                }
              ];
    case /* B3 */2 :
        return [
                buf._0,
                {
                  TAG: /* B3 */2,
                  _0: buf._1,
                  _1: buf._2,
                  _2: x
                }
              ];
    case /* B4 */3 :
        return [
                buf._0,
                {
                  TAG: /* B4 */3,
                  _0: buf._1,
                  _1: buf._2,
                  _2: buf._3,
                  _3: x
                }
              ];
    case /* B5 */4 :
        return [
                buf._0,
                {
                  TAG: /* B5 */4,
                  _0: buf._1,
                  _1: buf._2,
                  _2: buf._3,
                  _3: buf._4,
                  _4: x
                }
              ];
    
  }
}

function prefix_decompose(x) {
  if (typeof x === "number") {
    return {
            TAG: /* Underflow */0,
            _0: undefined
          };
  }
  switch (x.TAG | 0) {
    case /* B1 */0 :
        return {
                TAG: /* Underflow */0,
                _0: Caml_option.some(x._0)
              };
    case /* B2 */1 :
    case /* B3 */2 :
        return {
                TAG: /* Ok */1,
                _0: x
              };
    case /* B4 */3 :
        return {
                TAG: /* Overflow */2,
                _0: {
                  TAG: /* B2 */1,
                  _0: x._0,
                  _1: x._1
                },
                _1: [
                  x._2,
                  x._3
                ]
              };
    case /* B5 */4 :
        return {
                TAG: /* Overflow */2,
                _0: {
                  TAG: /* B3 */2,
                  _0: x._0,
                  _1: x._1,
                  _2: x._2
                },
                _1: [
                  x._3,
                  x._4
                ]
              };
    
  }
}

function suffix_decompose(x) {
  if (typeof x === "number") {
    return {
            TAG: /* Underflow */0,
            _0: undefined
          };
  }
  switch (x.TAG | 0) {
    case /* B1 */0 :
        return {
                TAG: /* Underflow */0,
                _0: Caml_option.some(x._0)
              };
    case /* B2 */1 :
    case /* B3 */2 :
        return {
                TAG: /* Ok */1,
                _0: x
              };
    case /* B4 */3 :
        return {
                TAG: /* Overflow */2,
                _0: {
                  TAG: /* B2 */1,
                  _0: x._2,
                  _1: x._3
                },
                _1: [
                  x._0,
                  x._1
                ]
              };
    case /* B5 */4 :
        return {
                TAG: /* Overflow */2,
                _0: {
                  TAG: /* B3 */2,
                  _0: x._2,
                  _1: x._3,
                  _2: x._4
                },
                _1: [
                  x._0,
                  x._1
                ]
              };
    
  }
}

function prefix23(opt, param) {
  var c = param[1];
  var b = param[0];
  if (opt !== undefined) {
    return {
            TAG: /* B3 */2,
            _0: Caml_option.valFromOption(opt),
            _1: b,
            _2: c
          };
  } else {
    return {
            TAG: /* B2 */1,
            _0: b,
            _1: c
          };
  }
}

function suffix23(param, opt) {
  var b = param[1];
  var a = param[0];
  if (opt !== undefined) {
    return {
            TAG: /* B3 */2,
            _0: a,
            _1: b,
            _2: Caml_option.valFromOption(opt)
          };
  } else {
    return {
            TAG: /* B2 */1,
            _0: a,
            _1: b
          };
  }
}

function prefix12(x, opt) {
  if (opt !== undefined) {
    return {
            TAG: /* B2 */1,
            _0: x,
            _1: Caml_option.valFromOption(opt)
          };
  } else {
    return {
            TAG: /* B1 */0,
            _0: x
          };
  }
}

function green_prefix_concat(buf1, buf2) {
  var buf1$1 = prefix_decompose(buf1);
  switch (buf1$1.TAG | 0) {
    case /* Underflow */0 :
        var match = green_uncons(buf2);
        return [
                prefix23(buf1$1._0, match[0]),
                match[1]
              ];
    case /* Ok */1 :
        return [
                buf1$1._0,
                /* Yellowish */{
                  _0: buf2
                }
              ];
    case /* Overflow */2 :
        return [
                buf1$1._0,
                /* Yellowish */{
                  _0: green_prefix_cons(buf1$1._1, buf2)
                }
              ];
    
  }
}

function green_suffix_concat(buf1, buf2) {
  var buf2$1 = suffix_decompose(buf2);
  switch (buf2$1.TAG | 0) {
    case /* Underflow */0 :
        var match = green_unsnoc(buf1);
        return [
                match[0],
                suffix23(match[1], buf2$1._0)
              ];
    case /* Ok */1 :
        return [
                /* Yellowish */{
                  _0: buf1
                },
                buf2$1._0
              ];
    case /* Overflow */2 :
        return [
                /* Yellowish */{
                  _0: green_suffix_snoc(buf1, buf2$1._1)
                },
                buf2$1._0
              ];
    
  }
}

function prefix_concat(buf1, buf2) {
  var buf1$1 = prefix_decompose(buf1);
  switch (buf1$1.TAG | 0) {
    case /* Underflow */0 :
        var match = yellow_uncons(buf2);
        return [
                prefix23(buf1$1._0, match[0]),
                match[1]
              ];
    case /* Ok */1 :
        return [
                buf1$1._0,
                /* Any */{
                  _0: buf2._0
                }
              ];
    case /* Overflow */2 :
        return [
                buf1$1._0,
                yellow_prefix_cons(buf1$1._1, buf2)
              ];
    
  }
}

function suffix_concat(buf1, buf2) {
  var buf2$1 = suffix_decompose(buf2);
  switch (buf2$1.TAG | 0) {
    case /* Underflow */0 :
        var match = yellow_unsnoc(buf1);
        return [
                match[0],
                suffix23(match[1], buf2$1._0)
              ];
    case /* Ok */1 :
        return [
                /* Any */{
                  _0: buf1._0
                },
                buf2$1._0
              ];
    case /* Overflow */2 :
        return [
                yellow_suffix_snoc(buf1, buf2$1._1),
                buf2$1._0
              ];
    
  }
}

function buffer_unsandwich(a) {
  if (typeof a === "number") {
    return {
            TAG: /* Alone */0,
            _0: undefined
          };
  }
  switch (a.TAG | 0) {
    case /* B1 */0 :
        return {
                TAG: /* Alone */0,
                _0: Caml_option.some(a._0)
              };
    case /* B2 */1 :
        return {
                TAG: /* Sandwich */1,
                _0: a._0,
                _1: /* B0 */0,
                _2: a._1
              };
    case /* B3 */2 :
        return {
                TAG: /* Sandwich */1,
                _0: a._0,
                _1: {
                  TAG: /* B1 */0,
                  _0: a._1
                },
                _2: a._2
              };
    case /* B4 */3 :
        return {
                TAG: /* Sandwich */1,
                _0: a._0,
                _1: {
                  TAG: /* B2 */1,
                  _0: a._1,
                  _1: a._2
                },
                _2: a._3
              };
    case /* B5 */4 :
        return {
                TAG: /* Sandwich */1,
                _0: a._0,
                _1: {
                  TAG: /* B3 */2,
                  _0: a._1,
                  _1: a._2,
                  _2: a._3
                },
                _2: a._4
              };
    
  }
}

function buffer_halve(a) {
  if (typeof a === "number") {
    return [
            undefined,
            /* Any */{
              _0: /* B0 */0
            }
          ];
  }
  switch (a.TAG | 0) {
    case /* B1 */0 :
        return [
                Caml_option.some(a._0),
                /* Any */{
                  _0: /* B0 */0
                }
              ];
    case /* B2 */1 :
        return [
                undefined,
                /* Any */{
                  _0: {
                    TAG: /* B1 */0,
                    _0: [
                      a._0,
                      a._1
                    ]
                  }
                }
              ];
    case /* B3 */2 :
        return [
                Caml_option.some(a._0),
                /* Any */{
                  _0: {
                    TAG: /* B1 */0,
                    _0: [
                      a._1,
                      a._2
                    ]
                  }
                }
              ];
    case /* B4 */3 :
        return [
                undefined,
                /* Any */{
                  _0: {
                    TAG: /* B2 */1,
                    _0: [
                      a._0,
                      a._1
                    ],
                    _1: [
                      a._2,
                      a._3
                    ]
                  }
                }
              ];
    case /* B5 */4 :
        return [
                Caml_option.some(a._0),
                /* Any */{
                  _0: {
                    TAG: /* B2 */1,
                    _0: [
                      a._1,
                      a._2
                    ],
                    _1: [
                      a._3,
                      a._4
                    ]
                  }
                }
              ];
    
  }
}

function make_small(prefix1, buf, suffix1) {
  var match = prefix_decompose(prefix1);
  var match$1 = suffix_decompose(suffix1);
  switch (match.TAG | 0) {
    case /* Underflow */0 :
        var opt = match._0;
        switch (match$1.TAG | 0) {
          case /* Underflow */0 :
              var s1 = match$1._0;
              var opt$1 = buffer_unsandwich(buf);
              if (opt$1.TAG !== /* Alone */0) {
                return {
                        TAG: /* G */1,
                        _0: {
                          TAG: /* Green */1,
                          _0: prefix23(opt, opt$1._0),
                          _1: /* HOLE */0,
                          _2: suffix23(opt$1._2, s1)
                        },
                        _1: {
                          TAG: /* Small */0,
                          _0: opt$1._1
                        }
                      };
              }
              var opt$2 = opt$1._0;
              if (opt !== undefined) {
                var a = Caml_option.valFromOption(opt);
                if (opt$2 === undefined) {
                  if (s1 !== undefined) {
                    return {
                            TAG: /* Small */0,
                            _0: {
                              TAG: /* B2 */1,
                              _0: a,
                              _1: Caml_option.valFromOption(s1)
                            }
                          };
                  } else {
                    return {
                            TAG: /* Small */0,
                            _0: {
                              TAG: /* B1 */0,
                              _0: a
                            }
                          };
                  }
                }
                var c = opt$2[1];
                var b = opt$2[0];
                if (s1 !== undefined) {
                  return {
                          TAG: /* Small */0,
                          _0: {
                            TAG: /* B4 */3,
                            _0: a,
                            _1: b,
                            _2: c,
                            _3: Caml_option.valFromOption(s1)
                          }
                        };
                } else {
                  return {
                          TAG: /* Small */0,
                          _0: {
                            TAG: /* B3 */2,
                            _0: a,
                            _1: b,
                            _2: c
                          }
                        };
                }
              }
              if (opt$2 === undefined) {
                if (s1 !== undefined) {
                  return {
                          TAG: /* Small */0,
                          _0: {
                            TAG: /* B1 */0,
                            _0: Caml_option.valFromOption(s1)
                          }
                        };
                } else {
                  return {
                          TAG: /* Small */0,
                          _0: /* B0 */0
                        };
                }
              }
              var b$1 = opt$2[1];
              var a$1 = opt$2[0];
              if (s1 !== undefined) {
                return {
                        TAG: /* Small */0,
                        _0: {
                          TAG: /* B3 */2,
                          _0: a$1,
                          _1: b$1,
                          _2: Caml_option.valFromOption(s1)
                        }
                      };
              } else {
                return {
                        TAG: /* Small */0,
                        _0: {
                          TAG: /* B2 */1,
                          _0: a$1,
                          _1: b$1
                        }
                      };
              }
          case /* Ok */1 :
              var s1$1 = match$1._0;
              var match$2 = buffer_uncons(buf);
              if (match$2 !== undefined) {
                return {
                        TAG: /* G */1,
                        _0: {
                          TAG: /* Green */1,
                          _0: prefix23(opt, match$2[0]),
                          _1: /* HOLE */0,
                          _2: s1$1
                        },
                        _1: {
                          TAG: /* Small */0,
                          _0: match$2[1]._0
                        }
                      };
              } else if (opt !== undefined) {
                return buffer_cons(Caml_option.valFromOption(opt), s1$1);
              } else {
                return {
                        TAG: /* Small */0,
                        _0: s1$1
                      };
              }
          case /* Overflow */2 :
              var match$3 = suffix_rot(buf, match$1._1);
              return {
                      TAG: /* G */1,
                      _0: {
                        TAG: /* Green */1,
                        _0: prefix23(opt, match$3[0]),
                        _1: /* HOLE */0,
                        _2: match$1._0
                      },
                      _1: {
                        TAG: /* Small */0,
                        _0: match$3[1]
                      }
                    };
          
        }
    case /* Ok */1 :
        var p1 = match._0;
        switch (match$1.TAG | 0) {
          case /* Underflow */0 :
              var opt$3 = match$1._0;
              var match$4 = buffer_unsnoc(buf);
              if (match$4 !== undefined) {
                return {
                        TAG: /* G */1,
                        _0: {
                          TAG: /* Green */1,
                          _0: p1,
                          _1: /* HOLE */0,
                          _2: suffix23(match$4[1], opt$3)
                        },
                        _1: {
                          TAG: /* Small */0,
                          _0: match$4[0]._0
                        }
                      };
              } else if (opt$3 !== undefined) {
                return buffer_snoc(p1, Caml_option.valFromOption(opt$3));
              } else {
                return {
                        TAG: /* Small */0,
                        _0: p1
                      };
              }
          case /* Ok */1 :
              return {
                      TAG: /* G */1,
                      _0: {
                        TAG: /* Green */1,
                        _0: p1,
                        _1: /* HOLE */0,
                        _2: match$1._0
                      },
                      _1: {
                        TAG: /* Small */0,
                        _0: buf
                      }
                    };
          case /* Overflow */2 :
              var buf$1 = buffer_snoc(buf, match$1._1);
              return {
                      TAG: /* G */1,
                      _0: {
                        TAG: /* Green */1,
                        _0: p1,
                        _1: /* HOLE */0,
                        _2: match$1._0
                      },
                      _1: buf$1
                    };
          
        }
    case /* Overflow */2 :
        var ab = match._1;
        var p1$1 = match._0;
        switch (match$1.TAG | 0) {
          case /* Underflow */0 :
              var match$5 = prefix_rot(ab, buf);
              return {
                      TAG: /* G */1,
                      _0: {
                        TAG: /* Green */1,
                        _0: p1$1,
                        _1: /* HOLE */0,
                        _2: suffix23(match$5[1], match$1._0)
                      },
                      _1: {
                        TAG: /* Small */0,
                        _0: match$5[0]
                      }
                    };
          case /* Ok */1 :
              var buf$2 = buffer_cons(ab, buf);
              return {
                      TAG: /* G */1,
                      _0: {
                        TAG: /* Green */1,
                        _0: p1$1,
                        _1: /* HOLE */0,
                        _2: match$1._0
                      },
                      _1: buf$2
                    };
          case /* Overflow */2 :
              var match$6 = buffer_halve(buf);
              return {
                      TAG: /* G */1,
                      _0: {
                        TAG: /* Green */1,
                        _0: p1$1,
                        _1: {
                          TAG: /* Yellow */0,
                          _0: prefix12(ab, match$6[0]),
                          _1: /* HOLE */0,
                          _2: {
                            TAG: /* B1 */0,
                            _0: match$1._1
                          }
                        },
                        _2: match$1._0
                      },
                      _1: {
                        TAG: /* Small */0,
                        _0: match$6[1]._0
                      }
                    };
          
        }
    
  }
}

function green_of_red(param) {
  var match = param._0;
  var match$1 = match._1;
  var p1 = match._0;
  if (typeof match$1 === "number") {
    var buf = param._1;
    var s1 = match._2;
    if (buf.TAG === /* Small */0) {
      return make_small(p1, buf._0, s1);
    }
    var match$2 = buf._0;
    var match$3 = green_prefix_concat(p1, match$2._0);
    var match$4 = green_suffix_concat(match$2._2, s1);
    return {
            TAG: /* G */1,
            _0: {
              TAG: /* Green */1,
              _0: match$3[0],
              _1: {
                TAG: /* Yellow */0,
                _0: match$3[1]._0,
                _1: match$2._1,
                _2: match$4[0]._0
              },
              _2: match$4[1]
            },
            _1: buf._1
          };
  }
  var match$5 = prefix_concat(p1, /* Yellowish */{
        _0: match$1._0
      });
  var match$6 = suffix_concat(/* Yellowish */{
        _0: match$1._2
      }, match._2);
  return {
          TAG: /* G */1,
          _0: {
            TAG: /* Green */1,
            _0: match$5[0],
            _1: /* HOLE */0,
            _2: match$6[1]
          },
          _1: {
            TAG: /* R */3,
            _0: {
              TAG: /* Red */2,
              _0: match$5[1]._0,
              _1: match$1._1,
              _2: match$6[0]._0
            },
            _1: param._1
          }
        };
}

function ensure_green(param, t) {
  switch (t.TAG | 0) {
    case /* Small */0 :
        return {
                TAG: /* Small */0,
                _0: t._0
              };
    case /* G */1 :
        return {
                TAG: /* G */1,
                _0: t._0,
                _1: t._1
              };
    case /* R */3 :
        return green_of_red({
                    TAG: /* R */3,
                    _0: t._0,
                    _1: t._1
                  });
    
  }
}

function yellow(p1, child, s1, kont) {
  return /* T */{
          _0: {
            TAG: /* Y */2,
            _0: {
              TAG: /* Yellow */0,
              _0: p1,
              _1: child,
              _2: s1
            },
            _1: ensure_green(/* Not_yellow */0, kont)
          }
        };
}

function red(p1, child, s1, kont) {
  return /* T */{
          _0: green_of_red({
                TAG: /* R */3,
                _0: {
                  TAG: /* Red */2,
                  _0: p1,
                  _1: child,
                  _2: s1
                },
                _1: kont
              })
        };
}

function cons(x, t) {
  var t$1 = t._0;
  switch (t$1.TAG | 0) {
    case /* Small */0 :
        return /* T */{
                _0: buffer_cons(x, t$1._0)
              };
    case /* G */1 :
        var match = t$1._0;
        var p1 = green_prefix_cons(x, match._0);
        return yellow(p1, match._1, match._2, t$1._1);
    case /* Y */2 :
        var match$1 = t$1._0;
        var p1$1 = yellow_prefix_cons(x, /* Yellowish */{
              _0: match$1._0
            });
        return red(p1$1._0, match$1._1, match$1._2, t$1._1);
    
  }
}

function snoc(t, x) {
  var t$1 = t._0;
  switch (t$1.TAG | 0) {
    case /* Small */0 :
        return /* T */{
                _0: buffer_snoc(t$1._0, x)
              };
    case /* G */1 :
        var match = t$1._0;
        var s1 = green_suffix_snoc(match._2, x);
        return yellow(match._0, match._1, s1, t$1._1);
    case /* Y */2 :
        var match$1 = t$1._0;
        var s1$1 = yellow_suffix_snoc(/* Yellowish */{
              _0: match$1._2
            }, x);
        return red(match$1._0, match$1._1, s1$1._0, t$1._1);
    
  }
}

function uncons_unsafe(t) {
  var t$1 = t._0;
  switch (t$1.TAG | 0) {
    case /* Small */0 :
        var match = buffer_uncons_unsafe(t$1._0);
        return [
                match[0],
                /* T */{
                  _0: {
                    TAG: /* Small */0,
                    _0: match[1]._0
                  }
                }
              ];
    case /* G */1 :
        var match$1 = t$1._0;
        var match$2 = green_uncons(match$1._0);
        return [
                match$2[0],
                yellow(match$2[1]._0, match$1._1, match$1._2, t$1._1)
              ];
    case /* Y */2 :
        var match$3 = t$1._0;
        var match$4 = yellow_uncons(/* Yellowish */{
              _0: match$3._0
            });
        return [
                match$4[0],
                red(match$4[1]._0, match$3._1, match$3._2, t$1._1)
              ];
    
  }
}

function unsnoc_unsafe(t) {
  var t$1 = t._0;
  switch (t$1.TAG | 0) {
    case /* Small */0 :
        var match = buffer_unsnoc_unsafe(t$1._0);
        return [
                /* T */{
                  _0: {
                    TAG: /* Small */0,
                    _0: match[0]._0
                  }
                },
                match[1]
              ];
    case /* G */1 :
        var match$1 = t$1._0;
        var match$2 = green_unsnoc(match$1._2);
        return [
                yellow(match$1._0, match$1._1, match$2[0]._0, t$1._1),
                match$2[1]
              ];
    case /* Y */2 :
        var match$3 = t$1._0;
        var match$4 = yellow_unsnoc(/* Yellowish */{
              _0: match$3._2
            });
        return [
                red(match$3._0, match$3._1, match$4[0]._0, t$1._1),
                match$4[1]
              ];
    
  }
}

function is_empty(t) {
  return t.length === 0;
}

function length(t) {
  return Pervasives.abs(t.length);
}

function rev(t) {
  return {
          length: -t.length | 0,
          s: t.s
        };
}

function cons$1(x, param) {
  var s = param.s;
  var n = param.length;
  if (n >= 0) {
    return {
            length: n + 1 | 0,
            s: cons(x, s)
          };
  } else {
    return {
            length: n - 1 | 0,
            s: snoc(s, x)
          };
  }
}

function snoc$1(param, x) {
  var s = param.s;
  var n = param.length;
  if (n >= 0) {
    return {
            length: n + 1 | 0,
            s: snoc(s, x)
          };
  } else {
    return {
            length: n - 1 | 0,
            s: cons(x, s)
          };
  }
}

function uncons(param) {
  var s = param.s;
  var n = param.length;
  if (n === 0) {
    return ;
  }
  if (n >= 0) {
    var match = uncons_unsafe(s);
    return [
            match[0],
            {
              length: n - 1 | 0,
              s: match[1]
            }
          ];
  }
  var match$1 = unsnoc_unsafe(s);
  return [
          match$1[1],
          {
            length: n + 1 | 0,
            s: match$1[0]
          }
        ];
}

function unsnoc(param) {
  var s = param.s;
  var n = param.length;
  if (n === 0) {
    return ;
  }
  if (n >= 0) {
    var match = unsnoc_unsafe(s);
    return [
            {
              length: n - 1 | 0,
              s: match[0]
            },
            match[1]
          ];
  }
  var match$1 = uncons_unsafe(s);
  return [
          {
            length: n + 1 | 0,
            s: match$1[1]
          },
          match$1[0]
        ];
}

function is_rev(t) {
  return t.length < 0;
}

var empty = {
  length: 0,
  s: /* T */{
    _0: {
      TAG: /* Small */0,
      _0: /* B0 */0
    }
  }
};

exports.green_prefix_cons = green_prefix_cons;
exports.green_suffix_snoc = green_suffix_snoc;
exports.yellow_prefix_cons = yellow_prefix_cons;
exports.yellow_suffix_snoc = yellow_suffix_snoc;
exports.buffer_cons = buffer_cons;
exports.buffer_snoc = buffer_snoc;
exports.green_uncons = green_uncons;
exports.green_unsnoc = green_unsnoc;
exports.yellow_uncons = yellow_uncons;
exports.yellow_unsnoc = yellow_unsnoc;
exports.buffer_uncons_unsafe = buffer_uncons_unsafe;
exports.buffer_unsnoc_unsafe = buffer_unsnoc_unsafe;
exports.buffer_uncons = buffer_uncons;
exports.buffer_unsnoc = buffer_unsnoc;
exports.prefix_rot = prefix_rot;
exports.suffix_rot = suffix_rot;
exports.prefix_decompose = prefix_decompose;
exports.suffix_decompose = suffix_decompose;
exports.prefix23 = prefix23;
exports.suffix23 = suffix23;
exports.prefix12 = prefix12;
exports.green_prefix_concat = green_prefix_concat;
exports.green_suffix_concat = green_suffix_concat;
exports.prefix_concat = prefix_concat;
exports.suffix_concat = suffix_concat;
exports.buffer_unsandwich = buffer_unsandwich;
exports.buffer_halve = buffer_halve;
exports.make_small = make_small;
exports.green_of_red = green_of_red;
exports.ensure_green = ensure_green;
exports.yellow = yellow;
exports.red = red;
exports.uncons_unsafe = uncons_unsafe;
exports.unsnoc_unsafe = unsnoc_unsafe;
exports.empty = empty;
exports.is_empty = is_empty;
exports.length = length;
exports.rev = rev;
exports.cons = cons$1;
exports.snoc = snoc$1;
exports.uncons = uncons;
exports.unsnoc = unsnoc;
exports.is_rev = is_rev;
/* No side effect */
