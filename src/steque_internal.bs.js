// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Dequeue_internal$ReasonDeque = require("./dequeue_internal.bs.js");

var empty_kont = {
  TAG: /* Suffix */0,
  _0: Dequeue_internal$ReasonDeque.empty
};

var empty = /* T */{
  _0: empty_kont
};

function is_empty(param) {
  var d = param._0;
  if (d.TAG === /* Suffix */0) {
    return Dequeue_internal$ReasonDeque.is_empty(d._0);
  } else {
    return false;
  }
}

function green(p, kont, s) {
  switch (kont.TAG | 0) {
    case /* Suffix */0 :
        return {
                TAG: /* G */3,
                _0: /* Triple */{
                  _0: p,
                  _1: /* KONT */0,
                  _2: s
                },
                _1: {
                  TAG: /* Suffix */0,
                  _0: kont._0
                }
              };
    case /* R */1 :
        return {
                TAG: /* G */3,
                _0: /* Triple */{
                  _0: p,
                  _1: /* KONT */0,
                  _2: s
                },
                _1: {
                  TAG: /* R */1,
                  _0: kont._0,
                  _1: kont._1
                }
              };
    case /* G */3 :
        return {
                TAG: /* G */3,
                _0: /* Triple */{
                  _0: p,
                  _1: /* KONT */0,
                  _2: s
                },
                _1: {
                  TAG: /* G */3,
                  _0: kont._0,
                  _1: kont._1
                }
              };
    case /* Y */2 :
    case /* Yr */4 :
        break;
    
  }
  return {
          TAG: /* G */3,
          _0: /* Triple */{
            _0: p,
            _1: kont._0,
            _2: s
          },
          _1: kont._1
        };
}

function yellow(p, kont, s) {
  var kont$1 = kont._0;
  switch (kont$1.TAG | 0) {
    case /* Suffix */0 :
        return {
                TAG: /* Y */2,
                _0: /* Triple */{
                  _0: p,
                  _1: /* KONT */0,
                  _2: s
                },
                _1: kont$1
              };
    case /* Y */2 :
        return {
                TAG: /* Y */2,
                _0: /* Triple */{
                  _0: p,
                  _1: kont$1._0,
                  _2: s
                },
                _1: kont$1._1
              };
    case /* G */3 :
        return {
                TAG: /* Y */2,
                _0: /* Triple */{
                  _0: p,
                  _1: /* KONT */0,
                  _2: s
                },
                _1: {
                  TAG: /* G */3,
                  _0: kont$1._0,
                  _1: kont$1._1
                }
              };
    
  }
}

function orange(p, kont, s) {
  var kont$1 = kont._0;
  switch (kont$1.TAG | 0) {
    case /* R */1 :
        return /* Any_kont */{
                _0: {
                  TAG: /* Yr */4,
                  _0: /* Triple */{
                    _0: p,
                    _1: /* KONT */0,
                    _2: s
                  },
                  _1: kont$1
                }
              };
    case /* Y */2 :
        return /* Any_kont */{
                _0: {
                  TAG: /* Y */2,
                  _0: /* Triple */{
                    _0: p,
                    _1: kont$1._0,
                    _2: s
                  },
                  _1: kont$1._1
                }
              };
    case /* Suffix */0 :
    case /* G */3 :
        break;
    case /* Yr */4 :
        return /* Any_kont */{
                _0: {
                  TAG: /* Yr */4,
                  _0: /* Triple */{
                    _0: p,
                    _1: kont$1._0,
                    _2: s
                  },
                  _1: kont$1._1
                }
              };
    
  }
  return /* Any_kont */{
          _0: {
            TAG: /* Y */2,
            _0: /* Triple */{
              _0: p,
              _1: /* KONT */0,
              _2: s
            },
            _1: kont$1
          }
        };
}

function red(p, kont, s) {
  var kont$1 = kont._0;
  switch (kont$1.TAG | 0) {
    case /* Suffix */0 :
        return {
                TAG: /* R */1,
                _0: /* Triple */{
                  _0: p,
                  _1: /* KONT */0,
                  _2: s
                },
                _1: kont$1
              };
    case /* Y */2 :
        return {
                TAG: /* R */1,
                _0: /* Triple */{
                  _0: p,
                  _1: kont$1._0,
                  _2: s
                },
                _1: kont$1._1
              };
    case /* G */3 :
        return {
                TAG: /* R */1,
                _0: /* Triple */{
                  _0: p,
                  _1: /* KONT */0,
                  _2: s
                },
                _1: {
                  TAG: /* G */3,
                  _0: kont$1._0,
                  _1: kont$1._1
                }
              };
    
  }
}

function green_prefix_cons(x, param) {
  return {
          TAG: /* P4 */2,
          _0: x,
          _1: param._0,
          _2: param._1,
          _3: param._2,
          _4: Dequeue_internal$ReasonDeque.cons(param._3, param._4)
        };
}

function red_prefix_cons(x, param) {
  return {
          TAG: /* P3 */1,
          _0: x,
          _1: param._0,
          _2: param._1
        };
}

function yellow_prefix_cons(x, param) {
  return {
          TAG: /* P4 */2,
          _0: x,
          _1: param._0,
          _2: param._1,
          _3: param._2,
          _4: Dequeue_internal$ReasonDeque.empty
        };
}

function prefix_cons(x, p) {
  switch (p.TAG | 0) {
    case /* P2 */0 :
        return /* Any */{
                _0: {
                  TAG: /* P3 */1,
                  _0: x,
                  _1: p._0,
                  _2: p._1
                }
              };
    case /* P3 */1 :
        return /* Any */{
                _0: {
                  TAG: /* P4 */2,
                  _0: x,
                  _1: p._0,
                  _2: p._1,
                  _3: p._2,
                  _4: Dequeue_internal$ReasonDeque.empty
                }
              };
    case /* P4 */2 :
        return /* Any */{
                _0: {
                  TAG: /* P4 */2,
                  _0: x,
                  _1: p._0,
                  _2: p._1,
                  _3: p._2,
                  _4: Dequeue_internal$ReasonDeque.cons(p._3, p._4)
                }
              };
    
  }
}

function cons$prime(x, t) {
  switch (t.TAG | 0) {
    case /* Suffix */0 :
        return /* T */{
                _0: {
                  TAG: /* Suffix */0,
                  _0: Dequeue_internal$ReasonDeque.cons(x, t._0)
                }
              };
    case /* R */1 :
        var match = t._0;
        var p = red_prefix_cons(x, match._0);
        return /* T */{
                _0: {
                  TAG: /* Y */2,
                  _0: /* Triple */{
                    _0: p,
                    _1: match._1,
                    _2: match._2
                  },
                  _1: t._1
                }
              };
    case /* G */3 :
        var match$1 = t._0;
        var p$1 = green_prefix_cons(x, match$1._0);
        return /* T */{
                _0: {
                  TAG: /* G */3,
                  _0: /* Triple */{
                    _0: p$1,
                    _1: match$1._1,
                    _2: match$1._2
                  },
                  _1: t._1
                }
              };
    case /* Y */2 :
    case /* Yr */4 :
        break;
    
  }
  var match$2 = t._0;
  var p$2 = yellow_prefix_cons(x, match$2._0);
  return /* T */{
          _0: {
            TAG: /* G */3,
            _0: /* Triple */{
              _0: p$2,
              _1: match$2._1,
              _2: match$2._2
            },
            _1: t._1
          }
        };
}

function cons_any(x, t) {
  var t$1 = cons$prime(x, t._0);
  return /* Any_kont */{
          _0: t$1._0
        };
}

function cons_any$prime(x, t) {
  return cons$prime(x, t._0);
}

function cons(x, t) {
  return cons$prime(x, t._0);
}

function snoc_any(x, t) {
  var t$1 = t._0;
  switch (t$1.TAG | 0) {
    case /* Suffix */0 :
        return /* Any_kont */{
                _0: {
                  TAG: /* Suffix */0,
                  _0: Dequeue_internal$ReasonDeque.snoc(t$1._0, x)
                }
              };
    case /* R */1 :
        var match = t$1._0;
        var s = Dequeue_internal$ReasonDeque.snoc(match._2, x);
        return /* Any_kont */{
                _0: {
                  TAG: /* R */1,
                  _0: /* Triple */{
                    _0: match._0,
                    _1: match._1,
                    _2: s
                  },
                  _1: t$1._1
                }
              };
    case /* Y */2 :
        var match$1 = t$1._0;
        var s$1 = Dequeue_internal$ReasonDeque.snoc(match$1._2, x);
        return /* Any_kont */{
                _0: {
                  TAG: /* Y */2,
                  _0: /* Triple */{
                    _0: match$1._0,
                    _1: match$1._1,
                    _2: s$1
                  },
                  _1: t$1._1
                }
              };
    case /* G */3 :
        var match$2 = t$1._0;
        var s$2 = Dequeue_internal$ReasonDeque.snoc(match$2._2, x);
        return /* Any_kont */{
                _0: {
                  TAG: /* G */3,
                  _0: /* Triple */{
                    _0: match$2._0,
                    _1: match$2._1,
                    _2: s$2
                  },
                  _1: t$1._1
                }
              };
    case /* Yr */4 :
        var match$3 = t$1._0;
        var s$3 = Dequeue_internal$ReasonDeque.snoc(match$3._2, x);
        return /* Any_kont */{
                _0: {
                  TAG: /* Yr */4,
                  _0: /* Triple */{
                    _0: match$3._0,
                    _1: match$3._1,
                    _2: s$3
                  },
                  _1: t$1._1
                }
              };
    
  }
}

function snoc(t, x) {
  var t$1 = t._0;
  switch (t$1.TAG | 0) {
    case /* Suffix */0 :
        return /* T */{
                _0: {
                  TAG: /* Suffix */0,
                  _0: Dequeue_internal$ReasonDeque.snoc(t$1._0, x)
                }
              };
    case /* Y */2 :
        var match = t$1._0;
        var s = Dequeue_internal$ReasonDeque.snoc(match._2, x);
        return /* T */{
                _0: {
                  TAG: /* Y */2,
                  _0: /* Triple */{
                    _0: match._0,
                    _1: match._1,
                    _2: s
                  },
                  _1: t$1._1
                }
              };
    case /* G */3 :
        var match$1 = t$1._0;
        var s$1 = Dequeue_internal$ReasonDeque.snoc(match$1._2, x);
        return /* T */{
                _0: {
                  TAG: /* G */3,
                  _0: /* Triple */{
                    _0: match$1._0,
                    _1: match$1._1,
                    _2: s$1
                  },
                  _1: t$1._1
                }
              };
    
  }
}

function join_any(child, s, ty) {
  var match = Dequeue_internal$ReasonDeque.uncons(s);
  var match$1;
  if (match !== undefined) {
    var x = match[0];
    var match$2 = Dequeue_internal$ReasonDeque.uncons(match[1]);
    if (match$2 !== undefined) {
      var y = match$2[0];
      var match$3 = Dequeue_internal$ReasonDeque.uncons(match$2[1]);
      var prefix;
      if (match$3 !== undefined) {
        var z = match$3[0];
        var match$4 = Dequeue_internal$ReasonDeque.uncons(match$3[1]);
        prefix = match$4 !== undefined ? /* Pair */({
              _0: {
                TAG: /* P4 */2,
                _0: x,
                _1: y,
                _2: z,
                _3: match$4[0],
                _4: match$4[1]
              },
              _1: empty_kont
            }) : /* Pair */({
              _0: {
                TAG: /* P3 */1,
                _0: x,
                _1: y,
                _2: z
              },
              _1: empty_kont
            });
      } else {
        prefix = /* Pair */{
          _0: {
            TAG: /* P2 */0,
            _0: x,
            _1: y
          },
          _1: empty_kont
        };
      }
      match$1 = [
        snoc_any(prefix, /* Any_kont */{
              _0: child
            }),
        ty
      ];
    } else {
      match$1 = [
        /* Any_kont */{
          _0: child
        },
        cons_any(x, ty)
      ];
    }
  } else {
    match$1 = [
      /* Any_kont */{
        _0: child
      },
      ty
    ];
  }
  var y$1 = match$1[1]._0;
  var child$1 = match$1[0];
  switch (y$1.TAG | 0) {
    case /* Suffix */0 :
        return [
                child$1,
                y$1._0
              ];
    case /* R */1 :
        var match$5 = y$1._0;
        var match$6 = match$5._1;
        var y_prefix = match$5._0;
        if (match$6) {
          var y_child_0 = match$6._0;
          var y_child_1 = match$6._1;
          var y_child_2 = match$6._2;
          var y_child = /* Triple */{
            _0: y_child_0,
            _1: y_child_1,
            _2: y_child_2
          };
          var yp_1 = {
            TAG: /* Y */2,
            _0: y_child,
            _1: y$1._1
          };
          var yp = /* Pair */{
            _0: y_prefix,
            _1: yp_1
          };
          return [
                  snoc_any(yp, child$1),
                  match$5._2
                ];
        }
        var yp_1$1 = y$1._1;
        var yp$1 = /* Pair */{
          _0: y_prefix,
          _1: yp_1$1
        };
        return [
                snoc_any(yp$1, child$1),
                match$5._2
              ];
    case /* Y */2 :
        var match$7 = y$1._0;
        var match$8 = match$7._1;
        var y_prefix$1 = match$7._0;
        if (match$8) {
          var y_child_0$1 = match$8._0;
          var y_child_1$1 = match$8._1;
          var y_child_2$1 = match$8._2;
          var y_child$1 = /* Triple */{
            _0: y_child_0$1,
            _1: y_child_1$1,
            _2: y_child_2$1
          };
          var yp_1$2 = {
            TAG: /* Y */2,
            _0: y_child$1,
            _1: y$1._1
          };
          var yp$2 = /* Pair */{
            _0: y_prefix$1,
            _1: yp_1$2
          };
          return [
                  snoc_any(yp$2, child$1),
                  match$7._2
                ];
        }
        var yp_1$3 = y$1._1;
        var yp$3 = /* Pair */{
          _0: y_prefix$1,
          _1: yp_1$3
        };
        return [
                snoc_any(yp$3, child$1),
                match$7._2
              ];
    case /* G */3 :
        var match$9 = y$1._0;
        var match$10 = match$9._1;
        var y_prefix$2 = match$9._0;
        if (match$10) {
          var y_kont = y$1._1;
          var y_child_0$2 = match$10._0;
          var y_child_1$2 = match$10._1;
          var y_child_2$2 = match$10._2;
          var y_child$2 = /* Triple */{
            _0: y_child_0$2,
            _1: y_child_1$2,
            _2: y_child_2$2
          };
          var y_child$3;
          switch (y_kont.TAG | 0) {
            case /* Suffix */0 :
                y_child$3 = /* Any_kont */{
                  _0: {
                    TAG: /* Y */2,
                    _0: y_child$2,
                    _1: {
                      TAG: /* Suffix */0,
                      _0: y_kont._0
                    }
                  }
                };
                break;
            case /* R */1 :
                y_child$3 = /* Any_kont */{
                  _0: {
                    TAG: /* Yr */4,
                    _0: y_child$2,
                    _1: {
                      TAG: /* R */1,
                      _0: y_kont._0,
                      _1: y_kont._1
                    }
                  }
                };
                break;
            case /* G */3 :
                y_child$3 = /* Any_kont */{
                  _0: {
                    TAG: /* Y */2,
                    _0: y_child$2,
                    _1: {
                      TAG: /* G */3,
                      _0: y_kont._0,
                      _1: y_kont._1
                    }
                  }
                };
                break;
            
          }
          var yp_1$4 = y_child$3._0;
          var yp$4 = /* Pair */{
            _0: y_prefix$2,
            _1: yp_1$4
          };
          return [
                  snoc_any(yp$4, child$1),
                  match$9._2
                ];
        }
        var yp_1$5 = y$1._1;
        var yp$5 = /* Pair */{
          _0: y_prefix$2,
          _1: yp_1$5
        };
        return [
                snoc_any(yp$5, child$1),
                match$9._2
              ];
    case /* Yr */4 :
        var match$11 = y$1._0;
        var match$12 = match$11._1;
        var y_prefix$3 = match$11._0;
        if (match$12) {
          var y_child_0$3 = match$12._0;
          var y_child_1$3 = match$12._1;
          var y_child_2$3 = match$12._2;
          var y_child$4 = /* Triple */{
            _0: y_child_0$3,
            _1: y_child_1$3,
            _2: y_child_2$3
          };
          var yp_1$6 = {
            TAG: /* Yr */4,
            _0: y_child$4,
            _1: y$1._1
          };
          var yp$6 = /* Pair */{
            _0: y_prefix$3,
            _1: yp_1$6
          };
          return [
                  snoc_any(yp$6, child$1),
                  match$11._2
                ];
        }
        var yp_1$7 = y$1._1;
        var yp$7 = /* Pair */{
          _0: y_prefix$3,
          _1: yp_1$7
        };
        return [
                snoc_any(yp$7, child$1),
                match$11._2
              ];
    
  }
}

function join_t(child, s, ty) {
  var match = Dequeue_internal$ReasonDeque.uncons(s);
  var match$1;
  if (match !== undefined) {
    var x = match[0];
    var match$2 = Dequeue_internal$ReasonDeque.uncons(match[1]);
    if (match$2 !== undefined) {
      var y = match$2[0];
      var match$3 = Dequeue_internal$ReasonDeque.uncons(match$2[1]);
      var prefix;
      if (match$3 !== undefined) {
        var z = match$3[0];
        var match$4 = Dequeue_internal$ReasonDeque.uncons(match$3[1]);
        prefix = match$4 !== undefined ? /* Pair */({
              _0: {
                TAG: /* P4 */2,
                _0: x,
                _1: y,
                _2: z,
                _3: match$4[0],
                _4: match$4[1]
              },
              _1: empty_kont
            }) : /* Pair */({
              _0: {
                TAG: /* P3 */1,
                _0: x,
                _1: y,
                _2: z
              },
              _1: empty_kont
            });
      } else {
        prefix = /* Pair */{
          _0: {
            TAG: /* P2 */0,
            _0: x,
            _1: y
          },
          _1: empty_kont
        };
      }
      match$1 = [
        snoc(child, prefix),
        ty
      ];
    } else {
      match$1 = [
        child,
        cons_any(x, ty)
      ];
    }
  } else {
    match$1 = [
      child,
      ty
    ];
  }
  var y$1 = match$1[1]._0;
  var child$1 = match$1[0];
  switch (y$1.TAG | 0) {
    case /* Suffix */0 :
        return [
                child$1,
                y$1._0
              ];
    case /* R */1 :
        var match$5 = y$1._0;
        var match$6 = match$5._1;
        var y_prefix = match$5._0;
        if (match$6) {
          var y_child_0 = match$6._0;
          var y_child_1 = match$6._1;
          var y_child_2 = match$6._2;
          var y_child = /* Triple */{
            _0: y_child_0,
            _1: y_child_1,
            _2: y_child_2
          };
          var yp_1 = {
            TAG: /* Y */2,
            _0: y_child,
            _1: y$1._1
          };
          var yp = /* Pair */{
            _0: y_prefix,
            _1: yp_1
          };
          return [
                  snoc(child$1, yp),
                  match$5._2
                ];
        }
        var yp_1$1 = y$1._1;
        var yp$1 = /* Pair */{
          _0: y_prefix,
          _1: yp_1$1
        };
        return [
                snoc(child$1, yp$1),
                match$5._2
              ];
    case /* Y */2 :
        var match$7 = y$1._0;
        var match$8 = match$7._1;
        var y_prefix$1 = match$7._0;
        if (match$8) {
          var y_child_0$1 = match$8._0;
          var y_child_1$1 = match$8._1;
          var y_child_2$1 = match$8._2;
          var y_child$1 = /* Triple */{
            _0: y_child_0$1,
            _1: y_child_1$1,
            _2: y_child_2$1
          };
          var yp_1$2 = {
            TAG: /* Y */2,
            _0: y_child$1,
            _1: y$1._1
          };
          var yp$2 = /* Pair */{
            _0: y_prefix$1,
            _1: yp_1$2
          };
          return [
                  snoc(child$1, yp$2),
                  match$7._2
                ];
        }
        var yp_1$3 = y$1._1;
        var yp$3 = /* Pair */{
          _0: y_prefix$1,
          _1: yp_1$3
        };
        return [
                snoc(child$1, yp$3),
                match$7._2
              ];
    case /* G */3 :
        var match$9 = y$1._0;
        var match$10 = match$9._1;
        var y_prefix$2 = match$9._0;
        if (match$10) {
          var y_kont = y$1._1;
          var y_child_0$2 = match$10._0;
          var y_child_1$2 = match$10._1;
          var y_child_2$2 = match$10._2;
          var y_child$2 = /* Triple */{
            _0: y_child_0$2,
            _1: y_child_1$2,
            _2: y_child_2$2
          };
          var y_child$3;
          switch (y_kont.TAG | 0) {
            case /* Suffix */0 :
                y_child$3 = /* Any_kont */{
                  _0: {
                    TAG: /* Y */2,
                    _0: y_child$2,
                    _1: {
                      TAG: /* Suffix */0,
                      _0: y_kont._0
                    }
                  }
                };
                break;
            case /* R */1 :
                y_child$3 = /* Any_kont */{
                  _0: {
                    TAG: /* Yr */4,
                    _0: y_child$2,
                    _1: {
                      TAG: /* R */1,
                      _0: y_kont._0,
                      _1: y_kont._1
                    }
                  }
                };
                break;
            case /* G */3 :
                y_child$3 = /* Any_kont */{
                  _0: {
                    TAG: /* Y */2,
                    _0: y_child$2,
                    _1: {
                      TAG: /* G */3,
                      _0: y_kont._0,
                      _1: y_kont._1
                    }
                  }
                };
                break;
            
          }
          var yp_1$4 = y_child$3._0;
          var yp$4 = /* Pair */{
            _0: y_prefix$2,
            _1: yp_1$4
          };
          return [
                  snoc(child$1, yp$4),
                  match$9._2
                ];
        }
        var yp_1$5 = y$1._1;
        var yp$5 = /* Pair */{
          _0: y_prefix$2,
          _1: yp_1$5
        };
        return [
                snoc(child$1, yp$5),
                match$9._2
              ];
    case /* Yr */4 :
        var match$11 = y$1._0;
        var match$12 = match$11._1;
        var y_prefix$3 = match$11._0;
        if (match$12) {
          var y_child_0$3 = match$12._0;
          var y_child_1$3 = match$12._1;
          var y_child_2$3 = match$12._2;
          var y_child$4 = /* Triple */{
            _0: y_child_0$3,
            _1: y_child_1$3,
            _2: y_child_2$3
          };
          var yp_1$6 = {
            TAG: /* Yr */4,
            _0: y_child$4,
            _1: y$1._1
          };
          var yp$6 = /* Pair */{
            _0: y_prefix$3,
            _1: yp_1$6
          };
          return [
                  snoc(child$1, yp$6),
                  match$11._2
                ];
        }
        var yp_1$7 = y$1._1;
        var yp$7 = /* Pair */{
          _0: y_prefix$3,
          _1: yp_1$7
        };
        return [
                snoc(child$1, yp$7),
                match$11._2
              ];
    
  }
}

function split_kont(green_or_red, steque, kont) {
  if (!steque) {
    return /* Any_kont */{
            _0: kont
          };
  }
  var s = steque._2;
  var c = steque._1;
  var p = steque._0;
  switch (kont.TAG | 0) {
    case /* Suffix */0 :
        return /* Any_kont */{
                _0: {
                  TAG: /* Y */2,
                  _0: /* Triple */{
                    _0: p,
                    _1: c,
                    _2: s
                  },
                  _1: {
                    TAG: /* Suffix */0,
                    _0: kont._0
                  }
                }
              };
    case /* R */1 :
        return /* Any_kont */{
                _0: {
                  TAG: /* Yr */4,
                  _0: /* Triple */{
                    _0: p,
                    _1: c,
                    _2: s
                  },
                  _1: {
                    TAG: /* R */1,
                    _0: kont._0,
                    _1: kont._1
                  }
                }
              };
    case /* G */3 :
        return /* Any_kont */{
                _0: {
                  TAG: /* Y */2,
                  _0: /* Triple */{
                    _0: p,
                    _1: c,
                    _2: s
                  },
                  _1: {
                    TAG: /* G */3,
                    _0: kont._0,
                    _1: kont._1
                  }
                }
              };
    
  }
}

function split_green(steque, kont) {
  if (!steque) {
    return /* T */{
            _0: kont
          };
  }
  var s = steque._2;
  var c = steque._1;
  var p = steque._0;
  if (kont.TAG === /* Suffix */0) {
    return /* T */{
            _0: {
              TAG: /* Y */2,
              _0: /* Triple */{
                _0: p,
                _1: c,
                _2: s
              },
              _1: {
                TAG: /* Suffix */0,
                _0: kont._0
              }
            }
          };
  } else {
    return /* T */{
            _0: {
              TAG: /* Y */2,
              _0: /* Triple */{
                _0: p,
                _1: c,
                _2: s
              },
              _1: {
                TAG: /* G */3,
                _0: kont._0,
                _1: kont._1
              }
            }
          };
  }
}

function split_red(steque, kont) {
  if (steque) {
    return /* Any_kont */{
            _0: {
              TAG: /* Yr */4,
              _0: /* Triple */{
                _0: steque._0,
                _1: steque._1,
                _2: steque._2
              },
              _1: {
                TAG: /* R */1,
                _0: kont._0,
                _1: kont._1
              }
            }
          };
  } else {
    return /* Any_kont */{
            _0: kont
          };
  }
}

function partitioned(kont) {
  var kont$1 = kont._0;
  switch (kont$1.TAG | 0) {
    case /* Suffix */0 :
        return {
                TAG: /* Small */0,
                _0: kont$1._0
              };
    case /* R */1 :
        var match = kont$1._0;
        var match$1 = match._1;
        var p = match._0;
        if (match$1) {
          return {
                  TAG: /* Parts */1,
                  _0: p,
                  _1: {
                    TAG: /* Y */2,
                    _0: /* Triple */{
                      _0: match$1._0,
                      _1: match$1._1,
                      _2: match$1._2
                    },
                    _1: kont$1._1
                  },
                  _2: match._2
                };
        } else {
          return {
                  TAG: /* Parts */1,
                  _0: p,
                  _1: kont$1._1,
                  _2: match._2
                };
        }
    case /* Y */2 :
        var match$2 = kont$1._0;
        var match$3 = match$2._1;
        var p$1 = match$2._0;
        if (match$3) {
          return {
                  TAG: /* Parts */1,
                  _0: p$1,
                  _1: {
                    TAG: /* Y */2,
                    _0: /* Triple */{
                      _0: match$3._0,
                      _1: match$3._1,
                      _2: match$3._2
                    },
                    _1: kont$1._1
                  },
                  _2: match$2._2
                };
        } else {
          return {
                  TAG: /* Parts */1,
                  _0: p$1,
                  _1: kont$1._1,
                  _2: match$2._2
                };
        }
    case /* G */3 :
        var match$4 = kont$1._0;
        var match$5 = match$4._1;
        var p$2 = match$4._0;
        if (!match$5) {
          return {
                  TAG: /* Parts */1,
                  _0: p$2,
                  _1: kont$1._1,
                  _2: match$4._2
                };
        }
        var k = kont$1._1;
        var s = match$4._2;
        var z = match$5._2;
        var y = match$5._1;
        var x = match$5._0;
        switch (k.TAG | 0) {
          case /* Suffix */0 :
              return {
                      TAG: /* Parts */1,
                      _0: p$2,
                      _1: {
                        TAG: /* Y */2,
                        _0: /* Triple */{
                          _0: x,
                          _1: y,
                          _2: z
                        },
                        _1: {
                          TAG: /* Suffix */0,
                          _0: k._0
                        }
                      },
                      _2: s
                    };
          case /* R */1 :
              return {
                      TAG: /* Parts */1,
                      _0: p$2,
                      _1: {
                        TAG: /* Yr */4,
                        _0: /* Triple */{
                          _0: x,
                          _1: y,
                          _2: z
                        },
                        _1: {
                          TAG: /* R */1,
                          _0: k._0,
                          _1: k._1
                        }
                      },
                      _2: s
                    };
          case /* G */3 :
              return {
                      TAG: /* Parts */1,
                      _0: p$2,
                      _1: {
                        TAG: /* Y */2,
                        _0: /* Triple */{
                          _0: x,
                          _1: y,
                          _2: z
                        },
                        _1: {
                          TAG: /* G */3,
                          _0: k._0,
                          _1: k._1
                        }
                      },
                      _2: s
                    };
          
        }
    case /* Yr */4 :
        var match$6 = kont$1._0;
        var match$7 = match$6._1;
        var p$3 = match$6._0;
        if (match$7) {
          return {
                  TAG: /* Parts */1,
                  _0: p$3,
                  _1: {
                    TAG: /* Yr */4,
                    _0: /* Triple */{
                      _0: match$7._0,
                      _1: match$7._1,
                      _2: match$7._2
                    },
                    _1: kont$1._1
                  },
                  _2: match$6._2
                };
        } else {
          return {
                  TAG: /* Parts */1,
                  _0: p$3,
                  _1: kont$1._1,
                  _2: match$6._2
                };
        }
    
  }
}

function concat_kont(x, ty) {
  switch (x.TAG | 0) {
    case /* Suffix */0 :
        var match = Dequeue_internal$ReasonDeque.uncons(x._0);
        if (match === undefined) {
          return ty;
        }
        var x$1 = match[0];
        var match$1 = Dequeue_internal$ReasonDeque.uncons(match[1]);
        if (match$1 === undefined) {
          return cons_any(x$1, ty);
        }
        var y = match$1[0];
        var match$2 = Dequeue_internal$ReasonDeque.uncons(match$1[1]);
        if (match$2 === undefined) {
          return cons_any(x$1, cons_any(y, ty));
        }
        var z = match$2[0];
        var match$3 = Dequeue_internal$ReasonDeque.uncons(match$2[1]);
        if (match$3 === undefined) {
          return cons_any(x$1, cons_any(y, cons_any(z, ty)));
        }
        var prefix_3 = match$3[0];
        var prefix_4 = match$3[1];
        var prefix = {
          TAG: /* P4 */2,
          _0: x$1,
          _1: y,
          _2: z,
          _3: prefix_3,
          _4: prefix_4
        };
        var c = partitioned(ty);
        if (c.TAG === /* Small */0) {
          return /* Any_kont */{
                  _0: {
                    TAG: /* G */3,
                    _0: /* Triple */{
                      _0: prefix,
                      _1: /* KONT */0,
                      _2: c._0
                    },
                    _1: empty_kont
                  }
                };
        }
        var child = cons_any$prime(/* Pair */{
              _0: c._0,
              _1: empty_kont
            }, /* Any_kont */{
              _0: c._1
            });
        return /* Any_kont */{
                _0: green(prefix, child._0, c._2)
              };
    case /* R */1 :
        var match$4 = x._0;
        var child$1 = split_green(match$4._1, x._1);
        var match$5 = join_t(child$1, match$4._2, ty);
        return /* Any_kont */{
                _0: red(match$4._0, match$5[0], match$5[1])
              };
    case /* Y */2 :
        var match$6 = x._0;
        var child$2 = split_green(match$6._1, x._1);
        var match$7 = join_t(child$2, match$6._2, ty);
        return /* Any_kont */{
                _0: yellow(match$6._0, match$7[0], match$7[1])
              };
    case /* G */3 :
        var match$8 = x._0;
        var child$3 = split_kont(/* Green_or_red */0, match$8._1, x._1);
        var match$9 = join_any(child$3._0, match$8._2, ty);
        return /* Any_kont */{
                _0: green(match$8._0, match$9[0]._0, match$9[1])
              };
    case /* Yr */4 :
        var match$10 = x._0;
        var child$4 = split_red(match$10._1, x._1);
        var match$11 = join_any(child$4._0, match$10._2, ty);
        return orange(match$10._0, match$11[0], match$11[1]);
    
  }
}

function any_kont(t) {
  return /* Any_kont */{
          _0: t._0
        };
}

function concat(x, ty) {
  var x$1 = x._0;
  switch (x$1.TAG | 0) {
    case /* Suffix */0 :
        var match = Dequeue_internal$ReasonDeque.uncons(x$1._0);
        if (match === undefined) {
          return ty;
        }
        var x$2 = match[0];
        var match$1 = Dequeue_internal$ReasonDeque.uncons(match[1]);
        if (match$1 === undefined) {
          return cons(x$2, ty);
        }
        var y = match$1[0];
        var match$2 = Dequeue_internal$ReasonDeque.uncons(match$1[1]);
        if (match$2 === undefined) {
          return cons(x$2, cons(y, ty));
        }
        var z = match$2[0];
        var match$3 = Dequeue_internal$ReasonDeque.uncons(match$2[1]);
        if (match$3 === undefined) {
          return cons(x$2, cons(y, cons(z, ty)));
        }
        var prefix_3 = match$3[0];
        var prefix_4 = match$3[1];
        var prefix = {
          TAG: /* P4 */2,
          _0: x$2,
          _1: y,
          _2: z,
          _3: prefix_3,
          _4: prefix_4
        };
        var c = partitioned(any_kont(ty));
        if (c.TAG === /* Small */0) {
          return /* T */{
                  _0: {
                    TAG: /* G */3,
                    _0: /* Triple */{
                      _0: prefix,
                      _1: /* KONT */0,
                      _2: c._0
                    },
                    _1: empty_kont
                  }
                };
        }
        var child = cons_any$prime(/* Pair */{
              _0: c._0,
              _1: empty_kont
            }, /* Any_kont */{
              _0: c._1
            });
        return /* T */{
                _0: green(prefix, child._0, c._2)
              };
    case /* Y */2 :
        var match$4 = x$1._0;
        var child$1 = split_green(match$4._1, x$1._1);
        var match$5 = join_t(child$1, match$4._2, any_kont(ty));
        return /* T */{
                _0: yellow(match$4._0, match$5[0], match$5[1])
              };
    case /* G */3 :
        var match$6 = x$1._0;
        var child$2 = split_kont(/* Green_or_red */0, match$6._1, x$1._1);
        var match$7 = join_any(child$2._0, match$6._2, any_kont(ty));
        return /* T */{
                _0: green(match$6._0, match$7[0]._0, match$7[1])
              };
    
  }
}

function green_pop(param) {
  var d = param._3;
  var c = param._2;
  var b = param._1;
  var a = param._0;
  var match = Dequeue_internal$ReasonDeque.uncons(param._4);
  if (match !== undefined) {
    return [
            a,
            /* Any */{
              _0: {
                TAG: /* P4 */2,
                _0: b,
                _1: c,
                _2: d,
                _3: match[0],
                _4: match[1]
              }
            }
          ];
  } else {
    return [
            a,
            /* Any */{
              _0: {
                TAG: /* P3 */1,
                _0: b,
                _1: c,
                _2: d
              }
            }
          ];
  }
}

function yellow_pop(param) {
  return [
          param._0,
          {
            TAG: /* P2 */0,
            _0: param._1,
            _1: param._2
          }
        ];
}

function green_of_red(param) {
  var match = param._0;
  var match$1 = match._1;
  var match$2 = match._0;
  var b = match$2._1;
  var a = match$2._0;
  if (match$1) {
    var match$3 = yellow_pop(match$1._0);
    var match$4 = match$3[0];
    var p = match$4._0;
    var p$1;
    switch (p.TAG | 0) {
      case /* P2 */0 :
          p$1 = {
            TAG: /* P4 */2,
            _0: a,
            _1: b,
            _2: p._0,
            _3: p._1,
            _4: Dequeue_internal$ReasonDeque.empty
          };
          break;
      case /* P3 */1 :
          p$1 = {
            TAG: /* P4 */2,
            _0: a,
            _1: b,
            _2: p._0,
            _3: p._1,
            _4: Dequeue_internal$ReasonDeque.cons(p._2, Dequeue_internal$ReasonDeque.empty)
          };
          break;
      case /* P4 */2 :
          p$1 = {
            TAG: /* P4 */2,
            _0: a,
            _1: b,
            _2: p._0,
            _3: p._1,
            _4: Dequeue_internal$ReasonDeque.cons(p._2, Dequeue_internal$ReasonDeque.cons(p._3, p._4))
          };
          break;
      
    }
    var child = /* Any_kont */{
      _0: {
        TAG: /* R */1,
        _0: /* Triple */{
          _0: match$3[1],
          _1: match$1._1,
          _2: match$1._2
        },
        _1: param._1
      }
    };
    var child$1 = concat_kont(match$4._1, child);
    return green(p$1, child$1._0, match._2);
  }
  var small = param._1;
  var s = match._2;
  if (small.TAG === /* Suffix */0) {
    var match$5 = Dequeue_internal$ReasonDeque.uncons(small._0);
    if (match$5 === undefined) {
      return {
              TAG: /* Suffix */0,
              _0: Dequeue_internal$ReasonDeque.cons(a, Dequeue_internal$ReasonDeque.cons(b, s))
            };
    }
    var match$6 = match$5[0];
    var p$2 = match$6._0;
    var p$3;
    switch (p$2.TAG | 0) {
      case /* P2 */0 :
          p$3 = {
            TAG: /* P4 */2,
            _0: a,
            _1: b,
            _2: p$2._0,
            _3: p$2._1,
            _4: Dequeue_internal$ReasonDeque.empty
          };
          break;
      case /* P3 */1 :
          p$3 = {
            TAG: /* P4 */2,
            _0: a,
            _1: b,
            _2: p$2._0,
            _3: p$2._1,
            _4: Dequeue_internal$ReasonDeque.cons(p$2._2, Dequeue_internal$ReasonDeque.empty)
          };
          break;
      case /* P4 */2 :
          p$3 = {
            TAG: /* P4 */2,
            _0: a,
            _1: b,
            _2: p$2._0,
            _3: p$2._1,
            _4: Dequeue_internal$ReasonDeque.cons(p$2._2, Dequeue_internal$ReasonDeque.cons(p$2._3, p$2._4))
          };
          break;
      
    }
    var child$2 = concat_kont(match$6._1, /* Any_kont */{
          _0: {
            TAG: /* Suffix */0,
            _0: match$5[1]
          }
        });
    return green(p$3, child$2._0, s);
  }
  var k = small._1;
  var match$7 = small._0;
  var s2 = match$7._2;
  var child$3 = match$7._1;
  var match$8 = green_pop(match$7._0);
  var yellow_p = match$8[1]._0;
  var match$9 = match$8[0];
  var p$4 = match$9._0;
  var p$5;
  switch (p$4.TAG | 0) {
    case /* P2 */0 :
        p$5 = {
          TAG: /* P4 */2,
          _0: a,
          _1: b,
          _2: p$4._0,
          _3: p$4._1,
          _4: Dequeue_internal$ReasonDeque.empty
        };
        break;
    case /* P3 */1 :
        p$5 = {
          TAG: /* P4 */2,
          _0: a,
          _1: b,
          _2: p$4._0,
          _3: p$4._1,
          _4: Dequeue_internal$ReasonDeque.cons(p$4._2, Dequeue_internal$ReasonDeque.empty)
        };
        break;
    case /* P4 */2 :
        p$5 = {
          TAG: /* P4 */2,
          _0: a,
          _1: b,
          _2: p$4._0,
          _3: p$4._1,
          _4: Dequeue_internal$ReasonDeque.cons(p$4._2, Dequeue_internal$ReasonDeque.cons(p$4._3, p$4._4))
        };
        break;
    
  }
  var child$4;
  if (yellow_p.TAG === /* P3 */1) {
    var c = yellow_p._2;
    var b$1 = yellow_p._1;
    var a$1 = yellow_p._0;
    switch (k.TAG | 0) {
      case /* Suffix */0 :
          child$4 = /* Any_kont */{
            _0: {
              TAG: /* Y */2,
              _0: /* Triple */{
                _0: {
                  TAG: /* P3 */1,
                  _0: a$1,
                  _1: b$1,
                  _2: c
                },
                _1: child$3,
                _2: s2
              },
              _1: {
                TAG: /* Suffix */0,
                _0: k._0
              }
            }
          };
          break;
      case /* R */1 :
          child$4 = /* Any_kont */{
            _0: {
              TAG: /* Yr */4,
              _0: /* Triple */{
                _0: {
                  TAG: /* P3 */1,
                  _0: a$1,
                  _1: b$1,
                  _2: c
                },
                _1: child$3,
                _2: s2
              },
              _1: {
                TAG: /* R */1,
                _0: k._0,
                _1: k._1
              }
            }
          };
          break;
      case /* G */3 :
          child$4 = /* Any_kont */{
            _0: {
              TAG: /* Y */2,
              _0: /* Triple */{
                _0: {
                  TAG: /* P3 */1,
                  _0: a$1,
                  _1: b$1,
                  _2: c
                },
                _1: child$3,
                _2: s2
              },
              _1: {
                TAG: /* G */3,
                _0: k._0,
                _1: k._1
              }
            }
          };
          break;
      
    }
  } else {
    child$4 = /* Any_kont */{
      _0: {
        TAG: /* G */3,
        _0: /* Triple */{
          _0: {
            TAG: /* P4 */2,
            _0: yellow_p._0,
            _1: yellow_p._1,
            _2: yellow_p._2,
            _3: yellow_p._3,
            _4: yellow_p._4
          },
          _1: child$3,
          _2: s2
        },
        _1: k
      }
    };
  }
  var child$5 = concat_kont(match$9._1, child$4);
  return green(p$5, child$5._0, s);
}

function make_green(not_yellow, kont) {
  switch (kont.TAG | 0) {
    case /* Suffix */0 :
        return {
                TAG: /* Suffix */0,
                _0: kont._0
              };
    case /* R */1 :
        return green_of_red({
                    TAG: /* R */1,
                    _0: kont._0,
                    _1: kont._1
                  });
    case /* G */3 :
        return {
                TAG: /* G */3,
                _0: kont._0,
                _1: kont._1
              };
    
  }
}

function uncons(t) {
  var t$1 = t._0;
  switch (t$1.TAG | 0) {
    case /* Suffix */0 :
        var match = Dequeue_internal$ReasonDeque.uncons(t$1._0);
        if (match !== undefined) {
          return [
                  match[0],
                  /* T */{
                    _0: {
                      TAG: /* Suffix */0,
                      _0: match[1]
                    }
                  }
                ];
        } else {
          return ;
        }
    case /* Y */2 :
        var match$1 = t$1._0;
        var match$2 = yellow_pop(match$1._0);
        return [
                match$2[0],
                /* T */{
                  _0: green_of_red({
                        TAG: /* R */1,
                        _0: /* Triple */{
                          _0: match$2[1],
                          _1: match$1._1,
                          _2: match$1._2
                        },
                        _1: t$1._1
                      })
                }
              ];
    case /* G */3 :
        var k = t$1._1;
        var match$3 = t$1._0;
        var s = match$3._2;
        var c = match$3._1;
        var match$4 = green_pop(match$3._0);
        var p = match$4[1]._0;
        var x = match$4[0];
        if (p.TAG === /* P3 */1) {
          return [
                  x,
                  /* T */{
                    _0: {
                      TAG: /* Y */2,
                      _0: /* Triple */{
                        _0: p,
                        _1: c,
                        _2: s
                      },
                      _1: make_green(/* Not_yellow */0, k)
                    }
                  }
                ];
        } else {
          return [
                  x,
                  /* T */{
                    _0: {
                      TAG: /* G */3,
                      _0: /* Triple */{
                        _0: p,
                        _1: c,
                        _2: s
                      },
                      _1: k
                    }
                  }
                ];
        }
    
  }
}

var Deque;

exports.Deque = Deque;
exports.empty_kont = empty_kont;
exports.empty = empty;
exports.is_empty = is_empty;
exports.green = green;
exports.yellow = yellow;
exports.orange = orange;
exports.red = red;
exports.green_prefix_cons = green_prefix_cons;
exports.red_prefix_cons = red_prefix_cons;
exports.yellow_prefix_cons = yellow_prefix_cons;
exports.prefix_cons = prefix_cons;
exports.cons$prime = cons$prime;
exports.cons_any = cons_any;
exports.cons_any$prime = cons_any$prime;
exports.cons = cons;
exports.snoc_any = snoc_any;
exports.snoc = snoc;
exports.join_any = join_any;
exports.join_t = join_t;
exports.split_kont = split_kont;
exports.split_green = split_green;
exports.split_red = split_red;
exports.partitioned = partitioned;
exports.concat_kont = concat_kont;
exports.any_kont = any_kont;
exports.concat = concat;
exports.green_pop = green_pop;
exports.yellow_pop = yellow_pop;
exports.green_of_red = green_of_red;
exports.make_green = make_green;
exports.uncons = uncons;
/* No side effect */
